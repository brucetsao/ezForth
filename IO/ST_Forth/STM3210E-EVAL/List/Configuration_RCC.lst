###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.20.0.50892/W32 for ARM     07/Oct/2009  13:03:47 #
# Copyright 1999-2008 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\Configuration_RCC. #
#                    c                                                        #
#    Command line =  F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\Configuration_RCC. #
#                    c -D VECT_TAB_FLASH -lC F:\CoLtd\Forth\MCU\STM32F10x\ST_ #
#                    Forth\STM3210E-EVAL\List\ -o                             #
#                    F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\STM3210E-EVAL\Obj\ #
#                     --debug --endian=little --cpu=Cortex-M3 -e              #
#                    --char_is_signed --require_prototypes --fpu=None         #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.0\ARM\INC\DLib_Config_Full.h" -I             #
#                    F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\ -I                #
#                    F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\library\inc\ -I    #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.0\ARM\INC\" -Ohz                                       #
#    List file    =  F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\STM3210E-EVAL\List #
#                    \Configuration_RCC.lst                                   #
#    Object file  =  F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\STM3210E-EVAL\Obj\ #
#                    Configuration_RCC.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\Configuration_RCC.c
      1          #include "platform_config.h"
      2          #include "stm32f10x.h"
      3          #include "stm32f10x_lib.h"
      4          
      5          extern ErrorStatus HSEStartUpStatus;
      6          void RCC_Configuration(void);
      7          /*******************************************************************************
      8          * Function Name  : RCC_Configuration
      9          * Description    : Configures the different system clocks.
     10          * Input          : None
     11          * Output         : None
     12          * Return         : None
     13          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     14          void RCC_Configuration(void)
     15          {   
   \                     RCC_Configuration:
   \   00000000   10B5               PUSH     {R4,LR}
     16            /* RCC system reset(for debug purpose) */
     17            RCC_DeInit();
   \   00000002   ........           BL       RCC_DeInit
     18          
     19            /* Enable HSE */
     20            RCC_HSEConfig(RCC_HSE_ON);
   \   00000006   4FF48030           MOV      R0,#+65536
   \   0000000A   ........           BL       RCC_HSEConfig
     21          
     22            /* Wait till HSE is ready */
     23            HSEStartUpStatus = RCC_WaitForHSEStartUp();
   \   0000000E   2A4C               LDR.N    R4,??RCC_Configuration_0  ;; HSEStartUpStatus
   \   00000010   ........           BL       RCC_WaitForHSEStartUp
   \   00000014   2070               STRB     R0,[R4, #+0]
     24          
     25            if(HSEStartUpStatus == SUCCESS)
   \   00000016   0128               CMP      R0,#+1
   \   00000018   24D1               BNE.N    ??RCC_Configuration_1
     26            {
     27              /* Enable Prefetch Buffer */
     28              FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
   \   0000001A   1020               MOVS     R0,#+16
   \   0000001C   ........           BL       FLASH_PrefetchBufferCmd
     29          
     30              /* Flash 2 wait state */
     31              FLASH_SetLatency(FLASH_Latency_2);
   \   00000020   0220               MOVS     R0,#+2
   \   00000022   ........           BL       FLASH_SetLatency
     32           
     33              /* HCLK = SYSCLK */
     34              RCC_HCLKConfig(RCC_SYSCLK_Div1); 
   \   00000026   0020               MOVS     R0,#+0
   \   00000028   ........           BL       RCC_HCLKConfig
     35            
     36              /* PCLK2 = HCLK */
     37              RCC_PCLK2Config(RCC_HCLK_Div1); 
   \   0000002C   0020               MOVS     R0,#+0
   \   0000002E   ........           BL       RCC_PCLK2Config
     38          
     39              /* PCLK1 = HCLK/2 */
     40              RCC_PCLK1Config(RCC_HCLK_Div2);
   \   00000032   4FF48060           MOV      R0,#+1024
   \   00000036   ........           BL       RCC_PCLK1Config
     41          
     42              /* PLLCLK = 8MHz * 9 = 72 MHz */
     43              RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
   \   0000003A   4FF4E011           MOV      R1,#+1835008
   \   0000003E   4FF48030           MOV      R0,#+65536
   \   00000042   ........           BL       RCC_PLLConfig
     44          
     45              /* Enable PLL */ 
     46              RCC_PLLCmd(ENABLE);
   \   00000046   0120               MOVS     R0,#+1
   \   00000048   ........           BL       RCC_PLLCmd
     47          
     48              /* Wait till PLL is ready */
     49              while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
   \                     ??RCC_Configuration_2:
   \   0000004C   3920               MOVS     R0,#+57
   \   0000004E   ........           BL       RCC_GetFlagStatus
   \   00000052   0028               CMP      R0,#+0
   \   00000054   FAD0               BEQ.N    ??RCC_Configuration_2
     50              {
     51              }
     52          
     53              /* Select PLL as system clock source */
     54              RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
   \   00000056   0220               MOVS     R0,#+2
   \   00000058   ........           BL       RCC_SYSCLKConfig
     55          
     56              /* Wait till PLL is used as system clock source */
     57              while(RCC_GetSYSCLKSource() != 0x08)
   \                     ??RCC_Configuration_3:
   \   0000005C   ........           BL       RCC_GetSYSCLKSource
   \   00000060   0828               CMP      R0,#+8
   \   00000062   FBD1               BNE.N    ??RCC_Configuration_3
     58              {
     59              }
     60            }
     61          
     62            /* Enable GPIO_LED clock */
     63            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIO_LED, ENABLE);
   \                     ??RCC_Configuration_1:
   \   00000064   0121               MOVS     R1,#+1
   \   00000066   8020               MOVS     R0,#+128
   \   00000068   ........           BL       RCC_APB2PeriphClockCmd
     64            
     65            
     66            
     67            
     68            
     69            /* Enable peripheral clocks --------------------------------------------------*/
     70            /* DMA1 clock enable */
     71            RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
   \   0000006C   0121               MOVS     R1,#+1
   \   0000006E   0120               MOVS     R0,#+1
   \   00000070   ........           BL       RCC_AHBPeriphClockCmd
     72          
     73          
     74            /* GPIOA, GPIOB and SPI1 clock enable */
     75            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |
     76                                   RCC_APB2Periph_SPI1, ENABLE);
   \   00000074   0121               MOVS     R1,#+1
   \   00000076   41F20C00           MOVW     R0,#+4108
   \   0000007A   ........           BL       RCC_APB2PeriphClockCmd
     77          
     78            /* SPI2 Periph clock enable */
     79            RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);    
   \   0000007E   0121               MOVS     R1,#+1
   \   00000080   4FF48040           MOV      R0,#+16384
   \   00000084   ........           BL       RCC_APB1PeriphClockCmd
     80            
     81             /* TIM2 clock enable */
     82            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); 
   \   00000088   0121               MOVS     R1,#+1
   \   0000008A   0846               MOV      R0,R1
   \   0000008C   ........           BL       RCC_APB1PeriphClockCmd
     83            
     84             /* TIM3 clock enable */
     85            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); 
   \   00000090   0121               MOVS     R1,#+1
   \   00000092   0220               MOVS     R0,#+2
   \   00000094   ........           BL       RCC_APB1PeriphClockCmd
     86          
     87             /* TIM4 clock enable */
     88            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
   \   00000098   0121               MOVS     R1,#+1
   \   0000009A   0420               MOVS     R0,#+4
   \   0000009C   ........           BL       RCC_APB1PeriphClockCmd
     89            
     90               /* TIM5 clock enable */
     91            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
   \   000000A0   0121               MOVS     R1,#+1
   \   000000A2   0820               MOVS     R0,#+8
   \   000000A4   ........           BL       RCC_APB1PeriphClockCmd
     92            
     93              /* Enable USART2 clocks */
     94            RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);  
   \   000000A8   0121               MOVS     R1,#+1
   \   000000AA   4FF40030           MOV      R0,#+131072
   \   000000AE   BDE81040           POP      {R4,LR}
   \   000000B2   ........           B.W      RCC_APB1PeriphClockCmd
   \   000000B6   00BF               Nop      
   \                     ??RCC_Configuration_0:
   \   000000B8   ........           DC32     HSEStartUpStatus
     95          }

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     RCC_Configuration      0


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     RCC_Configuration  188

 
 188 bytes in section .text
 
 188 bytes of CODE memory

Errors: none
Warnings: none
