###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.20.0.50892/W32 for ARM     05/May/2009  18:28:02 #
# Copyright 1999-2008 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wesley\AS210R_ST\upgrade.cpp                          #
#    Command line =  D:\wesley\AS210R_ST\upgrade.cpp -D VECT_TAB_FLASH -lC    #
#                    D:\wesley\AS210R_ST\STM3210E-EVAL\List\ -o               #
#                    D:\wesley\AS210R_ST\STM3210E-EVAL\Obj\ --no_cse          #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --char_is_signed                      #
#                    --require_prototypes --fpu=None --dlib_config            #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.0\ARM\INC\DLib_Config_Full.h" -I D:\wesley\AS210R_ST\  #
#                    -I D:\wesley\AS210R_ST\library\inc\ -I "C:\Program       #
#                    Files\IAR Systems\Embedded Workbench 5.0\ARM\INC\"       #
#                    --section .text=UpgradeROM -On                           #
#    List file    =  D:\wesley\AS210R_ST\STM3210E-EVAL\List\upgrade.lst       #
#    Object file  =  D:\wesley\AS210R_ST\STM3210E-EVAL\Obj\upgrade.o          #
#                                                                             #
#                                                                             #
###############################################################################

D:\wesley\AS210R_ST\upgrade.cpp
      1          #include "BCorHardWare.h"
      2          #include <string.h>

   \                                 In section UpgradeROM, align 4
   \   __??Code16?? __intrinsic __code __interwork void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   3200               MOVS     R2,R6
   \   0000000A   2900               MOVS     R1,R5
   \   0000000C   2000               MOVS     R0,R4
   \   0000000E   ........           BL       __aeabi_memcpy
   \   00000012   2000               MOVS     R0,R4
   \   00000014   70BD               POP      {R4-R6,PC}       ;; return

   \                                 In section UpgradeROM, align 4
   \   __??Code16?? __intrinsic __code __interwork void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   2A00               MOVS     R2,R5
   \   0000000A   3100               MOVS     R1,R6
   \   0000000C   2000               MOVS     R0,R4
   \   0000000E   ........           BL       __aeabi_memset
   \   00000012   2000               MOVS     R0,R4
   \   00000014   70BD               POP      {R4-R6,PC}       ;; return
      3          #include <stdio.h>
      4          #include "typedef.h"
      5          
      6          
      7          #include "ioReFlex.h"
      8          #include "UpgradeMain1.h"
      9          #include "Upgrade.h"
     10          #include "LED_Effect.h"
     11          #include "music.h"
     12          
     13          
     14          //********************* 定義RTC結構 *******************************
     15          struct RTCState{
     16            int Err;
     17            int Value;
     18          };
     19          //***************************************************************** 
     20          
     21          extern void SelfTest(void);
     22          extern void UART_pro(void);
     23          
     24          #ifdef _HardWare
     25          
     26          #define RomConst _Pragma("location=\"UpgradeData\"") 
     27          #pragma section="UpgradeData"
     28          
     29          //#define RomConst
     30          
     31          // 資料宣告
     32          extern	unsigned char LED79PAT[];	       
     33          // UART
     34          
     35          extern	u8	gUartRecTmp;
     36          extern	u8	flg_ESC;
     37          extern	u8	RevFlag;
     38          extern	u16	UartChkSum ;
     39          extern	u8 Upgrade_flag;
     40          extern  u8  Apha_flag;
     41          // Music
     42          extern 	u8 BUZPIN;
     43          extern	u32 *POINT;
     44          extern	u32 Music_PTR;
     45          extern	int Music_Busy;        
     46          
     47          // Flash ROM
     48          
     49          //extern void UG(void);
     50          extern unsigned long  Decompression(unsigned char *Source,unsigned char *Dest,unsigned long SourceSize);
     51          extern void GetStringLED79PATFont(char* StringBuf,u8* Buf);
     52          extern void HardWare_Init(void);
     53          extern struct RTCState Data;  	
     54          extern unsigned int ms_timer_counter;
     55          extern void Relay(int color);
     56          extern int clRed ;
     57          extern int clBlack;
     58          
     59          #else // BC6
     60          #include <vcl.h>
     61          #define RomConst  
     62          extern void Relay(int color);
     63          #endif
     64          
     65          void self_test_entry(void) ;
     66          void UART_pro_entry(void) ;
     67          void time_entry(void) ;
     68          // E-Block 除上三程序宣告其餘只能放於此之後
     69          
     70          extern void SelfTest(void);
     71          extern void UART_pro();
     72          void SelfTestNew(void);
     73          void UART_proNew(void);
     74          
     75          
     76          
     77          
     78          extern void SelfTest(void);
     79          
     80          #if LEDType == 50  
     81            #if LED_byte_Length < 20      
     82          RomConst const char VerStr1[]			="Soft  V8.4"; 
     83            #else
     84          RomConst const char VerStr1[]			="  Software Ver 8.4  ";   
     85            #endif 
     86          #endif 
     87          #if LEDType == 51  
     88            #if LED_byte_Length < 20      
     89          RomConst const char VerStr1[]			="Soft V8.4R"; 
     90            #else
     91          RomConst const char VerStr1[]			=" Software Ver 8.4R  ";   
     92            #endif 
     93          #endif     
     94          #if LEDType == 70 
     95            #if LED_byte_Length < 20      
     96          RomConst const char VerStr1[]			="Soft  V8.4"; 
     97            #else
     98          RomConst const char VerStr1[]			="  Software Ver 8.4  ";   
     99            #endif 
    100          #endif     
    101          #if LEDType == 71  
    102            #if LED_byte_Length < 20      

   \                                 In section UpgradeData, align 4
    103          RomConst const char VerStr1[]			="Soft V8.4R"; 
   \                     VerStr1:
   \   00000000   536F66742056       DC8 "Soft V8.4R"
   \              382E345200  
   \   0000000B   00                 DC8 0
    104            #else
    105          RomConst const char VerStr1[]			=" Software Ver 8.4R  ";   
    106            #endif 
    107          #endif
    108          
    109          
    110          
    111          
    112          
    113          

   \                                 In section UpgradeROM, align 4, keep-with-next
    114          void self_test_entry(void) 
    115          {  
   \                     self_test_entry:
   \   00000000   80B5               PUSH     {R7,LR}
    116            SelfTestNew(); 
   \   00000002   ........           BL       SelfTestNew
    117          //   SelfTest();
    118          }
   \   00000006   01BD               POP      {R0,PC}          ;; return
    119          

   \                                 In section UpgradeROM, align 4, keep-with-next
    120          void UART_pro_entry(void) 
    121          {
   \                     UART_pro_entry:
   \   00000000   80B5               PUSH     {R7,LR}
    122          	UART_proNew();
   \   00000002   ........           BL       UART_proNew
    123          }
   \   00000006   01BD               POP      {R0,PC}          ;; return
    124          

   \                                 In section UpgradeROM, align 4, keep-with-next
    125          void time_entry(void) 
    126          {
    127          	return;	
   \                     time_entry:
   \   00000000   7047               BX       LR               ;; return
    128          }
    129          

   \                                 In section UpgradeROM, align 4, keep-with-next
    130          void SelfTestNew(void)
    131          {     
   \                     SelfTestNew:
   \   00000000   2DE9F04F           PUSH     {R4-R11,LR}
   \   00000004   8DB0               SUB      SP,SP,#+52
    132          
    133             unsigned int i,ReceivingCnt=0;
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   0190               STR      R0,[SP, #+4]
    134             int buflen;
    135             unsigned long ccSum;
    136             int j,MixFlag,kk;
    137             long TtlBytes,DecprTtlBytes; 
    138             unsigned char *RevPT;   
    139             unsigned char temp,tmp_revcnt ;
    140             unsigned char value[5];
    141             unsigned long hms,stm;
    142             int FlhBlkLen; 
    143             int NodIndex,DelIndex;
    144             int offset;
    145             int tmoffset;
    146             unsigned char old_color_flag;
    147          
    148          #ifdef  _HardWare   
    149          
    150          
    151              Relay(clBlack);    
   \   0000000A   DFF8D00D           LDR.W    R0,??SelfTestNew_0  ;; clBlack
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   ........           BL       Relay
    152          //Relay_Out;
    153          //Relay_Lo;
    154          
    155          
    156          RTC_flag = RTC_Initial();
   \   00000014   ........           BL       RTC_Initial
   \   00000018   DFF8C41D           LDR.W    R1,??SelfTestNew_0+0x4  ;; RTC_flag
   \   0000001C   0870               STRB     R0,[R1, #+0]
    157          #else  //bc 
    158              Relay(clBlack);     
    159             //P9.5=0;
    160             //LED_Initial() ;
    161          
    162             
    163             RTC_flag = 1; //RTC_Initial();
    164           SYS_sec=15;
    165           
    166             beep_vibrate( 4 ) ;
    167          #endif      	
    168             RecProcessing=0;
   \   0000001E   DFF8C40D           LDR.W    R0,??SelfTestNew_0+0x8  ;; RecProcessing
   \   00000022   0021               MOVS     R1,#+0
   \   00000024   0170               STRB     R1,[R0, #+0]
    169             FlashWriFlg=0;
   \   00000026   DFF8C00D           LDR.W    R0,??SelfTestNew_0+0xC  ;; FlashWriFlg
   \   0000002A   0021               MOVS     R1,#+0
   \   0000002C   0170               STRB     R1,[R0, #+0]
    170             old_color_flag = color_flag;
   \   0000002E   DFF8BC0D           LDR.W    R0,??SelfTestNew_0+0x10  ;; color_flag
   \   00000032   0078               LDRB     R0,[R0, #+0]
   \   00000034   8DF80100           STRB     R0,[SP, #+1]
    171             color_flag = 1;
   \   00000038   DFF8B00D           LDR.W    R0,??SelfTestNew_0+0x10  ;; color_flag
   \   0000003C   0121               MOVS     R1,#+1
   \   0000003E   0170               STRB     R1,[R0, #+0]
    172             String_disp((char *)VerStr1);// version
   \   00000040   DFF8AC0D           LDR.W    R0,??SelfTestNew_0+0x14  ;; VerStr1
   \   00000044   ........           BL       String_disp
    173             color_flag = 2;
   \   00000048   DFF8A00D           LDR.W    R0,??SelfTestNew_0+0x10  ;; color_flag
   \   0000004C   0221               MOVS     R1,#+2
   \   0000004E   0170               STRB     R1,[R0, #+0]
    174             Status_disp(0x21) ; // version and length dsiaply
   \   00000050   2120               MOVS     R0,#+33
   \   00000052   ........           BL       Status_disp
    175             color_flag = 3;
   \   00000056   DFF8940D           LDR.W    R0,??SelfTestNew_0+0x10  ;; color_flag
   \   0000005A   0321               MOVS     R1,#+3
   \   0000005C   0170               STRB     R1,[R0, #+0]
    176             Status_disp(0x30 + RTC_flag) ; // RTC Condition
   \   0000005E   DFF8800D           LDR.W    R0,??SelfTestNew_0+0x4  ;; RTC_flag
   \   00000062   0078               LDRB     R0,[R0, #+0]
   \   00000064   3030               ADDS     R0,R0,#+48
   \   00000066   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   ........           BL       Status_disp
    177             Status_disp(0x29) ; // Clear Display
   \   0000006C   2920               MOVS     R0,#+41
   \   0000006E   ........           BL       Status_disp
    178          #ifdef  _HardWare     
    179            for(j=0;j < 10;j++)
   \   00000072   0020               MOVS     R0,#+0
   \   00000074   0600               MOVS     R6,R0
   \                     ??SelfTestNew_1:
   \   00000076   0A2E               CMP      R6,#+10
   \   00000078   0BDA               BGE.N    ??SelfTestNew_2
    180               if ( Mark[j] != FlashMark[j] )
   \   0000007A   DFF8780D           LDR.W    R0,??SelfTestNew_0+0x18  ;; `?<Constant "\\001\\001\\002\\003\\004\\005\\006\\a\\b\\t`
   \   0000007E   3056               LDRSB    R0,[R6, R0]
   \   00000080   DFF8741D           LDR.W    R1,??SelfTestNew_0+0x1C  ;; FlashMark
   \   00000084   715C               LDRB     R1,[R6, R1]
   \   00000086   00B2               SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000088   09B2               SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000008A   8842               CMP      R0,R1
   \   0000008C   01D1               BNE.N    ??SelfTestNew_2
   \   0000008E   761C               ADDS     R6,R6,#+1
   \   00000090   F1E7               B.N      ??SelfTestNew_1
    181                 break;
    182             //---------------------- SRAM check and FLash initial if flash is not initial -----------------
    183             if ( j < 10 ){
   \                     ??SelfTestNew_2:
   \   00000092   0A2E               CMP      R6,#+10
   \   00000094   80F2A480           BGE.W    ??SelfTestNew_3
    184             	 //SRAM_test_disp();
    185               Status_disp(0x07) ;
   \   00000098   0720               MOVS     R0,#+7
   \   0000009A   ........           BL       Status_disp
    186               if( RAM_test() == -1 )
   \   0000009E   ........           BL       RAM_test
   \   000000A2   5FF0FF31           MOVS     R1,#-1
   \   000000A6   8842               CMP      R0,R1
   \   000000A8   02D1               BNE.N    ??SelfTestNew_4
    187               //SRAM_chk_error();
    188               	 Status_disp(0x09) ;
   \   000000AA   0920               MOVS     R0,#+9
   \   000000AC   ........           BL       Status_disp
    189               dly_ms(2000);	 
   \                     ??SelfTestNew_4:
   \   000000B0   4FF4FA60           MOV      R0,#+2000
   \   000000B4   ........           BL       dly_ms
    190          #else   	 
    191             Status_disp(0x07) ;
    192          #endif   
    193             memset(LED_buffer.COM,'\0',sizeof(LED_buffer.COM));
   \   000000B8   A022               MOVS     R2,#+160
   \   000000BA   0021               MOVS     R1,#+0
   \   000000BC   DFF8E00D           LDR.W    R0,??SelfTestNew_5  ;; LED_buffer
   \   000000C0   ........           BL       memset
    194             memset(LED_bufferG.COM,'\0',sizeof(LED_bufferG.COM));   
   \   000000C4   A022               MOVS     R2,#+160
   \   000000C6   0021               MOVS     R1,#+0
   \   000000C8   DFF8D80D           LDR.W    R0,??SelfTestNew_5+0x4  ;; LED_bufferG
   \   000000CC   ........           BL       memset
    195             LED_change = 1 ;
   \   000000D0   DFF8D40D           LDR.W    R0,??SelfTestNew_5+0x8  ;; LED_change
   \   000000D4   0121               MOVS     R1,#+1
   \   000000D6   0170               STRB     R1,[R0, #+0]
    196             while( LED_change == 1 );
   \                     ??SelfTestNew_6:
   \   000000D8   DFF8CC0D           LDR.W    R0,??SelfTestNew_5+0x8  ;; LED_change
   \   000000DC   0078               LDRB     R0,[R0, #+0]
   \   000000DE   0128               CMP      R0,#+1
   \   000000E0   FAD0               BEQ.N    ??SelfTestNew_6
    197             init_show();
   \   000000E2   ........           BL       init_show
    198             #if LEDType >= 70
    199             type_flag='2';
   \   000000E6   DFF8C40D           LDR.W    R0,??SelfTestNew_5+0xC  ;; type_flag
   \   000000EA   3221               MOVS     R1,#+50
   \   000000EC   0170               STRB     R1,[R0, #+0]
    200             amm_flag=4;
   \   000000EE   DFF8C00D           LDR.W    R0,??SelfTestNew_5+0x10  ;; amm_flag
   \   000000F2   0421               MOVS     R1,#+4
   \   000000F4   0170               STRB     R1,[R0, #+0]
    201             dmm_flag=11;
   \   000000F6   DFF8BC0D           LDR.W    R0,??SelfTestNew_5+0x14  ;; dmm_flag
   \   000000FA   0B21               MOVS     R1,#+11
   \   000000FC   0170               STRB     R1,[R0, #+0]
    202             #else
    203             type_flag='1';
    204             amm_flag=0;
    205             dmm_flag=1;
    206             #endif     
    207             chg_flag=0;
   \   000000FE   DFF8B80D           LDR.W    R0,??SelfTestNew_5+0x18  ;; chg_flag
   \   00000102   0021               MOVS     R1,#+0
   \   00000104   0170               STRB     R1,[R0, #+0]
    208             mgn_flag=0;
   \   00000106   DFF8B40D           LDR.W    R0,??SelfTestNew_5+0x1C  ;; mgn_flag
   \   0000010A   0021               MOVS     R1,#+0
   \   0000010C   0170               STRB     R1,[R0, #+0]
    209             te_flag=0;
   \   0000010E   DFF8B00D           LDR.W    R0,??SelfTestNew_5+0x20  ;; te_flag
   \   00000112   0021               MOVS     R1,#+0
   \   00000114   0170               STRB     R1,[R0, #+0]
    210             pri_flag = 0;
   \   00000116   DFF8AC0D           LDR.W    R0,??SelfTestNew_5+0x24  ;; pri_flag
   \   0000011A   0021               MOVS     R1,#+0
   \   0000011C   0170               STRB     R1,[R0, #+0]
    211             primsg_flag=0;
   \   0000011E   DFF8A80D           LDR.W    R0,??SelfTestNew_5+0x28  ;; primsg_flag
   \   00000122   0021               MOVS     R1,#+0
   \   00000124   0170               STRB     R1,[R0, #+0]
    212             rlytm_flag=0;
   \   00000126   DFF8A40D           LDR.W    R0,??SelfTestNew_5+0x2C  ;; rlytm_flag
   \   0000012A   0021               MOVS     R1,#+0
   \   0000012C   0170               STRB     R1,[R0, #+0]
    213             rly_counter=0;
   \   0000012E   DFF8A00D           LDR.W    R0,??SelfTestNew_5+0x30  ;; rly_counter
   \   00000132   0021               MOVS     R1,#+0
   \   00000134   0170               STRB     R1,[R0, #+0]
    214             pri_bits = 0;
   \   00000136   DFF89C0D           LDR.W    R0,??SelfTestNew_5+0x34  ;; pri_bits
   \   0000013A   0021               MOVS     R1,#+0
   \   0000013C   0160               STR      R1,[R0, #+0]
    215             mail_bits = 0;
   \   0000013E   DFF8980D           LDR.W    R0,??SelfTestNew_5+0x38  ;; mail_bits
   \   00000142   0021               MOVS     R1,#+0
   \   00000144   0160               STR      R1,[R0, #+0]
    216             mdf_flag = 0;
   \   00000146   DFF8940D           LDR.W    R0,??SelfTestNew_5+0x3C  ;; mdf_flag
   \   0000014A   0021               MOVS     R1,#+0
   \   0000014C   0170               STRB     R1,[R0, #+0]
    217             priclr_flag = 0;
   \   0000014E   DFF8900D           LDR.W    R0,??SelfTestNew_5+0x40  ;; priclr_flag
   \   00000152   0021               MOVS     R1,#+0
   \   00000154   0170               STRB     R1,[R0, #+0]
    218             autoct_flag = 24;
   \   00000156   DFF88C0D           LDR.W    R0,??SelfTestNew_5+0x44  ;; autoct_flag
   \   0000015A   1821               MOVS     R1,#+24
   \   0000015C   0170               STRB     R1,[R0, #+0]
    219             pact_flag = 0;
   \   0000015E   DFF8880D           LDR.W    R0,??SelfTestNew_5+0x48  ;; pact_flag
   \   00000162   0021               MOVS     R1,#+0
   \   00000164   0170               STRB     R1,[R0, #+0]
    220             pgc_flag = 0;
   \   00000166   DFF8840D           LDR.W    R0,??SelfTestNew_5+0x4C  ;; pgc_flag
   \   0000016A   0021               MOVS     R1,#+0
   \   0000016C   0170               STRB     R1,[R0, #+0]
    221             pricnt_flag = 1;
   \   0000016E   DFF8800D           LDR.W    R0,??SelfTestNew_5+0x50  ;; pricnt_flag
   \   00000172   0121               MOVS     R1,#+1
   \   00000174   0170               STRB     R1,[R0, #+0]
    222             mgc_flag=25;
   \   00000176   DFF87C0D           LDR.W    R0,??SelfTestNew_5+0x54  ;; mgc_flag
   \   0000017A   1921               MOVS     R1,#+25
   \   0000017C   0170               STRB     R1,[R0, #+0]
    223             mau_flag = 0;
   \   0000017E   DFF8780D           LDR.W    R0,??SelfTestNew_5+0x58  ;; mau_flag
   \   00000182   0021               MOVS     R1,#+0
   \   00000184   0170               STRB     R1,[R0, #+0]
    224             Line2_Dly = 2;
   \   00000186   DFF8740D           LDR.W    R0,??SelfTestNew_5+0x5C  ;; Line2_Dly
   \   0000018A   0221               MOVS     R1,#+2
   \   0000018C   0160               STR      R1,[R0, #+0]
    225             color_flag = 1;
   \   0000018E   DFF85C0C           LDR.W    R0,??SelfTestNew_0+0x10  ;; color_flag
   \   00000192   0121               MOVS     R1,#+1
   \   00000194   0170               STRB     R1,[R0, #+0]
    226             old_color_flag = 1;
   \   00000196   0120               MOVS     R0,#+1
   \   00000198   8DF80100           STRB     R0,[SP, #+1]
    227             pcolor_flag = 0;
   \   0000019C   DFF8600D           LDR.W    R0,??SelfTestNew_5+0x60  ;; pcolor_flag
   \   000001A0   0021               MOVS     R1,#+0
   \   000001A2   0170               STRB     R1,[R0, #+0]
    228             msgcl_flag = 0;
   \   000001A4   DFF85C0D           LDR.W    R0,??SelfTestNew_5+0x64  ;; msgcl_flag
   \   000001A8   0021               MOVS     R1,#+0
   \   000001AA   0170               STRB     R1,[R0, #+0]
    229             for(j=0;j<24;j++){
   \   000001AC   0020               MOVS     R0,#+0
   \   000001AE   0600               MOVS     R6,R0
   \                     ??SelfTestNew_7:
   \   000001B0   182E               CMP      R6,#+24
   \   000001B2   09DA               BGE.N    ??SelfTestNew_8
    230               capcl_flag[j]=0;   
   \   000001B4   DFF8500D           LDR.W    R0,??SelfTestNew_5+0x68  ;; capcl_flag
   \   000001B8   0021               MOVS     R1,#+0
   \   000001BA   3154               STRB     R1,[R6, R0]
    231               autocl[j]=0;
   \   000001BC   DFF84C0D           LDR.W    R0,??SelfTestNew_5+0x6C  ;; autocl
   \   000001C0   0021               MOVS     R1,#+0
   \   000001C2   3154               STRB     R1,[R6, R0]
    232             }  
   \   000001C4   761C               ADDS     R6,R6,#+1
   \   000001C6   F3E7               B.N      ??SelfTestNew_7
    233             for(j=0;j < 10;j++)
   \                     ??SelfTestNew_8:
   \   000001C8   0020               MOVS     R0,#+0
   \   000001CA   0600               MOVS     R6,R0
   \                     ??SelfTestNew_9:
   \   000001CC   0A2E               CMP      R6,#+10
   \   000001CE   07DA               BGE.N    ??SelfTestNew_3
    234               FlashMark[j]=Mark[j];
   \   000001D0   DFF8240C           LDR.W    R0,??SelfTestNew_0+0x1C  ;; FlashMark
   \   000001D4   DFF81C1C           LDR.W    R1,??SelfTestNew_0+0x18  ;; `?<Constant "\\001\\001\\002\\003\\004\\005\\006\\a\\b\\t`
   \   000001D8   715C               LDRB     R1,[R6, R1]
   \   000001DA   3154               STRB     R1,[R6, R0]
   \   000001DC   761C               ADDS     R6,R6,#+1
   \   000001DE   F5E7               B.N      ??SelfTestNew_9
    235          #ifdef  _HardWare  
    236            }
    237          //  ms_timer_counter=0;
    238          #endif  
    239             te_flag =0;
   \                     ??SelfTestNew_3:
   \   000001E0   DFF8DC0C           LDR.W    R0,??SelfTestNew_5+0x20  ;; te_flag
   \   000001E4   0021               MOVS     R1,#+0
   \   000001E6   0170               STRB     R1,[R0, #+0]
    240             ask_flag=0; 
   \   000001E8   DFF8240D           LDR.W    R0,??SelfTestNew_5+0x70  ;; ask_flag
   \   000001EC   0021               MOVS     R1,#+0
   \   000001EE   0170               STRB     R1,[R0, #+0]
    241             ask_value=0;  
   \   000001F0   DFF8200D           LDR.W    R0,??SelfTestNew_5+0x74  ;; ask_value
   \   000001F4   0021               MOVS     R1,#+0
   \   000001F6   0170               STRB     R1,[R0, #+0]
    242             LRCM_flag=0;
   \   000001F8   DFF81C0D           LDR.W    R0,??SelfTestNew_5+0x78  ;; LRCM_flag
   \   000001FC   0021               MOVS     R1,#+0
   \   000001FE   0170               STRB     R1,[R0, #+0]
    243             if ( LED_byte_Length == 10 ){
    244               LED2_char_Length = 13;
   \   00000200   DFF8180D           LDR.W    R0,??SelfTestNew_5+0x7C  ;; LED2_char_Length
   \   00000204   0D21               MOVS     R1,#+13
   \   00000206   0170               STRB     R1,[R0, #+0]
    245               if ( tmhr_flag == 1 )
   \   00000208   DFF8140D           LDR.W    R0,??SelfTestNew_5+0x80  ;; tmhr_flag
   \   0000020C   0078               LDRB     R0,[R0, #+0]
   \   0000020E   0128               CMP      R0,#+1
   \   00000210   04D1               BNE.N    ??SelfTestNew_10
    246                 tm_strt = 1;
   \   00000212   DFF8100D           LDR.W    R0,??SelfTestNew_5+0x84  ;; tm_strt
   \   00000216   0121               MOVS     R1,#+1
   \   00000218   0170               STRB     R1,[R0, #+0]
   \   0000021A   03E0               B.N      ??SelfTestNew_11
    247               else
    248                 tm_strt = 7;
   \                     ??SelfTestNew_10:
   \   0000021C   DFF8040D           LDR.W    R0,??SelfTestNew_5+0x84  ;; tm_strt
   \   00000220   0721               MOVS     R1,#+7
   \   00000222   0170               STRB     R1,[R0, #+0]
    249             }else{
    250               LED2_char_Length = 26;
    251               if ( tmhr_flag == 1 )
    252                 tm_strt = 32;
    253               else
    254                 tm_strt = 38;
    255             }
    256             //----- Loop display Start -------
    257             color_flag = old_color_flag;
   \                     ??SelfTestNew_11:
   \   00000224   DFF8C40B           LDR.W    R0,??SelfTestNew_0+0x10  ;; color_flag
   \   00000228   9DF80110           LDRB     R1,[SP, #+1]
   \   0000022C   0170               STRB     R1,[R0, #+0]
    258             for(;;){    
    259              if (TxtMode != OldMode){
   \                     ??SelfTestNew_12:
   \   0000022E   DFF8F80C           LDR.W    R0,??SelfTestNew_5+0x88  ;; TxtMode
   \   00000232   0078               LDRB     R0,[R0, #+0]
   \   00000234   A528               CMP      R0,#+165
   \   00000236   00F01E82           BEQ.W    ??SelfTestNew_13
    260                //for(kk=0,ChkLen=0;kk<34;kk++)
    261                //  ChkLen  = ( ChkLen + TxtPage[kk].len ) & 0xFFFF ;
    262                //if (SramChkLen != ChkLen ){
    263                //  init_sram();
    264                //  continue;
    265                //}
    266                if ( RevTxtLen > 2300) RevTxtLen=10;
   \   0000023A   DFF8F00C           LDR.W    R0,??SelfTestNew_5+0x8C  ;; RevTxtLen
   \   0000023E   0088               LDRH     R0,[R0, #+0]
   \   00000240   40F6FD01           MOVW     R1,#+2301
   \   00000244   8842               CMP      R0,R1
   \   00000246   03D3               BCC.N    ??SelfTestNew_14
   \   00000248   DFF8E00C           LDR.W    R0,??SelfTestNew_5+0x8C  ;; RevTxtLen
   \   0000024C   0A21               MOVS     R1,#+10
   \   0000024E   0180               STRH     R1,[R0, #+0]
    267                if ( te_flag == 1 ){
   \                     ??SelfTestNew_14:
   \   00000250   DFF86C0C           LDR.W    R0,??SelfTestNew_5+0x20  ;; te_flag
   \   00000254   0078               LDRB     R0,[R0, #+0]
   \   00000256   0128               CMP      R0,#+1
   \   00000258   02D1               BNE.N    ??SelfTestNew_15
    268                	test_mode();
   \   0000025A   ........           BL       test_mode
    269                	continue;
   \   0000025E   E6E7               B.N      ??SelfTestNew_12
    270                }
    271                if ( ask_flag == 1 ){
   \                     ??SelfTestNew_15:
   \   00000260   DFF8AC0C           LDR.W    R0,??SelfTestNew_5+0x70  ;; ask_flag
   \   00000264   0078               LDRB     R0,[R0, #+0]
   \   00000266   0128               CMP      R0,#+1
   \   00000268   06D1               BNE.N    ??SelfTestNew_16
    272                  RecProcessing = 0;
   \   0000026A   DFF8780B           LDR.W    R0,??SelfTestNew_0+0x8  ;; RecProcessing
   \   0000026E   0021               MOVS     R1,#+0
   \   00000270   0170               STRB     R1,[R0, #+0]
    273                  ask_mode();
   \   00000272   ........           BL       ask_mode
    274                  continue;
   \   00000276   DAE7               B.N      ??SelfTestNew_12
    275                } 
    276                if (LRCM_flag == 1 ){
   \                     ??SelfTestNew_16:
   \   00000278   DFF89C0C           LDR.W    R0,??SelfTestNew_5+0x78  ;; LRCM_flag
   \   0000027C   0078               LDRB     R0,[R0, #+0]
   \   0000027E   0128               CMP      R0,#+1
   \   00000280   06D1               BNE.N    ??SelfTestNew_17
    277                  RecProcessing = 0;
   \   00000282   DFF8600B           LDR.W    R0,??SelfTestNew_0+0x8  ;; RecProcessing
   \   00000286   0021               MOVS     R1,#+0
   \   00000288   0170               STRB     R1,[R0, #+0]
    278                  LRCM_mode();
   \   0000028A   ........           BL       LRCM_mode
    279                  continue; 
   \   0000028E   CEE7               B.N      ??SelfTestNew_12
    280                }       	
    281                if ( TopIndex == -1 || get_bit(mail_bits,TopIndex) == 1)  mau_flag = 0;
   \                     ??SelfTestNew_17:
   \   00000290   DFF89C0C           LDR.W    R0,??SelfTestNew_5+0x90  ;; TopIndex
   \   00000294   0068               LDR      R0,[R0, #+0]
   \   00000296   5FF0FF31           MOVS     R1,#-1
   \   0000029A   8842               CMP      R0,R1
   \   0000029C   09D0               BEQ.N    ??SelfTestNew_18
   \   0000029E   DFF8900C           LDR.W    R0,??SelfTestNew_5+0x90  ;; TopIndex
   \   000002A2   0168               LDR      R1,[R0, #+0]
   \   000002A4   DFF8300C           LDR.W    R0,??SelfTestNew_5+0x38  ;; mail_bits
   \   000002A8   0068               LDR      R0,[R0, #+0]
   \   000002AA   ........           BL       get_bit
   \   000002AE   0128               CMP      R0,#+1
   \   000002B0   03D1               BNE.N    ??SelfTestNew_19
   \                     ??SelfTestNew_18:
   \   000002B2   DFF8440C           LDR.W    R0,??SelfTestNew_5+0x58  ;; mau_flag
   \   000002B6   0021               MOVS     R1,#+0
   \   000002B8   0170               STRB     R1,[R0, #+0]
    282                if ( PTopIndex == -1 )  pmau_flag = 0;    	
   \                     ??SelfTestNew_19:
   \   000002BA   DFF8780C           LDR.W    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   000002BE   0068               LDR      R0,[R0, #+0]
   \   000002C0   5FF0FF31           MOVS     R1,#-1
   \   000002C4   8842               CMP      R0,R1
   \   000002C6   03D1               BNE.N    ??SelfTestNew_20
   \   000002C8   DFF86C0C           LDR.W    R0,??SelfTestNew_5+0x98  ;; pmau_flag
   \   000002CC   0021               MOVS     R1,#+0
   \   000002CE   0170               STRB     R1,[R0, #+0]
    283                if ( TopIndex == -1 && PTopIndex == -1){
   \                     ??SelfTestNew_20:
   \   000002D0   DFF85C0C           LDR.W    R0,??SelfTestNew_5+0x90  ;; TopIndex
   \   000002D4   0068               LDR      R0,[R0, #+0]
   \   000002D6   5FF0FF31           MOVS     R1,#-1
   \   000002DA   8842               CMP      R0,R1
   \   000002DC   13D1               BNE.N    ??SelfTestNew_21
   \   000002DE   DFF8540C           LDR.W    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   000002E2   0068               LDR      R0,[R0, #+0]
   \   000002E4   5FF0FF31           MOVS     R1,#-1
   \   000002E8   8842               CMP      R0,R1
   \   000002EA   0CD1               BNE.N    ??SelfTestNew_21
    284                  strcpy(( char *)RevTxtBuff,DftMsg);      //wesley  
   \   000002EC   DFF84C1C           LDR.W    R1,??SelfTestNew_5+0x9C  ;; DftMsg
   \   000002F0   DFF84C0C           LDR.W    R0,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   000002F4   ........           BL       strcpy
    285                  RevTxtLen=strlen((char *)RevTxtBuff); //
   \   000002F8   DFF8440C           LDR.W    R0,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   000002FC   ........           BL       strlen
   \   00000300   DFF8281C           LDR.W    R1,??SelfTestNew_5+0x8C  ;; RevTxtLen
   \   00000304   0880               STRH     R0,[R1, #+0]
    286                }
    287                if ( CurIndex != -1 ){ //has message or Priority Message
   \                     ??SelfTestNew_21:
   \   00000306   DFF83C0C           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   0000030A   0068               LDR      R0,[R0, #+0]
   \   0000030C   5FF0FF31           MOVS     R1,#-1
   \   00000310   8842               CMP      R0,R1
   \   00000312   00F02781           BEQ.W    ??SelfTestNew_22
    288                  if ( ++TxtPage[CurIndex].count > 10000) TxtPage[CurIndex].count=10000;     	
   \   00000316   DFF82C0C           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   0000031A   0068               LDR      R0,[R0, #+0]
   \   0000031C   40F6BC71           MOVW     R1,#+4028
   \   00000320   DFF8242C           LDR.W    R2,??SelfTestNew_5+0xA8  ;; TxtPage
   \   00000324   00FB0120           MLA      R0,R0,R1,R2
   \   00000328   D0F8B80F           LDR      R0,[R0, #+4024]
   \   0000032C   401C               ADDS     R0,R0,#+1
   \   0000032E   DFF8141C           LDR.W    R1,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000332   0968               LDR      R1,[R1, #+0]
   \   00000334   40F6BC72           MOVW     R2,#+4028
   \   00000338   DFF80C3C           LDR.W    R3,??SelfTestNew_5+0xA8  ;; TxtPage
   \   0000033C   01FB0231           MLA      R1,R1,R2,R3
   \   00000340   C1F8B80F           STR      R0,[R1, #+4024]
   \   00000344   42F21171           MOVW     R1,#+10001
   \   00000348   8842               CMP      R0,R1
   \   0000034A   0CD3               BCC.N    ??SelfTestNew_23
   \   0000034C   DFF8F40B           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000350   0068               LDR      R0,[R0, #+0]
   \   00000352   40F6BC71           MOVW     R1,#+4028
   \   00000356   DFF8F02B           LDR.W    R2,??SelfTestNew_5+0xA8  ;; TxtPage
   \   0000035A   00FB0120           MLA      R0,R0,R1,R2
   \   0000035E   42F21071           MOVW     R1,#+10000
   \   00000362   C0F8B81F           STR      R1,[R0, #+4024]
    289                  if ( act_flag != 0 || pact_flag !=0 || acc_flag !=0 ){//判斷auto clear time是否到了若是則取出下個節點並刪除本身點並進行下依次迴圈        	
   \                     ??SelfTestNew_23:
   \   00000366   DFF8E40B           LDR.W    R0,??SelfTestNew_5+0xAC  ;; act_flag
   \   0000036A   0068               LDR      R0,[R0, #+0]
   \   0000036C   0028               CMP      R0,#+0
   \   0000036E   0AD1               BNE.N    ??SelfTestNew_24
   \   00000370   DFF8740B           LDR.W    R0,??SelfTestNew_5+0x48  ;; pact_flag
   \   00000374   0078               LDRB     R0,[R0, #+0]
   \   00000376   0028               CMP      R0,#+0
   \   00000378   05D1               BNE.N    ??SelfTestNew_24
   \   0000037A   DFF8D40B           LDR.W    R0,??SelfTestNew_5+0xB0  ;; acc_flag
   \   0000037E   0068               LDR      R0,[R0, #+0]
   \   00000380   0028               CMP      R0,#+0
   \   00000382   00F0A980           BEQ.W    ??SelfTestNew_25
    290                    //hms = get_cursec();;//將時分秒轉成秒
    291                    if ( CurIndex >= PriID ){
   \                     ??SelfTestNew_24:
   \   00000386   DFF8BC0B           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   0000038A   0068               LDR      R0,[R0, #+0]
   \   0000038C   1828               CMP      R0,#+24
   \   0000038E   08DB               BLT.N    ??SelfTestNew_26
    292                      hms = timer_counter;
   \   00000390   DFF8C00B           LDR.W    R0,??SelfTestNew_5+0xB4  ;; timer_counter
   \   00000394   0068               LDR      R0,[R0, #+0]
   \   00000396   0890               STR      R0,[SP, #+32]
    293                      tmoffset = pact_flag;            
   \   00000398   DFF84C0B           LDR.W    R0,??SelfTestNew_5+0x48  ;; pact_flag
   \   0000039C   0078               LDRB     R0,[R0, #+0]
   \   0000039E   0790               STR      R0,[SP, #+28]
   \   000003A0   07E0               B.N      ??SelfTestNew_27
    294                    }else{
    295                      hms = nml_timer;
   \                     ??SelfTestNew_26:
   \   000003A2   DFF8B40B           LDR.W    R0,??SelfTestNew_5+0xB8  ;; nml_timer
   \   000003A6   0068               LDR      R0,[R0, #+0]
   \   000003A8   0890               STR      R0,[SP, #+32]
    296                      tmoffset = act_flag;
   \   000003AA   DFF8A00B           LDR.W    R0,??SelfTestNew_5+0xAC  ;; act_flag
   \   000003AE   0068               LDR      R0,[R0, #+0]
   \   000003B0   0790               STR      R0,[SP, #+28]
    297                    }    
    298                    stm = get_idsec(CurIndex);// + act_flag;//將時分秒轉成秒 
   \                     ??SelfTestNew_27:
   \   000003B2   DFF8900B           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   000003B6   0068               LDR      R0,[R0, #+0]
   \   000003B8   ........           BL       get_idsec
   \   000003BC   0A90               STR      R0,[SP, #+40]
    299                    offset=hms-stm;
   \   000003BE   0898               LDR      R0,[SP, #+32]
   \   000003C0   0A99               LDR      R1,[SP, #+40]
   \   000003C2   401A               SUBS     R0,R0,R1
   \   000003C4   0490               STR      R0,[SP, #+16]
    300                    if (offset < 0 ) offset += 10000;                   
   \   000003C6   0498               LDR      R0,[SP, #+16]
   \   000003C8   0028               CMP      R0,#+0
   \   000003CA   04D5               BPL.N    ??SelfTestNew_28
   \   000003CC   0498               LDR      R0,[SP, #+16]
   \   000003CE   42F21071           MOVW     R1,#+10000
   \   000003D2   0818               ADDS     R0,R1,R0
   \   000003D4   0490               STR      R0,[SP, #+16]
    301                    if ( ( tmoffset != 0 && offset > tmoffset ) || ( acc_flag !=0 && TxtPage[CurIndex].count > acc_flag && CurIndex < PriID) ){
   \                     ??SelfTestNew_28:
   \   000003D6   0798               LDR      R0,[SP, #+28]
   \   000003D8   0028               CMP      R0,#+0
   \   000003DA   03D0               BEQ.N    ??SelfTestNew_29
   \   000003DC   0798               LDR      R0,[SP, #+28]
   \   000003DE   0499               LDR      R1,[SP, #+16]
   \   000003E0   8842               CMP      R0,R1
   \   000003E2   19DB               BLT.N    ??SelfTestNew_30
   \                     ??SelfTestNew_29:
   \   000003E4   DFF8680B           LDR.W    R0,??SelfTestNew_5+0xB0  ;; acc_flag
   \   000003E8   0068               LDR      R0,[R0, #+0]
   \   000003EA   0028               CMP      R0,#+0
   \   000003EC   74D0               BEQ.N    ??SelfTestNew_25
   \   000003EE   DFF8600B           LDR.W    R0,??SelfTestNew_5+0xB0  ;; acc_flag
   \   000003F2   0068               LDR      R0,[R0, #+0]
   \   000003F4   DFF84C1B           LDR.W    R1,??SelfTestNew_5+0xA4  ;; CurIndex
   \   000003F8   0968               LDR      R1,[R1, #+0]
   \   000003FA   40F6BC72           MOVW     R2,#+4028
   \   000003FE   DFF8483B           LDR.W    R3,??SelfTestNew_5+0xA8  ;; TxtPage
   \   00000402   01FB0231           MLA      R1,R1,R2,R3
   \   00000406   D1F8B81F           LDR      R1,[R1, #+4024]
   \   0000040A   8842               CMP      R0,R1
   \   0000040C   64D2               BCS.N    ??SelfTestNew_25
   \   0000040E   DFF8340B           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000412   0068               LDR      R0,[R0, #+0]
   \   00000414   1828               CMP      R0,#+24
   \   00000416   5FDA               BGE.N    ??SelfTestNew_25
    302                    	if ( mdf_flag == 0 || get_bit(mail_bits,CurIndex) == 0 ){
   \                     ??SelfTestNew_30:
   \   00000418   DFF8C00A           LDR.W    R0,??SelfTestNew_5+0x3C  ;; mdf_flag
   \   0000041C   0078               LDRB     R0,[R0, #+0]
   \   0000041E   0028               CMP      R0,#+0
   \   00000420   09D0               BEQ.N    ??SelfTestNew_31
   \   00000422   DFF8200B           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000426   0168               LDR      R1,[R0, #+0]
   \   00000428   DFF8AC0A           LDR.W    R0,??SelfTestNew_5+0x38  ;; mail_bits
   \   0000042C   0068               LDR      R0,[R0, #+0]
   \   0000042E   ........           BL       get_bit
   \   00000432   0028               CMP      R0,#+0
   \   00000434   50D1               BNE.N    ??SelfTestNew_25
    303                    		DelIndex=CurIndex;
   \                     ??SelfTestNew_31:
   \   00000436   DFF80C0B           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   0000043A   0068               LDR      R0,[R0, #+0]
   \   0000043C   8146               MOV      R9,R0
    304                    		if ( primsg_flag != 1 ){          	    
   \   0000043E   DFF8880A           LDR.W    R0,??SelfTestNew_5+0x28  ;; primsg_flag
   \   00000442   0078               LDRB     R0,[R0, #+0]
   \   00000444   0128               CMP      R0,#+1
   \   00000446   0CD0               BEQ.N    ??SelfTestNew_32
    305                   	      next_node1(&TopIndex);//get next node
   \   00000448   DFF8E40A           LDR.W    R0,??SelfTestNew_5+0x90  ;; TopIndex
   \   0000044C   ........           BL       next_node1
    306                          del_node1(&TopIndex,&LastIndex,DelIndex);//delete node
   \   00000450   4A46               MOV      R2,R9
   \   00000452   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000454   DFF8041B           LDR.W    R1,??SelfTestNew_5+0xBC  ;; LastIndex
   \   00000458   DFF8D40A           LDR.W    R0,??SelfTestNew_5+0x90  ;; TopIndex
   \   0000045C   ........           BL       del_node1
   \   00000460   1CE0               B.N      ??SelfTestNew_33
    307                    	  }else{ 
    308                    	    next_node1(&PTopIndex);//get next node 
   \                     ??SelfTestNew_32:
   \   00000462   DFF8D00A           LDR.W    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   00000466   ........           BL       next_node1
    309                    	    del_node1(&PTopIndex,&PLastIndex,DelIndex);//delete node  
   \   0000046A   4A46               MOV      R2,R9
   \   0000046C   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000046E   DFF8F01A           LDR.W    R1,??SelfTestNew_5+0xC0  ;; PLastIndex
   \   00000472   DFF8C00A           LDR.W    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   00000476   ........           BL       del_node1
    310                    	    if ( PTopIndex == -1 ){//no priority message        
   \   0000047A   DFF8B80A           LDR.W    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   0000047E   0068               LDR      R0,[R0, #+0]
   \   00000480   5FF0FF31           MOVS     R1,#-1
   \   00000484   8842               CMP      R0,R1
   \   00000486   09D1               BNE.N    ??SelfTestNew_33
    311                            primsg_flag=0;
   \   00000488   DFF83C0A           LDR.W    R0,??SelfTestNew_5+0x28  ;; primsg_flag
   \   0000048C   0021               MOVS     R1,#+0
   \   0000048E   0170               STRB     R1,[R0, #+0]
    312                            CurIndex = TopIndex;
   \   00000490   DFF8B00A           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000494   DFF8981A           LDR.W    R1,??SelfTestNew_5+0x90  ;; TopIndex
   \   00000498   0968               LDR      R1,[R1, #+0]
   \   0000049A   0160               STR      R1,[R0, #+0]
    313                          }                
    314                        }  
    315                        if ( TopIndex == -1 && PTopIndex == -1){
   \                     ??SelfTestNew_33:
   \   0000049C   DFF8900A           LDR.W    R0,??SelfTestNew_5+0x90  ;; TopIndex
   \   000004A0   0068               LDR      R0,[R0, #+0]
   \   000004A2   5FF0FF31           MOVS     R1,#-1
   \   000004A6   8842               CMP      R0,R1
   \   000004A8   7FF4C1AE           BNE.W    ??SelfTestNew_12
   \   000004AC   DFF8840A           LDR.W    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   000004B0   0068               LDR      R0,[R0, #+0]
   \   000004B2   5FF0FF31           MOVS     R1,#-1
   \   000004B6   8842               CMP      R0,R1
   \   000004B8   7FF4B9AE           BNE.W    ??SelfTestNew_12
    316                          strcpy((char *)RevTxtBuff,DftMsg); //wesley
   \   000004BC   DFF87C1A           LDR.W    R1,??SelfTestNew_5+0x9C  ;; DftMsg
   \   000004C0   DFF87C0A           LDR.W    R0,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   000004C4   ........           BL       strcpy
    317                          RevTxtLen=strlen((char*)RevTxtBuff); //wesley
   \   000004C8   DFF8740A           LDR.W    R0,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   000004CC   ........           BL       strlen
   \   000004D0   DFF8581A           LDR.W    R1,??SelfTestNew_5+0x8C  ;; RevTxtLen
   \   000004D4   0880               STRH     R0,[R1, #+0]
   \   000004D6   AAE6               B.N      ??SelfTestNew_12
    318                        }
    319                        continue;
    320                      }
    321                    }  
    322                  }               
    323                  if ( primsg_flag != 0 &&  memcmp(&TxtPage[CurIndex].data[0],GA911,3) == 0 ){     
   \                     ??SelfTestNew_25:
   \   000004D8   DFF8EC09           LDR.W    R0,??SelfTestNew_5+0x28  ;; primsg_flag
   \   000004DC   0078               LDRB     R0,[R0, #+0]
   \   000004DE   0028               CMP      R0,#+0
   \   000004E0   20D0               BEQ.N    ??SelfTestNew_34
   \   000004E2   0322               MOVS     R2,#+3
   \   000004E4   DFF87C1A           LDR.W    R1,??SelfTestNew_5+0xC4  ;; GA911
   \   000004E8   DFF8580A           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   000004EC   0068               LDR      R0,[R0, #+0]
   \   000004EE   40F6BC73           MOVW     R3,#+4028
   \   000004F2   DFF854CA           LDR.W    R12,??SelfTestNew_5+0xA8  ;; TxtPage
   \   000004F6   00FB03C0           MLA      R0,R0,R3,R12
   \   000004FA   0C30               ADDS     R0,R0,#+12
   \   000004FC   ........           BL       memcmp
   \   00000500   0028               CMP      R0,#+0
   \   00000502   0FD1               BNE.N    ??SelfTestNew_34
    324                    strcpy((char *)RevTxtBuff,(char *)&(TxtPage[CurIndex].data[3]));//skip 911   //wesley
   \   00000504   DFF83C0A           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000508   0068               LDR      R0,[R0, #+0]
   \   0000050A   40F6BC71           MOVW     R1,#+4028
   \   0000050E   DFF8382A           LDR.W    R2,??SelfTestNew_5+0xA8  ;; TxtPage
   \   00000512   00FB0120           MLA      R0,R0,R1,R2
   \   00000516   10F10F01           ADDS     R1,R0,#+15
   \   0000051A   DFF8240A           LDR.W    R0,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   0000051E   ........           BL       strcpy
   \   00000522   0EE0               B.N      ??SelfTestNew_35
    325                  }else{
    326                    strcpy((char*) RevTxtBuff,(char *)TxtPage[CurIndex].data);//normal   //wesley
   \                     ??SelfTestNew_34:
   \   00000524   DFF81C0A           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000528   0068               LDR      R0,[R0, #+0]
   \   0000052A   40F6BC71           MOVW     R1,#+4028
   \   0000052E   DFF8182A           LDR.W    R2,??SelfTestNew_5+0xA8  ;; TxtPage
   \   00000532   00FB0120           MLA      R0,R0,R1,R2
   \   00000536   10F10C01           ADDS     R1,R0,#+12
   \   0000053A   DFF8040A           LDR.W    R0,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   0000053E   ........           BL       strcpy
    327                  }    	
    328                  if (tsm_flag != 0)
   \                     ??SelfTestNew_35:
   \   00000542   DFF8240A           LDR.W    R0,??SelfTestNew_5+0xC8  ;; tsm_flag
   \   00000546   0078               LDRB     R0,[R0, #+0]
   \   00000548   0028               CMP      R0,#+0
   \   0000054A   04D0               BEQ.N    ??SelfTestNew_36
    329                    addtm_stamp(CurIndex); 
   \   0000054C   DFF8F409           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000550   0068               LDR      R0,[R0, #+0]
   \   00000552   ........           BL       addtm_stamp
    330                  if (mgn_flag != 0 )//&& primsg_flag == 0 )
   \                     ??SelfTestNew_36:
   \   00000556   DFF86409           LDR.W    R0,??SelfTestNew_5+0x1C  ;; mgn_flag
   \   0000055A   0078               LDRB     R0,[R0, #+0]
   \   0000055C   0028               CMP      R0,#+0
   \   0000055E   01D0               BEQ.N    ??SelfTestNew_22
    331                    add_msgno();        
   \   00000560   ........           BL       add_msgno
    332                }
    333                if ( strcmp((char *)RevTxtBuff,HHmmSS) == 0 && ( type_flag == '1' || type_flag == '2' ) ){//"GALEDTIME=HHmmSS" default message will show time //wesley
   \                     ??SelfTestNew_22:
   \   00000564   DFF8041A           LDR.W    R1,??SelfTestNew_5+0xCC  ;; HHmmSS
   \   00000568   DFF8D409           LDR.W    R0,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   0000056C   ........           BL       strcmp
   \   00000570   0028               CMP      R0,#+0
   \   00000572   14D1               BNE.N    ??SelfTestNew_37
   \   00000574   DFF83409           LDR.W    R0,??SelfTestNew_5+0xC  ;; type_flag
   \   00000578   0078               LDRB     R0,[R0, #+0]
   \   0000057A   3128               CMP      R0,#+49
   \   0000057C   04D0               BEQ.N    ??SelfTestNew_38
   \   0000057E   DFF82C09           LDR.W    R0,??SelfTestNew_5+0xC  ;; type_flag
   \   00000582   0078               LDRB     R0,[R0, #+0]
   \   00000584   3228               CMP      R0,#+50
   \   00000586   0AD1               BNE.N    ??SelfTestNew_37
    334                   dft_tm=1;
   \                     ??SelfTestNew_38:
   \   00000588   DFF8E409           LDR.W    R0,??SelfTestNew_5+0xD0  ;; dft_tm
   \   0000058C   0121               MOVS     R1,#+1
   \   0000058E   0170               STRB     R1,[R0, #+0]
    335                   show_datetime();
   \   00000590   ........           BL       show_datetime
    336                   dft_tm=0;            
   \   00000594   DFF8D809           LDR.W    R0,??SelfTestNew_5+0xD0  ;; dft_tm
   \   00000598   0021               MOVS     R1,#+0
   \   0000059A   0170               STRB     R1,[R0, #+0]
   \   0000059C   09E0               B.N      ??SelfTestNew_39
    337                }else{ 
    338                  if ( type_flag == '1' )
   \                     ??SelfTestNew_37:
   \   0000059E   DFF80C09           LDR.W    R0,??SelfTestNew_5+0xC  ;; type_flag
   \   000005A2   0078               LDRB     R0,[R0, #+0]
   \   000005A4   3128               CMP      R0,#+49
   \   000005A6   02D1               BNE.N    ??SelfTestNew_40
    339                    show_1line();
   \   000005A8   ........           BL       show_1line
   \   000005AC   01E0               B.N      ??SelfTestNew_39
    340                  else
    341                    show_2line();
   \                     ??SelfTestNew_40:
   \   000005AE   ........           BL       show_2line
    342                }
    343                if ( dtm_flag && tmd_flag != 2 && CurIndex != -1){//after each msg
   \                     ??SelfTestNew_39:
   \   000005B2   DFF8C009           LDR.W    R0,??SelfTestNew_5+0xD4  ;; dtm_flag
   \   000005B6   0078               LDRB     R0,[R0, #+0]
   \   000005B8   0028               CMP      R0,#+0
   \   000005BA   33D0               BEQ.N    ??SelfTestNew_41
   \   000005BC   DFF8B809           LDR.W    R0,??SelfTestNew_5+0xD8  ;; tmd_flag
   \   000005C0   0078               LDRB     R0,[R0, #+0]
   \   000005C2   0228               CMP      R0,#+2
   \   000005C4   2ED0               BEQ.N    ??SelfTestNew_41
   \   000005C6   DFF87C09           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   000005CA   0068               LDR      R0,[R0, #+0]
   \   000005CC   5FF0FF31           MOVS     R1,#-1
   \   000005D0   8842               CMP      R0,R1
   \   000005D2   27D0               BEQ.N    ??SelfTestNew_41
    344                	if ( type_flag == '1' || type_flag == '2' || (type_flag=='a' &&  strcmp(DftMsg,HHmmSS) != 0) || (type_flag=='b' &&  strcmp(DftMsg,HHmmSS) != 0)){
   \   000005D4   DFF8D408           LDR.W    R0,??SelfTestNew_5+0xC  ;; type_flag
   \   000005D8   0078               LDRB     R0,[R0, #+0]
   \   000005DA   3128               CMP      R0,#+49
   \   000005DC   1ED0               BEQ.N    ??SelfTestNew_42
   \   000005DE   DFF8CC08           LDR.W    R0,??SelfTestNew_5+0xC  ;; type_flag
   \   000005E2   0078               LDRB     R0,[R0, #+0]
   \   000005E4   3228               CMP      R0,#+50
   \   000005E6   19D0               BEQ.N    ??SelfTestNew_42
   \   000005E8   DFF8C008           LDR.W    R0,??SelfTestNew_5+0xC  ;; type_flag
   \   000005EC   0078               LDRB     R0,[R0, #+0]
   \   000005EE   6128               CMP      R0,#+97
   \   000005F0   07D1               BNE.N    ??SelfTestNew_43
   \   000005F2   DFF87819           LDR.W    R1,??SelfTestNew_5+0xCC  ;; HHmmSS
   \   000005F6   DFF84409           LDR.W    R0,??SelfTestNew_5+0x9C  ;; DftMsg
   \   000005FA   ........           BL       strcmp
   \   000005FE   0028               CMP      R0,#+0
   \   00000600   0CD1               BNE.N    ??SelfTestNew_42
   \                     ??SelfTestNew_43:
   \   00000602   DFF8A808           LDR.W    R0,??SelfTestNew_5+0xC  ;; type_flag
   \   00000606   0078               LDRB     R0,[R0, #+0]
   \   00000608   6228               CMP      R0,#+98
   \   0000060A   0BD1               BNE.N    ??SelfTestNew_41
   \   0000060C   DFF85C19           LDR.W    R1,??SelfTestNew_5+0xCC  ;; HHmmSS
   \   00000610   DFF82809           LDR.W    R0,??SelfTestNew_5+0x9C  ;; DftMsg
   \   00000614   ........           BL       strcmp
   \   00000618   0028               CMP      R0,#+0
   \   0000061A   03D0               BEQ.N    ??SelfTestNew_41
    345                    show_datetime();//!!!!!!
   \                     ??SelfTestNew_42:
   \   0000061C   ........           BL       show_datetime
    346                    disappear();
   \   00000620   ........           BL       disappear
    347                  }  
    348                }
    349                if ( TopIndex == -1 ){
   \                     ??SelfTestNew_41:
   \   00000624   DFF80809           LDR.W    R0,??SelfTestNew_5+0x90  ;; TopIndex
   \   00000628   0068               LDR      R0,[R0, #+0]
   \   0000062A   5FF0FF31           MOVS     R1,#-1
   \   0000062E   8842               CMP      R0,R1
   \   00000630   0CD1               BNE.N    ??SelfTestNew_44
    350                  strcpy((char *)RevTxtBuff,DftMsg);  //wesley
   \   00000632   DFF80819           LDR.W    R1,??SelfTestNew_5+0x9C  ;; DftMsg
   \   00000636   DFF80809           LDR.W    R0,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   0000063A   ........           BL       strcpy
    351                  RevTxtLen=strlen((char *)RevTxtBuff); //wesley
   \   0000063E   DFF80009           LDR.W    R0,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   00000642   ........           BL       strlen
   \   00000646   DFF8E418           LDR.W    R1,??SelfTestNew_5+0x8C  ;; RevTxtLen
   \   0000064A   0880               STRH     R0,[R1, #+0]
    352                }          
    353                //*******************************************************************
    354                if ( CurIndex != -1 ){//has message Uart_Pro後會執行這裡
   \                     ??SelfTestNew_44:
   \   0000064C   DFF8F408           LDR.W    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000650   0068               LDR      R0,[R0, #+0]
   \   00000652   5FF0FF31           MOVS     R1,#-1
   \   00000656   8842               CMP      R0,R1
   \   00000658   0DD0               BEQ.N    ??SelfTestNew_13
    355                	if ( primsg_flag != 1 )//normal 
   \   0000065A   DFF86C08           LDR.W    R0,??SelfTestNew_5+0x28  ;; primsg_flag
   \   0000065E   0078               LDRB     R0,[R0, #+0]
   \   00000660   0128               CMP      R0,#+1
   \   00000662   04D0               BEQ.N    ??SelfTestNew_45
    356                    next_node1(&TopIndex);//get next node
   \   00000664   DFF8C808           LDR.W    R0,??SelfTestNew_5+0x90  ;; TopIndex
   \   00000668   ........           BL       next_node1
   \   0000066C   03E0               B.N      ??SelfTestNew_13
    357                  else//Priority
    358                    next_node1(&PTopIndex);//get next node
   \                     ??SelfTestNew_45:
   \   0000066E   DFF8C408           LDR.W    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   00000672   ........           BL       next_node1
    359                }//else if ( dtm_flag && tmd_flag == 2 && type_flag != 'A' && type_flag != 'B'){//default message 
    360                 //   show_datetime();//!!!!!!
    361                 //   disappear();
    362                //}
    363              }
    364              // ------ Pager Text mode shoe Preframe End ------
    365              if ( FlashWriFlg == 100  ){
   \                     ??SelfTestNew_13:
   \   00000676   DFF87007           LDR.W    R0,??SelfTestNew_0+0xC  ;; FlashWriFlg
   \   0000067A   0078               LDRB     R0,[R0, #+0]
   \   0000067C   6428               CMP      R0,#+100
   \   0000067E   19D1               BNE.N    ??SelfTestNew_46
    366                   //RTS_output = 0 ; // enable UART received  ---------- AP002
    367          	 if( Disp_status != 100)
   \   00000680   DFF8F808           LDR.W    R0,??SelfTestNew_5+0xDC  ;; Disp_status
   \   00000684   0078               LDRB     R0,[R0, #+0]
   \   00000686   6428               CMP      R0,#+100
   \   00000688   3FF4D1AD           BEQ.W    ??SelfTestNew_12
    368                   {
    369                     for(j=0;j < 10;j++)
   \   0000068C   0020               MOVS     R0,#+0
   \   0000068E   0600               MOVS     R6,R0
   \                     ??SelfTestNew_47:
   \   00000690   0A2E               CMP      R6,#+10
   \   00000692   05DA               BGE.N    ??SelfTestNew_48
    370                       FlashMark[j]=0; //Erase Flash Mark   
   \   00000694   DFF86007           LDR.W    R0,??SelfTestNew_0+0x1C  ;; FlashMark
   \   00000698   0021               MOVS     R1,#+0
   \   0000069A   3154               STRB     R1,[R6, R0]
   \   0000069C   761C               ADDS     R6,R6,#+1
   \   0000069E   F7E7               B.N      ??SelfTestNew_47
    371          	   Disp_status = 100 ; // display Message Receiving
   \                     ??SelfTestNew_48:
   \   000006A0   DFF8D808           LDR.W    R0,??SelfTestNew_5+0xDC  ;; Disp_status
   \   000006A4   6421               MOVS     R1,#+100
   \   000006A6   0170               STRB     R1,[R0, #+0]
    372                     Status_disp( Disp_status ) ;
   \   000006A8   DFF8D008           LDR.W    R0,??SelfTestNew_5+0xDC  ;; Disp_status
   \   000006AC   0078               LDRB     R0,[R0, #+0]
   \   000006AE   ........           BL       Status_disp
   \   000006B2   BCE5               B.N      ??SelfTestNew_12
    373                   }
    374                   continue;
    375              }        
    376              if ( RecProcessing == 1 )
   \                     ??SelfTestNew_46:
   \   000006B4   DFF82C07           LDR.W    R0,??SelfTestNew_0+0x8  ;; RecProcessing
   \   000006B8   0078               LDRB     R0,[R0, #+0]
   \   000006BA   0128               CMP      R0,#+1
   \   000006BC   53D1               BNE.N    ??SelfTestNew_49
    377              {
    378                   if( Rec_Timer_cnt == 0 )
   \   000006BE   DFF8C008           LDR.W    R0,??SelfTestNew_5+0xE0  ;; Rec_Timer_cnt
   \   000006C2   0068               LDR      R0,[R0, #+0]
   \   000006C4   0028               CMP      R0,#+0
   \   000006C6   24D1               BNE.N    ??SelfTestNew_50
    379                   {
    380                     RecProcessing=0;
   \   000006C8   DFF81807           LDR.W    R0,??SelfTestNew_0+0x8  ;; RecProcessing
   \   000006CC   0021               MOVS     R1,#+0
   \   000006CE   0170               STRB     R1,[R0, #+0]
    381                     RevBuffIndex=0;//!!!!!!  
   \   000006D0   DFF8B008           LDR.W    R0,??SelfTestNew_5+0xE4  ;; RevBuffIndex
   \   000006D4   0021               MOVS     R1,#+0
   \   000006D6   0160               STR      R1,[R0, #+0]
    382                     //Receiving_error_disp() ;
    383                     Status_disp(0x05) ;
   \   000006D8   0520               MOVS     R0,#+5
   \   000006DA   ........           BL       Status_disp
    384                     gWRecLen=0 ;
   \   000006DE   DFF8A808           LDR.W    R0,??SelfTestNew_5+0xE8  ;; gWRecLen
   \   000006E2   0021               MOVS     R1,#+0
   \   000006E4   0160               STR      R1,[R0, #+0]
    385                     UartChkSum=0;
   \   000006E6   DFF8A408           LDR.W    R0,??SelfTestNew_5+0xEC  ;; UartChkSum
   \   000006EA   0021               MOVS     R1,#+0
   \   000006EC   0180               STRH     R1,[R0, #+0]
    386                     RevCommand=0;
   \   000006EE   DFF8A008           LDR.W    R0,??SelfTestNew_5+0xF0  ;; RevCommand
   \   000006F2   0021               MOVS     R1,#+0
   \   000006F4   0170               STRB     R1,[R0, #+0]
    387                     value[0]=ETX;
   \   000006F6   0320               MOVS     R0,#+3
   \   000006F8   8DF82C00           STRB     R0,[SP, #+44]
    388                     value[1]=NAK;
   \   000006FC   1520               MOVS     R0,#+21
   \   000006FE   8DF82D00           STRB     R0,[SP, #+45]
    389                     value[2]=ETX;
   \   00000702   0320               MOVS     R0,#+3
   \   00000704   8DF82E00           STRB     R0,[SP, #+46]
    390                     Host_SendNext(value,3); //(Send NAK) and ETX
   \   00000708   0321               MOVS     R1,#+3
   \   0000070A   0BA8               ADD      R0,SP,#+44
   \   0000070C   ........           BL       Host_SendNext
    391                     continue ;     
   \   00000710   8DE5               B.N      ??SelfTestNew_12
    392                   }
    393                   //----------- AP007
    394                   //RTS_output = 0 ; // enable UART received  ---------- AP007
    395          	 if( Disp_status != 0x8 )
   \                     ??SelfTestNew_50:
   \   00000712   DFF86808           LDR.W    R0,??SelfTestNew_5+0xDC  ;; Disp_status
   \   00000716   0078               LDRB     R0,[R0, #+0]
   \   00000718   0828               CMP      R0,#+8
   \   0000071A   24D0               BEQ.N    ??SelfTestNew_49
    396                   {
    397                      switch (ReceivingCnt){
   \   0000071C   0198               LDR      R0,[SP, #+4]
   \   0000071E   0028               CMP      R0,#+0
   \   00000720   06D0               BEQ.N    ??SelfTestNew_51
   \   00000722   0128               CMP      R0,#+1
   \   00000724   08D0               BEQ.N    ??SelfTestNew_52
   \   00000726   0228               CMP      R0,#+2
   \   00000728   0AD0               BEQ.N    ??SelfTestNew_53
   \   0000072A   0328               CMP      R0,#+3
   \   0000072C   0CD0               BEQ.N    ??SelfTestNew_54
   \   0000072E   0EE0               B.N      ??SelfTestNew_55
    398                        case 0:
    399          	        tmp_revcnt = 0x8 ; // display Message Receiving
   \                     ??SelfTestNew_51:
   \   00000730   0820               MOVS     R0,#+8
   \   00000732   8DF80000           STRB     R0,[SP, #+0]
   \   00000736   0AE0               B.N      ??SelfTestNew_55
    400                          break;
    401                        case 1:
    402          	        tmp_revcnt = 0xA ; // display Message Receiving
   \                     ??SelfTestNew_52:
   \   00000738   0A20               MOVS     R0,#+10
   \   0000073A   8DF80000           STRB     R0,[SP, #+0]
   \   0000073E   06E0               B.N      ??SelfTestNew_55
    403                          break;
    404                        case 2:
    405          	        tmp_revcnt = 0xB ; // display Message Receiving
   \                     ??SelfTestNew_53:
   \   00000740   0B20               MOVS     R0,#+11
   \   00000742   8DF80000           STRB     R0,[SP, #+0]
   \   00000746   02E0               B.N      ??SelfTestNew_55
    406                           break;
    407                        case 3:
    408          	        tmp_revcnt = 0xc ; // display Message Receiving
   \                     ??SelfTestNew_54:
   \   00000748   0C20               MOVS     R0,#+12
   \   0000074A   8DF80000           STRB     R0,[SP, #+0]
    409                          break; 
    410                      } 
    411                      Status_disp( tmp_revcnt ) ;                                                           
   \                     ??SelfTestNew_55:
   \   0000074E   9DF80000           LDRB     R0,[SP, #+0]
   \   00000752   ........           BL       Status_disp
    412                      ReceivingCnt++;
   \   00000756   0198               LDR      R0,[SP, #+4]
   \   00000758   401C               ADDS     R0,R0,#+1
   \   0000075A   0190               STR      R0,[SP, #+4]
    413                      if (ReceivingCnt > 3 )
   \   0000075C   0198               LDR      R0,[SP, #+4]
   \   0000075E   0428               CMP      R0,#+4
   \   00000760   01D3               BCC.N    ??SelfTestNew_49
    414                         ReceivingCnt=0;
   \   00000762   0020               MOVS     R0,#+0
   \   00000764   0190               STR      R0,[SP, #+4]
    415                   }
    416                   //----------- AP007
    417              }
    418          
    419              // ------ Received complete then update start -------
    420              if ( RecProcessing > 1 ){
   \                     ??SelfTestNew_49:
   \   00000766   DFF87C06           LDR.W    R0,??SelfTestNew_0+0x8  ;; RecProcessing
   \   0000076A   0078               LDRB     R0,[R0, #+0]
   \   0000076C   0228               CMP      R0,#+2
   \   0000076E   FFF45EAD           BCC.W    ??SelfTestNew_12
    421                while( LED_change == 1 );
   \                     ??SelfTestNew_56:
   \   00000772   DFF83407           LDR.W    R0,??SelfTestNew_5+0x8  ;; LED_change
   \   00000776   0078               LDRB     R0,[R0, #+0]
   \   00000778   0128               CMP      R0,#+1
   \   0000077A   FAD0               BEQ.N    ??SelfTestNew_56
    422                if (RecProcessing == 3 )      {
   \   0000077C   DFF86406           LDR.W    R0,??SelfTestNew_0+0x8  ;; RecProcessing
   \   00000780   0078               LDRB     R0,[R0, #+0]
   \   00000782   0328               CMP      R0,#+3
   \   00000784   11D1               BNE.N    ??SelfTestNew_57
    423                   RecProcessing=0;         
   \   00000786   DFF85C06           LDR.W    R0,??SelfTestNew_0+0x8  ;; RecProcessing
   \   0000078A   0021               MOVS     R1,#+0
   \   0000078C   0170               STRB     R1,[R0, #+0]
    424                   FlashWriFlg=0;         
   \   0000078E   DFF85806           LDR.W    R0,??SelfTestNew_0+0xC  ;; FlashWriFlg
   \   00000792   0021               MOVS     R1,#+0
   \   00000794   0170               STRB     R1,[R0, #+0]
    425                   RevBuffIndex=0;//!!!!!! 
   \   00000796   DFF8EC07           LDR.W    R0,??SelfTestNew_5+0xE4  ;; RevBuffIndex
   \   0000079A   0021               MOVS     R1,#+0
   \   0000079C   0160               STR      R1,[R0, #+0]
    426                   //Receiving_error_disp() ;
    427                   Status_disp(Disp_status) ;
   \   0000079E   DFF8DC07           LDR.W    R0,??SelfTestNew_5+0xDC  ;; Disp_status
   \   000007A2   0078               LDRB     R0,[R0, #+0]
   \   000007A4   ........           BL       Status_disp
    428                   continue ;     
   \   000007A8   41E5               B.N      ??SelfTestNew_12
    429                }
    430                
    431          #ifdef _HardWare       
    432                if (CommandMode==1){
   \                     ??SelfTestNew_57:
   \   000007AA   DFF8E807           LDR.W    R0,??SelfTestNew_5+0xF4  ;; CommandMode
   \   000007AE   0078               LDRB     R0,[R0, #+0]
   \   000007B0   0128               CMP      R0,#+1
   \   000007B2   19D1               BNE.N    ??SelfTestNew_58
    433                  DecprTtlBytes=DecprLen(RevBuff,Cmd3Length);
   \   000007B4   DFF8E007           LDR.W    R0,??SelfTestNew_5+0xF8  ;; Cmd3Length
   \   000007B8   0168               LDR      R1,[R0, #+0]
   \   000007BA   DFF8E007           LDR.W    R0,??SelfTestNew_5+0xFC  ;; RevBuff
   \   000007BE   ........           BL       DecprLen
   \   000007C2   0990               STR      R0,[SP, #+36]
    434                  if (Cmd1Length != DecprTtlBytes){
   \   000007C4   DFF8D807           LDR.W    R0,??SelfTestNew_5+0x100  ;; Cmd1Length
   \   000007C8   0068               LDR      R0,[R0, #+0]
   \   000007CA   0999               LDR      R1,[SP, #+36]
   \   000007CC   8842               CMP      R0,R1
   \   000007CE   0BD0               BEQ.N    ??SelfTestNew_58
    435                     RecProcessing=0;
   \   000007D0   DFF81006           LDR.W    R0,??SelfTestNew_0+0x8  ;; RecProcessing
   \   000007D4   0021               MOVS     R1,#+0
   \   000007D6   0170               STRB     R1,[R0, #+0]
    436                     RevBuffIndex=0;//!!!!!!
   \   000007D8   DFF8A807           LDR.W    R0,??SelfTestNew_5+0xE4  ;; RevBuffIndex
   \   000007DC   0021               MOVS     R1,#+0
   \   000007DE   0160               STR      R1,[R0, #+0]
    437                     //Receiving_error_disp() ;
    438                     Status_disp(0x05) ;
   \   000007E0   0520               MOVS     R0,#+5
   \   000007E2   ........           BL       Status_disp
    439                     continue ;
   \   000007E6   22E5               B.N      ??SelfTestNew_12
    440                  }
    441                }
    442          #endif        
    443                RecProcessing=0;
   \                     ??SelfTestNew_58:
   \   000007E8   DFF8F805           LDR.W    R0,??SelfTestNew_0+0x8  ;; RecProcessing
   \   000007EC   0021               MOVS     R1,#+0
   \   000007EE   0170               STRB     R1,[R0, #+0]
    444                RevBuffIndex=0;//!!!!!! 
   \   000007F0   DFF89007           LDR.W    R0,??SelfTestNew_5+0xE4  ;; RevBuffIndex
   \   000007F4   0021               MOVS     R1,#+0
   \   000007F6   0160               STR      R1,[R0, #+0]
    445                disappear();
   \   000007F8   ........           BL       disappear
    446                // ------- Display Message Update... Start ------- 
    447                //Message_Update_disp();
    448                // music play
    449                if( dbz_flag > 0 )
   \   000007FC   DFF8A407           LDR.W    R0,??SelfTestNew_5+0x104  ;; dbz_flag
   \   00000800   0078               LDRB     R0,[R0, #+0]
   \   00000802   0128               CMP      R0,#+1
   \   00000804   11D3               BCC.N    ??SelfTestNew_59
    450                {
    451                   SYS_sec = ztm_flag * 10 ;
   \   00000806   DFF8A007           LDR.W    R0,??SelfTestNew_5+0x108  ;; ztm_flag
   \   0000080A   0068               LDR      R0,[R0, #+0]
   \   0000080C   0A21               MOVS     R1,#+10
   \   0000080E   00FB01F0           MUL      R0,R0,R1
   \   00000812   DFF89817           LDR.W    R1,??SelfTestNew_5+0x10C  ;; SYS_sec
   \   00000816   0860               STR      R0,[R1, #+0]
    452          #ifdef _HardWare         
    453                   MUS_timeout = 1 ;
   \   00000818   DFF89407           LDR.W    R0,??SelfTestNew_5+0x110  ;; MUS_timeout
   \   0000081C   0121               MOVS     R1,#+1
   \   0000081E   0170               STRB     R1,[R0, #+0]
    454          #endif         
    455                   beep_vibrate( zty_flag ) ;
   \   00000820   ........           LDR.W    R0,??DataTable0  ;; zty_flag
   \   00000824   0078               LDRB     R0,[R0, #+0]
   \   00000826   ........           BL       beep_vibrate
    456                }
    457          #ifdef _HardWare      
    458                if (CommandMode==1){//binary
   \                     ??SelfTestNew_59:
   \   0000082A   DFF86807           LDR.W    R0,??SelfTestNew_5+0xF4  ;; CommandMode
   \   0000082E   0078               LDRB     R0,[R0, #+0]
   \   00000830   0128               CMP      R0,#+1
   \   00000832   0BD1               BNE.N    ??SelfTestNew_60
    459                  if (UpgradeMode==0)
   \   00000834   ........           LDR.W    R0,??DataTable3  ;; UpgradeMode
   \   00000838   0078               LDRB     R0,[R0, #+0]
   \   0000083A   0028               CMP      R0,#+0
   \   0000083C   03D1               BNE.N    ??SelfTestNew_61
    460                    Status_disp(0x03) ;
   \   0000083E   0320               MOVS     R0,#+3
   \   00000840   ........           BL       Status_disp
   \   00000844   02E0               B.N      ??SelfTestNew_60
    461                  else
    462                    Status_disp(0x0D) ;//firmware upgrade
   \                     ??SelfTestNew_61:
   \   00000846   0D20               MOVS     R0,#+13
   \   00000848   ........           BL       Status_disp
    463                }
    464          #endif      
    465                memset(LED_buffer.COM,'\0',sizeof(LED_buffer.COM)); // clear Display buffer
   \                     ??SelfTestNew_60:
   \   0000084C   A022               MOVS     R2,#+160
   \   0000084E   0021               MOVS     R1,#+0
   \   00000850   DFF84C06           LDR.W    R0,??SelfTestNew_5  ;; LED_buffer
   \   00000854   ........           BL       memset
    466                memset(LED_bufferG.COM,'\0',sizeof(LED_bufferG.COM));
   \   00000858   A022               MOVS     R2,#+160
   \   0000085A   0021               MOVS     R1,#+0
   \   0000085C   DFF84406           LDR.W    R0,??SelfTestNew_5+0x4  ;; LED_bufferG
   \   00000860   ........           BL       memset
    467                LED_change = 1 ;
   \   00000864   DFF84006           LDR.W    R0,??SelfTestNew_5+0x8  ;; LED_change
   \   00000868   0121               MOVS     R1,#+1
   \   0000086A   0170               STRB     R1,[R0, #+0]
    468                while( LED_change == 1 );
   \                     ??SelfTestNew_62:
   \   0000086C   DFF83806           LDR.W    R0,??SelfTestNew_5+0x8  ;; LED_change
   \   00000870   0078               LDRB     R0,[R0, #+0]
   \   00000872   0128               CMP      R0,#+1
   \   00000874   FAD0               BEQ.N    ??SelfTestNew_62
    469          #ifdef _HardWare
    470                if (UpgradeMode==1) {
   \   00000876   ........           LDR.W    R0,??DataTable3  ;; UpgradeMode
   \   0000087A   0078               LDRB     R0,[R0, #+0]
   \   0000087C   0128               CMP      R0,#+1
   \   0000087E   04D1               BNE.N    ??SelfTestNew_63
    471                  UpgradeMode = 0;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!重要的修改
   \   00000880   ........           LDR.W    R0,??DataTable3  ;; UpgradeMode
   \   00000884   0021               MOVS     R1,#+0
   \   00000886   0170               STRB     R1,[R0, #+0]
    472                  return;//firmware upgrade
   \   00000888   06E3               B.N      ??SelfTestNew_64
    473                } 
    474          #endif            
    475                // ------- Display Message Update... End ------- 
    476                if (CommandMode != 3) 
   \                     ??SelfTestNew_63:
   \   0000088A   DFF80807           LDR.W    R0,??SelfTestNew_5+0xF4  ;; CommandMode
   \   0000088E   0078               LDRB     R0,[R0, #+0]
   \   00000890   0328               CMP      R0,#+3
   \   00000892   03D0               BEQ.N    ??SelfTestNew_65
    477                  LastTxtBuff[0]='\0';
   \   00000894   DFF81C07           LDR.W    R0,??SelfTestNew_5+0x114  ;; LastTxtBuff
   \   00000898   0021               MOVS     R1,#+0
   \   0000089A   0170               STRB     R1,[R0, #+0]
    478          #ifdef _HardWare        
    479                if (CommandMode != 1 )
   \                     ??SelfTestNew_65:
   \   0000089C   DFF8F406           LDR.W    R0,??SelfTestNew_5+0xF4  ;; CommandMode
   \   000008A0   0078               LDRB     R0,[R0, #+0]
   \   000008A2   0128               CMP      R0,#+1
   \   000008A4   03D0               BEQ.N    ??SelfTestNew_66
    480                  LastCmd3Len=0;    
   \   000008A6   DFF81007           LDR.W    R0,??SelfTestNew_5+0x118  ;; LastCmd3Len
   \   000008AA   0021               MOVS     R1,#+0
   \   000008AC   0160               STR      R1,[R0, #+0]
    481                if (CommandMode==1){ //binary
   \                     ??SelfTestNew_66:
   \   000008AE   DFF8E406           LDR.W    R0,??SelfTestNew_5+0xF4  ;; CommandMode
   \   000008B2   0078               LDRB     R0,[R0, #+0]
   \   000008B4   0128               CMP      R0,#+1
   \   000008B6   40F0FE80           BNE.W    ??SelfTestNew_67
    482                   // ------ update flash for normal mode start -------
    483                	if (UartDispMode==1){  //Binary:Pager Text Mode Reserve
   \   000008BA   DFF80007           LDR.W    R0,??SelfTestNew_5+0x11C  ;; UartDispMode
   \   000008BE   0078               LDRB     R0,[R0, #+0]
   \   000008C0   0128               CMP      R0,#+1
   \   000008C2   32D1               BNE.N    ??SelfTestNew_68
    484                	  if (DispMode!=0){      	  
   \   000008C4   DFF8F806           LDR.W    R0,??SelfTestNew_5+0x120  ;; DispMode
   \   000008C8   0078               LDRB     R0,[R0, #+0]
   \   000008CA   0028               CMP      R0,#+0
   \   000008CC   2DD0               BEQ.N    ??SelfTestNew_68
    485                      Reserve.Start=LEDFRM.Start;//reserve
   \   000008CE   DFF8F406           LDR.W    R0,??SelfTestNew_5+0x124  ;; Reserve
   \   000008D2   DFF8F416           LDR.W    R1,??SelfTestNew_5+0x128  ;; LEDFRM
   \   000008D6   0978               LDRB     R1,[R1, #+0]
   \   000008D8   0170               STRB     R1,[R0, #+0]
    486                      Reserve.End=LEDFRM.End+1;  //reserve
   \   000008DA   DFF8EC06           LDR.W    R0,??SelfTestNew_5+0x128  ;; LEDFRM
   \   000008DE   4078               LDRB     R0,[R0, #+1]
   \   000008E0   401C               ADDS     R0,R0,#+1
   \   000008E2   DFF8E016           LDR.W    R1,??SelfTestNew_5+0x124  ;; Reserve
   \   000008E6   4870               STRB     R0,[R1, #+1]
    487                      TtlBytes=sizeof(LEDPage[0])*(Reserve.End-Reserve.Start);          
   \   000008E8   DFF8D806           LDR.W    R0,??SelfTestNew_5+0x124  ;; Reserve
   \   000008EC   4078               LDRB     R0,[R0, #+1]
   \   000008EE   DFF8D416           LDR.W    R1,??SelfTestNew_5+0x124  ;; Reserve
   \   000008F2   0978               LDRB     R1,[R1, #+0]
   \   000008F4   401A               SUBS     R0,R0,R1
   \   000008F6   4FF4CB71           MOV      R1,#+406
   \   000008FA   00FB01F0           MUL      R0,R0,R1
   \   000008FE   0290               STR      R0,[SP, #+8]
    488                      FlashMemRead(RevBuff+Reserve.Start*sizeof(LEDPage[0]),(unsigned char *)&LEDPage[Reserve.Start],TtlBytes); //reserve     		
   \   00000900   029A               LDR      R2,[SP, #+8]
   \   00000902   DFF8C006           LDR.W    R0,??SelfTestNew_5+0x124  ;; Reserve
   \   00000906   0078               LDRB     R0,[R0, #+0]
   \   00000908   4FF4CB71           MOV      R1,#+406
   \   0000090C   DFF8BC36           LDR.W    R3,??SelfTestNew_5+0x12C  ;; LEDPage
   \   00000910   00FB0131           MLA      R1,R0,R1,R3
   \   00000914   DFF8AC06           LDR.W    R0,??SelfTestNew_5+0x124  ;; Reserve
   \   00000918   0078               LDRB     R0,[R0, #+0]
   \   0000091A   4FF4CB73           MOV      R3,#+406
   \   0000091E   DFF87CC6           LDR.W    R12,??SelfTestNew_5+0xFC  ;; RevBuff
   \   00000922   00FB03C0           MLA      R0,R0,R3,R12
   \   00000926   ........           BL       FlashMemRead
    489                    }  
    490                	}
    491                  if ( LED_byte_Length == 10 )
    492                    FlhBlkLen=2;
   \                     ??SelfTestNew_68:
   \   0000092A   0220               MOVS     R0,#+2
   \   0000092C   0690               STR      R0,[SP, #+24]
    493                  else if ( LED_byte_Length == 20 )
    494                    FlhBlkLen=3;
    495                  else
    496                    FlhBlkLen=4; 
    497                  for(i=0;i<FlhBlkLen;i++)
   \   0000092E   0020               MOVS     R0,#+0
   \   00000930   0400               MOVS     R4,R0
   \                     ??SelfTestNew_69:
   \   00000932   0698               LDR      R0,[SP, #+24]
   \   00000934   8442               CMP      R4,R0
   \   00000936   10D2               BCS.N    ??SelfTestNew_70
    498                  {
    499                    temp=Flash_Erase(i);
   \   00000938   2000               MOVS     R0,R4
   \   0000093A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000093C   ........           BL       Flash_Erase
   \   00000940   8246               MOV      R10,R0
    500                 
    501                    if ( temp == 0 )
   \   00000942   5FFA8AFA           UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000946   BAF1000F           CMP      R10,#+0
   \   0000094A   04D1               BNE.N    ??SelfTestNew_71
    502                    {	
    503          	     i = 5 ;
   \   0000094C   0520               MOVS     R0,#+5
   \   0000094E   0400               MOVS     R4,R0
    504                       //Flh_erase_error();
    505                       Status_disp(0x06) ;
   \   00000950   0620               MOVS     R0,#+6
   \   00000952   ........           BL       Status_disp
    506                    }
    507                  }
   \                     ??SelfTestNew_71:
   \   00000956   641C               ADDS     R4,R4,#+1
   \   00000958   EBE7               B.N      ??SelfTestNew_69
    508          	if( temp == 1 )
   \                     ??SelfTestNew_70:
   \   0000095A   5FFA8AFA           UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000095E   BAF1010F           CMP      R10,#+1
   \   00000962   7FF464AC           BNE.W    ??SelfTestNew_12
    509          	{
    510                    FlashMemWrite(FlashMark,Mark,sizeof(Mark));                                		
   \   00000966   0B22               MOVS     R2,#+11
   \   00000968   DFF88814           LDR.W    R1,??SelfTestNew_0+0x18  ;; `?<Constant "\\001\\001\\002\\003\\004\\005\\006\\a\\b\\t`
   \   0000096C   DFF88804           LDR.W    R0,??SelfTestNew_0+0x1C  ;; FlashMark
   \   00000970   ........           BL       FlashMemWrite
    511                    Flash_Write(&DispMode,UartDispMode);
   \   00000974   DFF84406           LDR.W    R0,??SelfTestNew_5+0x11C  ;; UartDispMode
   \   00000978   0178               LDRB     R1,[R0, #+0]
   \   0000097A   DFF84406           LDR.W    R0,??SelfTestNew_5+0x120  ;; DispMode
   \   0000097E   ........           BL       Flash_Write
    512                    Flash_Write_fun=Flash_Write;
   \   00000982   DFF84C06           LDR.W    R0,??SelfTestNew_5+0x130  ;; Flash_Write_fun
   \   00000986   DFF84C16           LDR.W    R1,??SelfTestNew_5+0x134  ;; Flash_Write
   \   0000098A   0160               STR      R1,[R0, #+0]
    513                    if ( BinMix == 1 )
   \   0000098C   ........           LDR.W    R0,??DataTable9  ;; BinMix
   \   00000990   0078               LDRB     R0,[R0, #+0]
   \   00000992   0128               CMP      R0,#+1
   \   00000994   10D1               BNE.N    ??SelfTestNew_72
    514                      Decompression(RevBuff,(unsigned char *)&LEDPage1[UARTFRM.Start],Cmd3Length);
   \   00000996   DFF80006           LDR.W    R0,??SelfTestNew_5+0xF8  ;; Cmd3Length
   \   0000099A   0268               LDR      R2,[R0, #+0]
   \   0000099C   ........           LDR.W    R0,??DataTable13  ;; UARTFRM
   \   000009A0   0078               LDRB     R0,[R0, #+0]
   \   000009A2   40F6C801           MOVW     R1,#+2248
   \   000009A6   DFF83036           LDR.W    R3,??SelfTestNew_5+0x138  ;; LEDPage1
   \   000009AA   00FB0131           MLA      R1,R0,R1,R3
   \   000009AE   DFF8EC05           LDR.W    R0,??SelfTestNew_5+0xFC  ;; RevBuff
   \   000009B2   ........           BL       Decompression
   \   000009B6   0FE0               B.N      ??SelfTestNew_73
    515                    else
    516                      Decompression(RevBuff,(unsigned char *)&LEDPage[UARTFRM.Start],Cmd3Length);                  
   \                     ??SelfTestNew_72:
   \   000009B8   DFF8DC05           LDR.W    R0,??SelfTestNew_5+0xF8  ;; Cmd3Length
   \   000009BC   0268               LDR      R2,[R0, #+0]
   \   000009BE   ........           LDR.W    R0,??DataTable13  ;; UARTFRM
   \   000009C2   0078               LDRB     R0,[R0, #+0]
   \   000009C4   4FF4CB71           MOV      R1,#+406
   \   000009C8   DFF80036           LDR.W    R3,??SelfTestNew_5+0x12C  ;; LEDPage
   \   000009CC   00FB0131           MLA      R1,R0,R1,R3
   \   000009D0   DFF8C805           LDR.W    R0,??SelfTestNew_5+0xFC  ;; RevBuff
   \   000009D4   ........           BL       Decompression
    517                    if (DispMode==0){ //Normal Mode 
   \                     ??SelfTestNew_73:
   \   000009D8   DFF8E405           LDR.W    R0,??SelfTestNew_5+0x120  ;; DispMode
   \   000009DC   0078               LDRB     R0,[R0, #+0]
   \   000009DE   0028               CMP      R0,#+0
   \   000009E0   62D1               BNE.N    ??SelfTestNew_74
    518                      Flash_Write(&LEDFRM.Start,UARTFRM.Start); 
   \   000009E2   ........           LDR.W    R0,??DataTable13  ;; UARTFRM
   \   000009E6   0178               LDRB     R1,[R0, #+0]
   \   000009E8   DFF8DC05           LDR.W    R0,??SelfTestNew_5+0x128  ;; LEDFRM
   \   000009EC   ........           BL       Flash_Write
    519                      Flash_Write(&LEDFRM.End,UARTFRM.End-1);     
   \   000009F0   ........           LDR.W    R0,??DataTable13  ;; UARTFRM
   \   000009F4   4078               LDRB     R0,[R0, #+1]
   \   000009F6   411E               SUBS     R1,R0,#+1
   \   000009F8   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000009FA   DFF8E005           LDR.W    R0,??SelfTestNew_5+0x13C  ;; LEDFRM + 1
   \   000009FE   ........           BL       Flash_Write
    520                      Flash_Write(&PreFrameTable[0],0);
   \   00000A02   0021               MOVS     R1,#+0
   \   00000A04   DFF8D805           LDR.W    R0,??SelfTestNew_5+0x140  ;; PreFrameTable
   \   00000A08   ........           BL       Flash_Write
    521                      if ( BinMix == 1 ){
   \   00000A0C   ........           LDR.W    R0,??DataTable9  ;; BinMix
   \   00000A10   0078               LDRB     R0,[R0, #+0]
   \   00000A12   0128               CMP      R0,#+1
   \   00000A14   24D1               BNE.N    ??SelfTestNew_75
    522                        for(i=UARTFRM.Start;i<UARTFRM.End;i++){
   \   00000A16   ........           LDR.W    R0,??DataTable13  ;; UARTFRM
   \   00000A1A   0078               LDRB     R0,[R0, #+0]
   \   00000A1C   0400               MOVS     R4,R0
   \                     ??SelfTestNew_76:
   \   00000A1E   ........           LDR.W    R0,??DataTable13  ;; UARTFRM
   \   00000A22   4078               LDRB     R0,[R0, #+1]
   \   00000A24   8442               CMP      R4,R0
   \   00000A26   3FD2               BCS.N    ??SelfTestNew_74
    523                          for(j=0,ccSum=0; j < sizeof(LEDPage1[0]);j++)
   \   00000A28   0020               MOVS     R0,#+0
   \   00000A2A   0600               MOVS     R6,R0
   \   00000A2C   0020               MOVS     R0,#+0
   \   00000A2E   0390               STR      R0,[SP, #+12]
   \                     ??SelfTestNew_77:
   \   00000A30   40F6C800           MOVW     R0,#+2248
   \   00000A34   8642               CMP      R6,R0
   \   00000A36   09D2               BCS.N    ??SelfTestNew_78
    524                      	  ccSum=*((unsigned char *)&LEDPage1[i]+j);            
   \   00000A38   40F6C800           MOVW     R0,#+2248
   \   00000A3C   DFF89815           LDR.W    R1,??SelfTestNew_5+0x138  ;; LEDPage1
   \   00000A40   04FB0010           MLA      R0,R4,R0,R1
   \   00000A44   305C               LDRB     R0,[R6, R0]
   \   00000A46   0390               STR      R0,[SP, #+12]
   \   00000A48   761C               ADDS     R6,R6,#+1
   \   00000A4A   F1E7               B.N      ??SelfTestNew_77
    525                          FlashMemWrite((unsigned char *)&BinChkSum[i],(unsigned char *)&ccSum,4);     
   \                     ??SelfTestNew_78:
   \   00000A4C   0422               MOVS     R2,#+4
   \   00000A4E   03A9               ADD      R1,SP,#+12
   \   00000A50   DFF89005           LDR.W    R0,??SelfTestNew_5+0x144  ;; BinChkSum
   \   00000A54   10EB8400           ADDS     R0,R0,R4, LSL #+2
   \   00000A58   ........           BL       FlashMemWrite
    526                        }
   \   00000A5C   641C               ADDS     R4,R4,#+1
   \   00000A5E   DEE7               B.N      ??SelfTestNew_76
    527                      }else{
    528                        for(i=UARTFRM.Start;i<UARTFRM.End;i++){
   \                     ??SelfTestNew_75:
   \   00000A60   ........           LDR.W    R0,??DataTable13  ;; UARTFRM
   \   00000A64   0078               LDRB     R0,[R0, #+0]
   \   00000A66   0400               MOVS     R4,R0
   \                     ??SelfTestNew_79:
   \   00000A68   ........           LDR.W    R0,??DataTable13  ;; UARTFRM
   \   00000A6C   4078               LDRB     R0,[R0, #+1]
   \   00000A6E   8442               CMP      R4,R0
   \   00000A70   1AD2               BCS.N    ??SelfTestNew_74
    529                          for(j=0,ccSum=0; j < sizeof(LEDPage[0]);j++)
   \   00000A72   0020               MOVS     R0,#+0
   \   00000A74   0600               MOVS     R6,R0
   \   00000A76   0020               MOVS     R0,#+0
   \   00000A78   0390               STR      R0,[SP, #+12]
   \                     ??SelfTestNew_80:
   \   00000A7A   B6F5CB7F           CMP      R6,#+406
   \   00000A7E   09D2               BCS.N    ??SelfTestNew_81
    530                      	  ccSum=*((unsigned char *)&LEDPage[i]+j);            
   \   00000A80   4FF4CB70           MOV      R0,#+406
   \   00000A84   DFF84415           LDR.W    R1,??SelfTestNew_5+0x12C  ;; LEDPage
   \   00000A88   04FB0010           MLA      R0,R4,R0,R1
   \   00000A8C   305C               LDRB     R0,[R6, R0]
   \   00000A8E   0390               STR      R0,[SP, #+12]
   \   00000A90   761C               ADDS     R6,R6,#+1
   \   00000A92   F2E7               B.N      ??SelfTestNew_80
    531                          FlashMemWrite((unsigned char *)&BinChkSum[i],(unsigned char *)&ccSum,4);     
   \                     ??SelfTestNew_81:
   \   00000A94   0422               MOVS     R2,#+4
   \   00000A96   03A9               ADD      R1,SP,#+12
   \   00000A98   DFF84805           LDR.W    R0,??SelfTestNew_5+0x144  ;; BinChkSum
   \   00000A9C   10EB8400           ADDS     R0,R0,R4, LSL #+2
   \   00000AA0   ........           BL       FlashMemWrite
    532                        }
   \   00000AA4   641C               ADDS     R4,R4,#+1
   \   00000AA6   DFE7               B.N      ??SelfTestNew_79
    533                      }              		            	        
    534                    }
    535                    Flash_Write(&TxtMode,OldMode);//Old Mode          
   \                     ??SelfTestNew_74:
   \   00000AA8   A521               MOVS     R1,#+165
   \   00000AAA   DFF87C04           LDR.W    R0,??SelfTestNew_5+0x88  ;; TxtMode
   \   00000AAE   ........           BL       Flash_Write
   \   00000AB2   FFF7BCBB           B.W      ??SelfTestNew_12
    536                  }
    537                  // ------ update flash for normal mode end -------
    538                }else if ( (CommandMode==2) ){  //alpha
   \                     ??SelfTestNew_67:
   \   00000AB6   DFF8DC04           LDR.W    R0,??SelfTestNew_5+0xF4  ;; CommandMode
   \   00000ABA   0078               LDRB     R0,[R0, #+0]
   \   00000ABC   0228               CMP      R0,#+2
   \   00000ABE   40F0DE80           BNE.W    ??SelfTestNew_82
    539                  // ------ update flash for Pager Text mode start ------- 
    540                  if ( PreFrameTable[0]=='\0' || PreFrameTable[0] >=50)
   \   00000AC2   DFF81C05           LDR.W    R0,??SelfTestNew_5+0x140  ;; PreFrameTable
   \   00000AC6   0078               LDRB     R0,[R0, #+0]
   \   00000AC8   0028               CMP      R0,#+0
   \   00000ACA   07D0               BEQ.N    ??SelfTestNew_83
   \   00000ACC   DFF81005           LDR.W    R0,??SelfTestNew_5+0x140  ;; PreFrameTable
   \   00000AD0   0078               LDRB     R0,[R0, #+0]
   \   00000AD2   3228               CMP      R0,#+50
   \   00000AD4   8941               SBCS     R1,R1,R1
   \   00000AD6   C90F               LSRS     R1,R1,#+31
   \   00000AD8   0591               STR      R1,[SP, #+20]
   \   00000ADA   01E0               B.N      ??SelfTestNew_84
    541                    MixFlag=0;
   \                     ??SelfTestNew_83:
   \   00000ADC   0020               MOVS     R0,#+0
   \   00000ADE   0590               STR      R0,[SP, #+20]
    542                  else
    543                    MixFlag=1;  
    544                  if (MixFlag == 1 ){  
   \                     ??SelfTestNew_84:
   \   00000AE0   0598               LDR      R0,[SP, #+20]
   \   00000AE2   0128               CMP      R0,#+1
   \   00000AE4   10D1               BNE.N    ??SelfTestNew_85
    545                    FlashMemRead(UartPreFrmTbl,PreFrameTable,sizeof(PreFrameTable));//Reserve PreFrame Table
   \   00000AE6   FF22               MOVS     R2,#+255
   \   00000AE8   DFF8F414           LDR.W    R1,??SelfTestNew_5+0x140  ;; PreFrameTable
   \   00000AEC   ........           LDR.W    R0,??DataTable15  ;; UartPreFrmTbl
   \   00000AF0   ........           BL       FlashMemRead
    546                    TtlBytes=sizeof(LEDPage[0])*50;           
   \   00000AF4   44F64C70           MOVW     R0,#+20300
   \   00000AF8   0290               STR      R0,[SP, #+8]
    547                    FlashMemRead(RevBuff,(unsigned char *)&LEDPage[0],TtlBytes); //Reserve LEDPage[0 ~ 49]
   \   00000AFA   029A               LDR      R2,[SP, #+8]
   \   00000AFC   DFF8CC14           LDR.W    R1,??SelfTestNew_5+0x12C  ;; LEDPage
   \   00000B00   DFF89804           LDR.W    R0,??SelfTestNew_5+0xFC  ;; RevBuff
   \   00000B04   ........           BL       FlashMemRead
    548                  }  
    549                  if ( LED_byte_Length == 10 )
    550                    FlhBlkLen=2;
   \                     ??SelfTestNew_85:
   \   00000B08   0220               MOVS     R0,#+2
   \   00000B0A   0690               STR      R0,[SP, #+24]
    551                  else if ( LED_byte_Length == 20 )
    552                    FlhBlkLen=3;
    553                  else
    554                    FlhBlkLen=4; 
    555                  for(i=0;i<FlhBlkLen;i++)
   \   00000B0C   0020               MOVS     R0,#+0
   \   00000B0E   0400               MOVS     R4,R0
   \                     ??SelfTestNew_86:
   \   00000B10   0698               LDR      R0,[SP, #+24]
   \   00000B12   8442               CMP      R4,R0
   \   00000B14   10D2               BCS.N    ??SelfTestNew_87
    556                  {
    557                    temp=Flash_Erase(i);
   \   00000B16   2000               MOVS     R0,R4
   \   00000B18   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000B1A   ........           BL       Flash_Erase
   \   00000B1E   8246               MOV      R10,R0
    558                 
    559                    if ( temp == 0 )
   \   00000B20   5FFA8AFA           UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000B24   BAF1000F           CMP      R10,#+0
   \   00000B28   04D1               BNE.N    ??SelfTestNew_88
    560                    {	
    561          	     i = 5 ;
   \   00000B2A   0520               MOVS     R0,#+5
   \   00000B2C   0400               MOVS     R4,R0
    562                       //Flh_erase_error();
    563                       Status_disp(0x06) ;
   \   00000B2E   0620               MOVS     R0,#+6
   \   00000B30   ........           BL       Status_disp
    564                    }
    565                  }
   \                     ??SelfTestNew_88:
   \   00000B34   641C               ADDS     R4,R4,#+1
   \   00000B36   EBE7               B.N      ??SelfTestNew_86
    566          	if( temp == 1 ){   
   \                     ??SelfTestNew_87:
   \   00000B38   5FFA8AFA           UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000B3C   BAF1010F           CMP      R10,#+1
   \   00000B40   7FF475AB           BNE.W    ??SelfTestNew_12
    567                    FlashMemWrite(FlashMark,Mark,sizeof(Mark));                                 
   \   00000B44   0B22               MOVS     R2,#+11
   \   00000B46   AB49               LDR.N    R1,??SelfTestNew_0+0x18  ;; `?<Constant "\\001\\001\\002\\003\\004\\005\\006\\a\\b\\t`
   \   00000B48   AB48               LDR.N    R0,??SelfTestNew_0+0x1C  ;; FlashMark
   \   00000B4A   ........           BL       FlashMemWrite
    568                    Flash_Write(&DispMode,1);        	
   \   00000B4E   0121               MOVS     R1,#+1
   \   00000B50   DFF86C04           LDR.W    R0,??SelfTestNew_5+0x120  ;; DispMode
   \   00000B54   ........           BL       Flash_Write
    569                    buflen=strlen((char *)RevTxtBuff);  //wesley
   \   00000B58   DFF8E403           LDR.W    R0,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   00000B5C   ........           BL       strlen
   \   00000B60   0500               MOVS     R5,R0
    570                    strcpy((char*)LastTxtBuff,(char*)RevTxtBuff); //catch //wesley
   \   00000B62   DFF8DC13           LDR.W    R1,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   00000B66   DFF84C04           LDR.W    R0,??SelfTestNew_5+0x114  ;; LastTxtBuff
   \   00000B6A   ........           BL       strcpy
    571                    RevPT=RevTxtBuff;      
   \   00000B6E   DFF8D003           LDR.W    R0,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   00000B72   8346               MOV      R11,R0
    572                    for(i=50;;i++ ){
   \   00000B74   3220               MOVS     R0,#+50
   \   00000B76   0400               MOVS     R4,R0
    573                      Flash_Write(&LEDPage[i].mode,0);
   \                     ??SelfTestNew_89:
   \   00000B78   0021               MOVS     R1,#+0
   \   00000B7A   4FF4CB70           MOV      R0,#+406
   \   00000B7E   DFF84C24           LDR.W    R2,??SelfTestNew_5+0x12C  ;; LEDPage
   \   00000B82   04FB0020           MLA      R0,R4,R0,R2
   \   00000B86   10F5C970           ADDS     R0,R0,#+402
   \   00000B8A   ........           BL       Flash_Write
    574                      Flash_Write(&LEDPage[i].outmode,0);      
   \   00000B8E   0021               MOVS     R1,#+0
   \   00000B90   4FF4CB70           MOV      R0,#+406
   \   00000B94   DFF83424           LDR.W    R2,??SelfTestNew_5+0x12C  ;; LEDPage
   \   00000B98   04FB0020           MLA      R0,R4,R0,R2
   \   00000B9C   00F29310           ADDW     R0,R0,#+403
   \   00000BA0   ........           BL       Flash_Write
    575                      if (buflen>=LED_byte_Length){
   \   00000BA4   0A2D               CMP      R5,#+10
   \   00000BA6   27DB               BLT.N    ??SelfTestNew_90
    576                        memcpy(LED_ASCii_buffer,RevPT,LED_byte_Length);
   \   00000BA8   0A22               MOVS     R2,#+10
   \   00000BAA   5946               MOV      R1,R11
   \   00000BAC   DFF83804           LDR.W    R0,??SelfTestNew_5+0x148  ;; LED_ASCii_buffer
   \   00000BB0   ........           BL       memcpy
    577                        LED_ASCii_buffer[LED_byte_Length]='\0';
   \   00000BB4   DFF83004           LDR.W    R0,??SelfTestNew_5+0x148  ;; LED_ASCii_buffer
   \   00000BB8   0021               MOVS     R1,#+0
   \   00000BBA   8172               STRB     R1,[R0, #+10]
    578                   //     ascii2frame(i);    // wesley
    579                        buflen -=LED_byte_Length;
   \   00000BBC   0A3D               SUBS     R5,R5,#+10
    580                        if (buflen==0){
   \   00000BBE   002D               CMP      R5,#+0
   \   00000BC0   0BD1               BNE.N    ??SelfTestNew_91
    581                          Flash_Write((unsigned char *)&LEDPage[i].delay,3);            
   \   00000BC2   0321               MOVS     R1,#+3
   \   00000BC4   4FF4CB70           MOV      R0,#+406
   \   00000BC8   DFF80024           LDR.W    R2,??SelfTestNew_5+0x12C  ;; LEDPage
   \   00000BCC   04FB0020           MLA      R0,R4,R0,R2
   \   00000BD0   10F5CA70           ADDS     R0,R0,#+404
   \   00000BD4   ........           BL       Flash_Write
    582                          break;
   \   00000BD8   26E0               B.N      ??SelfTestNew_92
    583                        }
    584                        Flash_Write((unsigned char *)&LEDPage[i].delay,0);               
   \                     ??SelfTestNew_91:
   \   00000BDA   0021               MOVS     R1,#+0
   \   00000BDC   4FF4CB70           MOV      R0,#+406
   \   00000BE0   DFF8E823           LDR.W    R2,??SelfTestNew_5+0x12C  ;; LEDPage
   \   00000BE4   04FB0020           MLA      R0,R4,R0,R2
   \   00000BE8   10F5CA70           ADDS     R0,R0,#+404
   \   00000BEC   ........           BL       Flash_Write
    585                        RevPT += LED_byte_Length;
   \   00000BF0   1BF10A0B           ADDS     R11,R11,#+10
    586                      }else if (buflen > 0){
   \   00000BF4   641C               ADDS     R4,R4,#+1
   \   00000BF6   BFE7               B.N      ??SelfTestNew_89
   \                     ??SelfTestNew_90:
   \   00000BF8   012D               CMP      R5,#+1
   \   00000BFA   15DB               BLT.N    ??SelfTestNew_92
    587                        memcpy(LED_ASCii_buffer,RevPT,buflen);
   \   00000BFC   2A00               MOVS     R2,R5
   \   00000BFE   5946               MOV      R1,R11
   \   00000C00   DFF8E403           LDR.W    R0,??SelfTestNew_5+0x148  ;; LED_ASCii_buffer
   \   00000C04   ........           BL       memcpy
    588                        LED_ASCii_buffer[buflen]='\0';
   \   00000C08   DFF8DC03           LDR.W    R0,??SelfTestNew_5+0x148  ;; LED_ASCii_buffer
   \   00000C0C   0021               MOVS     R1,#+0
   \   00000C0E   2954               STRB     R1,[R5, R0]
    589                     //   ascii2frame(i);  // wesley
    590                        temp = Flash_Write((unsigned char *)&LEDPage[i].delay,3);               
   \   00000C10   0321               MOVS     R1,#+3
   \   00000C12   4FF4CB70           MOV      R0,#+406
   \   00000C16   DFF8B423           LDR.W    R2,??SelfTestNew_5+0x12C  ;; LEDPage
   \   00000C1A   04FB0020           MLA      R0,R4,R0,R2
   \   00000C1E   10F5CA70           ADDS     R0,R0,#+404
   \   00000C22   ........           BL       Flash_Write
   \   00000C26   8246               MOV      R10,R0
    591                        break;
    592                      }else break;          
    593                    }
    594                    if (MixFlag==1){
   \                     ??SelfTestNew_92:
   \   00000C28   0598               LDR      R0,[SP, #+20]
   \   00000C2A   0128               CMP      R0,#+1
   \   00000C2C   11D1               BNE.N    ??SelfTestNew_93
    595                      FlashMemWrite(PreFrameTable,UartPreFrmTbl,sizeof(PreFrameTable));//Write Reserve PreFrame Table
   \   00000C2E   FF22               MOVS     R2,#+255
   \   00000C30   ........           LDR.W    R1,??DataTable15  ;; UartPreFrmTbl
   \   00000C34   DFF8A803           LDR.W    R0,??SelfTestNew_5+0x140  ;; PreFrameTable
   \   00000C38   ........           BL       FlashMemWrite
    596                      TtlBytes=sizeof(LEDPage[0])*50;           
   \   00000C3C   44F64C70           MOVW     R0,#+20300
   \   00000C40   0290               STR      R0,[SP, #+8]
    597                      FlashMemWrite((unsigned char *)&LEDPage[0],RevBuff,TtlBytes); //Write Reserve LEDPage[0 ~ 49]  	        
   \   00000C42   029A               LDR      R2,[SP, #+8]
   \   00000C44   DFF85413           LDR.W    R1,??SelfTestNew_5+0xFC  ;; RevBuff
   \   00000C48   DFF88003           LDR.W    R0,??SelfTestNew_5+0x12C  ;; LEDPage
   \   00000C4C   ........           BL       FlashMemWrite
   \   00000C50   04E0               B.N      ??SelfTestNew_94
    598                    }else
    599                      Flash_Write(&PreFrameTable[0],0);             
   \                     ??SelfTestNew_93:
   \   00000C52   0021               MOVS     R1,#+0
   \   00000C54   DFF88803           LDR.W    R0,??SelfTestNew_5+0x140  ;; PreFrameTable
   \   00000C58   ........           BL       Flash_Write
    600                    Flash_Write(&LEDFRM.Start,50);
   \                     ??SelfTestNew_94:
   \   00000C5C   3221               MOVS     R1,#+50
   \   00000C5E   DFF86803           LDR.W    R0,??SelfTestNew_5+0x128  ;; LEDFRM
   \   00000C62   ........           BL       Flash_Write
    601                    Flash_Write(&LEDFRM.End,i);
   \   00000C66   2100               MOVS     R1,R4
   \   00000C68   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000C6A   DFF87003           LDR.W    R0,??SelfTestNew_5+0x13C  ;; LEDFRM + 1
   \   00000C6E   ........           BL       Flash_Write
    602                    Flash_Write(&TxtMode,OldMode);//Old Mode 
   \   00000C72   A521               MOVS     R1,#+165
   \   00000C74   AC48               LDR.N    R0,??SelfTestNew_5+0x88  ;; TxtMode
   \   00000C76   ........           BL       Flash_Write
   \   00000C7A   FFF7D8BA           B.W      ??SelfTestNew_12
    603          	}
    604                  // ------ update flash for Pager Text mode end -------         
    605              
    606             }else   if (CommandMode==3 ){ //new mode
   \                     ??SelfTestNew_82:
   \   00000C7E   C548               LDR.N    R0,??SelfTestNew_5+0xF4  ;; CommandMode
   \   00000C80   0078               LDRB     R0,[R0, #+0]
   \   00000C82   0328               CMP      R0,#+3
   \   00000C84   7FF4D3AA           BNE.W    ??SelfTestNew_12
    607          #else // BC
    608               if (CommandMode==3 ){ //new mode
    609          #endif    
    610                  temp=1;//Flash_Erase(0); //Erase Flash
   \   00000C88   0120               MOVS     R0,#+1
   \   00000C8A   8246               MOV      R10,R0
    611                  if ( temp == 0 )	
   \   00000C8C   5FFA8AFA           UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000C90   BAF1000F           CMP      R10,#+0
   \   00000C94   04D1               BNE.N    ??SelfTestNew_95
    612                    Status_disp(0x06) ;
   \   00000C96   0620               MOVS     R0,#+6
   \   00000C98   ........           BL       Status_disp
   \   00000C9C   FFF7C7BA           B.W      ??SelfTestNew_12
    613                  else{  
    614                    if ( UartDelFlg == 2 ){
   \                     ??SelfTestNew_95:
   \   00000CA0   ........           LDR.W    R0,??DataTable21  ;; UartDelFlg
   \   00000CA4   0078               LDRB     R0,[R0, #+0]
   \   00000CA6   0228               CMP      R0,#+2
   \   00000CA8   0BD1               BNE.N    ??SelfTestNew_96
    615                      init_sram();
   \   00000CAA   ........           BL       init_sram
    616                      primsg_flag=0;
   \   00000CAE   8648               LDR.N    R0,??SelfTestNew_5+0x28  ;; primsg_flag
   \   00000CB0   0021               MOVS     R1,#+0
   \   00000CB2   0170               STRB     R1,[R0, #+0]
    617                      mau_flag=0;
   \   00000CB4   9048               LDR.N    R0,??SelfTestNew_5+0x58  ;; mau_flag
   \   00000CB6   0021               MOVS     R1,#+0
   \   00000CB8   0170               STRB     R1,[R0, #+0]
    618                      pmau_flag = 0;
   \   00000CBA   9F48               LDR.N    R0,??SelfTestNew_5+0x98  ;; pmau_flag
   \   00000CBC   0021               MOVS     R1,#+0
   \   00000CBE   0170               STRB     R1,[R0, #+0]
   \   00000CC0   B7E0               B.N      ??SelfTestNew_97
    619                    }else if ( UartDelFlg == 5 ){ 
   \                     ??SelfTestNew_96:
   \   00000CC2   ........           LDR.W    R0,??DataTable21  ;; UartDelFlg
   \   00000CC6   0078               LDRB     R0,[R0, #+0]
   \   00000CC8   0528               CMP      R0,#+5
   \   00000CCA   04D1               BNE.N    ??SelfTestNew_98
    620                      show_datetime();//!!!!!!
   \   00000CCC   ........           BL       show_datetime
    621                      disappear();     
   \   00000CD0   ........           BL       disappear
   \   00000CD4   ADE0               B.N      ??SelfTestNew_97
    622          
    623          
    624                    }else if ( UartDelFlg == 6 ){//reset
   \                     ??SelfTestNew_98:
   \   00000CD6   ....               LDR.N    R0,??DataTable21  ;; UartDelFlg
   \   00000CD8   0078               LDRB     R0,[R0, #+0]
   \   00000CDA   0628               CMP      R0,#+6
   \   00000CDC   6FD1               BNE.N    ??SelfTestNew_99
    625                      if ( PTopIndex != -1 ){    
   \   00000CDE   9548               LDR.N    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   00000CE0   0068               LDR      R0,[R0, #+0]
   \   00000CE2   5FF0FF31           MOVS     R1,#-1
   \   00000CE6   8842               CMP      R0,R1
   \   00000CE8   20D0               BEQ.N    ??SelfTestNew_100
    626                        NodIndex=PTopIndex;
   \   00000CEA   9248               LDR.N    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   00000CEC   0068               LDR      R0,[R0, #+0]
   \   00000CEE   8046               MOV      R8,R0
    627                        while (NodIndex != -1){
   \                     ??SelfTestNew_101:
   \   00000CF0   5FF0FF30           MOVS     R0,#-1
   \   00000CF4   8045               CMP      R8,R0
   \   00000CF6   19D0               BEQ.N    ??SelfTestNew_100
    628                          DelIndex=NodIndex;
   \   00000CF8   C146               MOV      R9,R8
    629                          NodIndex=TxtPage[NodIndex].next;
   \   00000CFA   40F6BC70           MOVW     R0,#+4028
   \   00000CFE   9249               LDR.N    R1,??SelfTestNew_5+0xA8  ;; TxtPage
   \   00000D00   08FB0010           MLA      R0,R8,R0,R1
   \   00000D04   D0F80480           LDR      R8,[R0, #+4]
    630                          
    631                          if ( strcmp((char *)TxtPage[DelIndex].data,(char * )TmpTxtBuff) == 0 ) {              	     	//wesley
   \   00000D08   ....               LDR.N    R1,??DataTable20  ;; TmpTxtBuff
   \   00000D0A   40F6BC70           MOVW     R0,#+4028
   \   00000D0E   8E4A               LDR.N    R2,??SelfTestNew_5+0xA8  ;; TxtPage
   \   00000D10   09FB0020           MLA      R0,R9,R0,R2
   \   00000D14   0C30               ADDS     R0,R0,#+12
   \   00000D16   ........           BL       strcmp
   \   00000D1A   0028               CMP      R0,#+0
   \   00000D1C   E8D1               BNE.N    ??SelfTestNew_101
    632                            del_node1(&PTopIndex , &PLastIndex , DelIndex);//???                
   \   00000D1E   4A46               MOV      R2,R9
   \   00000D20   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000D22   8F49               LDR.N    R1,??SelfTestNew_5+0xC0  ;; PLastIndex
   \   00000D24   8348               LDR.N    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   00000D26   ........           BL       del_node1
   \   00000D2A   E1E7               B.N      ??SelfTestNew_101
    633                          }  
    634                        }
    635                      } 
    636                      if ( TopIndex != -1 ){    
   \                     ??SelfTestNew_100:
   \   00000D2C   8048               LDR.N    R0,??SelfTestNew_5+0x90  ;; TopIndex
   \   00000D2E   0068               LDR      R0,[R0, #+0]
   \   00000D30   5FF0FF31           MOVS     R1,#-1
   \   00000D34   8842               CMP      R0,R1
   \   00000D36   20D0               BEQ.N    ??SelfTestNew_102
    637                        NodIndex=TopIndex;
   \   00000D38   7D48               LDR.N    R0,??SelfTestNew_5+0x90  ;; TopIndex
   \   00000D3A   0068               LDR      R0,[R0, #+0]
   \   00000D3C   8046               MOV      R8,R0
    638                        while (NodIndex != -1){
   \                     ??SelfTestNew_103:
   \   00000D3E   5FF0FF30           MOVS     R0,#-1
   \   00000D42   8045               CMP      R8,R0
   \   00000D44   19D0               BEQ.N    ??SelfTestNew_102
    639                          DelIndex=NodIndex;
   \   00000D46   C146               MOV      R9,R8
    640                          NodIndex=TxtPage[NodIndex].next;
   \   00000D48   40F6BC70           MOVW     R0,#+4028
   \   00000D4C   7E49               LDR.N    R1,??SelfTestNew_5+0xA8  ;; TxtPage
   \   00000D4E   08FB0010           MLA      R0,R8,R0,R1
   \   00000D52   D0F80480           LDR      R8,[R0, #+4]
    641                          if ( strcmp((char*)TxtPage[DelIndex].data,(char *)TmpTxtBuff) == 0 ) {              	     	
   \   00000D56   ....               LDR.N    R1,??DataTable20  ;; TmpTxtBuff
   \   00000D58   40F6BC70           MOVW     R0,#+4028
   \   00000D5C   7A4A               LDR.N    R2,??SelfTestNew_5+0xA8  ;; TxtPage
   \   00000D5E   09FB0020           MLA      R0,R9,R0,R2
   \   00000D62   0C30               ADDS     R0,R0,#+12
   \   00000D64   ........           BL       strcmp
   \   00000D68   0028               CMP      R0,#+0
   \   00000D6A   E8D1               BNE.N    ??SelfTestNew_103
    642                            del_node1(&TopIndex , &LastIndex , DelIndex);//???                
   \   00000D6C   4A46               MOV      R2,R9
   \   00000D6E   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000D70   7A49               LDR.N    R1,??SelfTestNew_5+0xBC  ;; LastIndex
   \   00000D72   6F48               LDR.N    R0,??SelfTestNew_5+0x90  ;; TopIndex
   \   00000D74   ........           BL       del_node1
   \   00000D78   E1E7               B.N      ??SelfTestNew_103
    643                          }  
    644                        }
    645                      }             
    646                      if ( PTopIndex == -1 ){
   \                     ??SelfTestNew_102:
   \   00000D7A   6E48               LDR.N    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   00000D7C   0068               LDR      R0,[R0, #+0]
   \   00000D7E   5FF0FF31           MOVS     R1,#-1
   \   00000D82   8842               CMP      R0,R1
   \   00000D84   07D1               BNE.N    ??SelfTestNew_104
    647                      	primsg_flag = 0;
   \   00000D86   5048               LDR.N    R0,??SelfTestNew_5+0x28  ;; primsg_flag
   \   00000D88   0021               MOVS     R1,#+0
   \   00000D8A   0170               STRB     R1,[R0, #+0]
    648                        CurIndex = TopIndex;
   \   00000D8C   6D48               LDR.N    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000D8E   6849               LDR.N    R1,??SelfTestNew_5+0x90  ;; TopIndex
   \   00000D90   0968               LDR      R1,[R1, #+0]
   \   00000D92   0160               STR      R1,[R0, #+0]
   \   00000D94   03E0               B.N      ??SelfTestNew_105
    649                      }else
    650                        CurIndex = PTopIndex;
   \                     ??SelfTestNew_104:
   \   00000D96   6B48               LDR.N    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000D98   6649               LDR.N    R1,??SelfTestNew_5+0x94  ;; PTopIndex
   \   00000D9A   0968               LDR      R1,[R1, #+0]
   \   00000D9C   0160               STR      R1,[R0, #+0]
    651                      if ( CurIndex == -1 ){
   \                     ??SelfTestNew_105:
   \   00000D9E   6948               LDR.N    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000DA0   0068               LDR      R0,[R0, #+0]
   \   00000DA2   5FF0FF31           MOVS     R1,#-1
   \   00000DA6   8842               CMP      R0,R1
   \   00000DA8   43D1               BNE.N    ??SelfTestNew_97
    652                        strcpy((char *)RevTxtBuff,DftMsg);
   \   00000DAA   6449               LDR.N    R1,??SelfTestNew_5+0x9C  ;; DftMsg
   \   00000DAC   6448               LDR.N    R0,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   00000DAE   ........           BL       strcpy
    653                        RevTxtLen=strlen((char *)RevTxtBuff);
   \   00000DB2   6348               LDR.N    R0,??SelfTestNew_5+0xA0  ;; RevTxtBuff
   \   00000DB4   ........           BL       strlen
   \   00000DB8   5C49               LDR.N    R1,??SelfTestNew_5+0x8C  ;; RevTxtLen
   \   00000DBA   0880               STRH     R0,[R1, #+0]
   \   00000DBC   39E0               B.N      ??SelfTestNew_97
    654                      }
    655                   }else if ( UartDelFlg == 0 ){//if UartDelFlg == 0 insert node
   \                     ??SelfTestNew_99:
   \   00000DBE   ....               LDR.N    R0,??DataTable21  ;; UartDelFlg
   \   00000DC0   0078               LDRB     R0,[R0, #+0]
   \   00000DC2   0028               CMP      R0,#+0
   \   00000DC4   35D1               BNE.N    ??SelfTestNew_97
    656                     if ( UartID < PriID )
   \   00000DC6   ....               LDR.N    R0,??DataTable27  ;; UartID
   \   00000DC8   0078               LDRB     R0,[R0, #+0]
   \   00000DCA   1828               CMP      R0,#+24
   \   00000DCC   16D2               BCS.N    ??SelfTestNew_106
    657                        add_node(&TopIndex,&LastIndex,UartID);
   \   00000DCE   ....               LDR.N    R0,??DataTable27  ;; UartID
   \   00000DD0   0278               LDRB     R2,[R0, #+0]
   \   00000DD2   6249               LDR.N    R1,??SelfTestNew_5+0xBC  ;; LastIndex
   \   00000DD4   5648               LDR.N    R0,??SelfTestNew_5+0x90  ;; TopIndex
   \   00000DD6   ........           BL       add_node
   \   00000DDA   15E0               B.N      ??SelfTestNew_107
   \                     ??SelfTestNew_0:
   \   00000DDC   ........           DC32     clBlack
   \   00000DE0   ........           DC32     RTC_flag
   \   00000DE4   ........           DC32     RecProcessing
   \   00000DE8   ........           DC32     FlashWriFlg
   \   00000DEC   ........           DC32     color_flag
   \   00000DF0   ........           DC32     VerStr1
   \   00000DF4   ........           DC32     `?<Constant "\\001\\001\\002\\003\\004\\005\\006\\a\\b\\t`
   \   00000DF8   ........           DC32     FlashMark
    658                      else
    659                        add_prinode(&PTopIndex,&PLastIndex,UartID);//priority  
   \                     ??SelfTestNew_106:
   \   00000DFC   ....               LDR.N    R0,??DataTable27  ;; UartID
   \   00000DFE   0278               LDRB     R2,[R0, #+0]
   \   00000E00   5749               LDR.N    R1,??SelfTestNew_5+0xC0  ;; PLastIndex
   \   00000E02   4C48               LDR.N    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   00000E04   ........           BL       add_prinode
    660                      if ( UartID >= PriID || ( UartID < PriID && PTopIndex == -1 ) ){
   \                     ??SelfTestNew_107:
   \   00000E08   ....               LDR.N    R0,??DataTable27  ;; UartID
   \   00000E0A   0078               LDRB     R0,[R0, #+0]
   \   00000E0C   1828               CMP      R0,#+24
   \   00000E0E   09D2               BCS.N    ??SelfTestNew_108
   \   00000E10   ....               LDR.N    R0,??DataTable27  ;; UartID
   \   00000E12   0078               LDRB     R0,[R0, #+0]
   \   00000E14   1828               CMP      R0,#+24
   \   00000E16   0CD2               BCS.N    ??SelfTestNew_97
   \   00000E18   4648               LDR.N    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   00000E1A   0068               LDR      R0,[R0, #+0]
   \   00000E1C   5FF0FF31           MOVS     R1,#-1
   \   00000E20   8842               CMP      R0,R1
   \   00000E22   06D1               BNE.N    ??SelfTestNew_97
    661                        CurIndex=UartID;//最後近來訊息先顯示一次
   \                     ??SelfTestNew_108:
   \   00000E24   4748               LDR.N    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000E26   ....               LDR.N    R1,??DataTable27  ;; UartID
   \   00000E28   0978               LDRB     R1,[R1, #+0]
   \   00000E2A   0160               STR      R1,[R0, #+0]
    662                        chg_flag=1;
   \   00000E2C   2248               LDR.N    R0,??SelfTestNew_5+0x18  ;; chg_flag
   \   00000E2E   0121               MOVS     R1,#+1
   \   00000E30   0170               STRB     R1,[R0, #+0]
    663                      }  
    664                    }  
    665                    for(kk=0,SramChkLen=0;kk<34;kk++)
   \                     ??SelfTestNew_97:
   \   00000E32   0020               MOVS     R0,#+0
   \   00000E34   0700               MOVS     R7,R0
   \   00000E36   6D48               LDR.N    R0,??SelfTestNew_5+0x14C  ;; SramChkLen
   \   00000E38   0021               MOVS     R1,#+0
   \   00000E3A   0160               STR      R1,[R0, #+0]
   \                     ??SelfTestNew_109:
   \   00000E3C   222F               CMP      R7,#+34
   \   00000E3E   0DDA               BGE.N    ??SelfTestNew_110
    666                      SramChkLen  = ( SramChkLen + TxtPage[kk].len ) & 0xFFFF ;
   \   00000E40   6A48               LDR.N    R0,??SelfTestNew_5+0x14C  ;; SramChkLen
   \   00000E42   0068               LDR      R0,[R0, #+0]
   \   00000E44   40F6BC71           MOVW     R1,#+4028
   \   00000E48   3F4A               LDR.N    R2,??SelfTestNew_5+0xA8  ;; TxtPage
   \   00000E4A   07FB0121           MLA      R1,R7,R1,R2
   \   00000E4E   8968               LDR      R1,[R1, #+8]
   \   00000E50   0818               ADDS     R0,R1,R0
   \   00000E52   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000E54   6549               LDR.N    R1,??SelfTestNew_5+0x14C  ;; SramChkLen
   \   00000E56   0860               STR      R0,[R1, #+0]
   \   00000E58   7F1C               ADDS     R7,R7,#+1
   \   00000E5A   EFE7               B.N      ??SelfTestNew_109
    667                      if ( chg_flag == 0 ){
   \                     ??SelfTestNew_110:
   \   00000E5C   1648               LDR.N    R0,??SelfTestNew_5+0x18  ;; chg_flag
   \   00000E5E   0078               LDRB     R0,[R0, #+0]
   \   00000E60   0028               CMP      R0,#+0
   \   00000E62   0FD1               BNE.N    ??SelfTestNew_111
    668                      	if ( PTopIndex != -1 )
   \   00000E64   3348               LDR.N    R0,??SelfTestNew_5+0x94  ;; PTopIndex
   \   00000E66   0068               LDR      R0,[R0, #+0]
   \   00000E68   5FF0FF31           MOVS     R1,#-1
   \   00000E6C   8842               CMP      R0,R1
   \   00000E6E   04D0               BEQ.N    ??SelfTestNew_112
    669                      	  CurIndex=PTopIndex;
   \   00000E70   3448               LDR.N    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000E72   3049               LDR.N    R1,??SelfTestNew_5+0x94  ;; PTopIndex
   \   00000E74   0968               LDR      R1,[R1, #+0]
   \   00000E76   0160               STR      R1,[R0, #+0]
   \   00000E78   07E0               B.N      ??SelfTestNew_113
    670                      	else    
    671                          CurIndex=TopIndex;              
   \                     ??SelfTestNew_112:
   \   00000E7A   3248               LDR.N    R0,??SelfTestNew_5+0xA4  ;; CurIndex
   \   00000E7C   2C49               LDR.N    R1,??SelfTestNew_5+0x90  ;; TopIndex
   \   00000E7E   0968               LDR      R1,[R1, #+0]
   \   00000E80   0160               STR      R1,[R0, #+0]
   \   00000E82   02E0               B.N      ??SelfTestNew_113
    672                      }else
    673                        chg_flag=0;  
   \                     ??SelfTestNew_111:
   \   00000E84   0C48               LDR.N    R0,??SelfTestNew_5+0x18  ;; chg_flag
   \   00000E86   0021               MOVS     R1,#+0
   \   00000E88   0170               STRB     R1,[R0, #+0]
    674                    FlashMemWrite(FlashMark,Mark,sizeof(Mark));
   \                     ??SelfTestNew_113:
   \   00000E8A   0B22               MOVS     R2,#+11
   \   00000E8C   5849               LDR.N    R1,??SelfTestNew_5+0x150  ;; `?<Constant "\\001\\001\\002\\003\\004\\005\\006\\a\\b\\t`
   \   00000E8E   5948               LDR.N    R0,??SelfTestNew_5+0x154  ;; FlashMark
   \   00000E90   ........           BL       FlashMemWrite
   \   00000E94   FFF7CBB9           B.W      ??SelfTestNew_12
    675                  }  
    676                } 
   \                     ??SelfTestNew_64:
   \   00000E98   0DB0               ADD      SP,SP,#+52
   \   00000E9A   BDE8F08F           POP      {R4-R11,PC}      ;; return
   \   00000E9E   00BF               Nop      
   \                     ??SelfTestNew_5:
   \   00000EA0   ........           DC32     LED_buffer
   \   00000EA4   ........           DC32     LED_bufferG
   \   00000EA8   ........           DC32     LED_change
   \   00000EAC   ........           DC32     type_flag
   \   00000EB0   ........           DC32     amm_flag
   \   00000EB4   ........           DC32     dmm_flag
   \   00000EB8   ........           DC32     chg_flag
   \   00000EBC   ........           DC32     mgn_flag
   \   00000EC0   ........           DC32     te_flag
   \   00000EC4   ........           DC32     pri_flag
   \   00000EC8   ........           DC32     primsg_flag
   \   00000ECC   ........           DC32     rlytm_flag
   \   00000ED0   ........           DC32     rly_counter
   \   00000ED4   ........           DC32     pri_bits
   \   00000ED8   ........           DC32     mail_bits
   \   00000EDC   ........           DC32     mdf_flag
   \   00000EE0   ........           DC32     priclr_flag
   \   00000EE4   ........           DC32     autoct_flag
   \   00000EE8   ........           DC32     pact_flag
   \   00000EEC   ........           DC32     pgc_flag
   \   00000EF0   ........           DC32     pricnt_flag
   \   00000EF4   ........           DC32     mgc_flag
   \   00000EF8   ........           DC32     mau_flag
   \   00000EFC   ........           DC32     Line2_Dly
   \   00000F00   ........           DC32     pcolor_flag
   \   00000F04   ........           DC32     msgcl_flag
   \   00000F08   ........           DC32     capcl_flag
   \   00000F0C   ........           DC32     autocl
   \   00000F10   ........           DC32     ask_flag
   \   00000F14   ........           DC32     ask_value
   \   00000F18   ........           DC32     LRCM_flag
   \   00000F1C   ........           DC32     LED2_char_Length
   \   00000F20   ........           DC32     tmhr_flag
   \   00000F24   ........           DC32     tm_strt
   \   00000F28   ........           DC32     TxtMode
   \   00000F2C   ........           DC32     RevTxtLen
   \   00000F30   ........           DC32     TopIndex
   \   00000F34   ........           DC32     PTopIndex
   \   00000F38   ........           DC32     pmau_flag
   \   00000F3C   ........           DC32     DftMsg
   \   00000F40   ........           DC32     RevTxtBuff
   \   00000F44   ........           DC32     CurIndex
   \   00000F48   ........           DC32     TxtPage
   \   00000F4C   ........           DC32     act_flag
   \   00000F50   ........           DC32     acc_flag
   \   00000F54   ........           DC32     timer_counter
   \   00000F58   ........           DC32     nml_timer
   \   00000F5C   ........           DC32     LastIndex
   \   00000F60   ........           DC32     PLastIndex
   \   00000F64   ........           DC32     GA911
   \   00000F68   ........           DC32     tsm_flag
   \   00000F6C   ........           DC32     HHmmSS
   \   00000F70   ........           DC32     dft_tm
   \   00000F74   ........           DC32     dtm_flag
   \   00000F78   ........           DC32     tmd_flag
   \   00000F7C   ........           DC32     Disp_status
   \   00000F80   ........           DC32     Rec_Timer_cnt
   \   00000F84   ........           DC32     RevBuffIndex
   \   00000F88   ........           DC32     gWRecLen
   \   00000F8C   ........           DC32     UartChkSum
   \   00000F90   ........           DC32     RevCommand
   \   00000F94   ........           DC32     CommandMode
   \   00000F98   ........           DC32     Cmd3Length
   \   00000F9C   ........           DC32     RevBuff
   \   00000FA0   ........           DC32     Cmd1Length
   \   00000FA4   ........           DC32     dbz_flag
   \   00000FA8   ........           DC32     ztm_flag
   \   00000FAC   ........           DC32     SYS_sec
   \   00000FB0   ........           DC32     MUS_timeout
   \   00000FB4   ........           DC32     LastTxtBuff
   \   00000FB8   ........           DC32     LastCmd3Len
   \   00000FBC   ........           DC32     UartDispMode
   \   00000FC0   ........           DC32     DispMode
   \   00000FC4   ........           DC32     Reserve
   \   00000FC8   ........           DC32     LEDFRM
   \   00000FCC   ........           DC32     LEDPage
   \   00000FD0   ........           DC32     Flash_Write_fun
   \   00000FD4   ........           DC32     Flash_Write
   \   00000FD8   ........           DC32     LEDPage1
   \   00000FDC   ........           DC32     LEDFRM + 1
   \   00000FE0   ........           DC32     PreFrameTable
   \   00000FE4   ........           DC32     BinChkSum
   \   00000FE8   ........           DC32     LED_ASCii_buffer
   \   00000FEC   ........           DC32     SramChkLen
   \   00000FF0   ........           DC32     `?<Constant "\\001\\001\\002\\003\\004\\005\\006\\a\\b\\t`
   \   00000FF4   ........           DC32     FlashMark
    677                //scroll_up_Out();                                	    
    678                //memset(LED_buffer.COM,'\0',sizeof(LED_buffer.COM));
    679                //LED_change = 1 ;
    680                //while( LED_change == 1 ); 
    681                //dly_ms(1000);  
    682              }
    683              // ------ Received complete then update end -------
    684            }
    685            //----- Loop display End -------
    686           }
    687          

   \                                 In section UpgradeROM, align 4, keep-with-next
    688          void UART_proNew(void)
    689          {
   \                     UART_proNew:
   \   00000000   2DE9F04F           PUSH     {R4-R11,LR}
   \   00000004   8DB0               SUB      SP,SP,#+52
    690           unsigned char value[20],ChkSum1=0,Status=0,tmp;
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   8DF80300           STRB     R0,[SP, #+3]
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   8DF80000           STRB     R0,[SP, #+0]
    691            unsigned short len,ChkSum=0,GetSum;
   \   00000012   0020               MOVS     R0,#+0
   \   00000014   ADF80A00           STRH     R0,[SP, #+10]
    692            unsigned int buflen;
    693            int i,ip,j,color;
    694            int complete=0,Command,CmdNum;  
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   0890               STR      R0,[SP, #+32]
    695            unsigned char Cmd1BufLen;
    696            unsigned char tm,yy,mm,yys,mms,hhs,mns,ofs;
    697            unsigned long lv;
    698            struct RTCState RTCBuf;
                                   ^
Warning[Pe177]: variable "RTCBuf" was declared but never referenced
    699            switch ( gWRecBuff[0] ) { //Get Command
   \   0000001C   DFF8C80D           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000020   0078               LDRB     R0,[R0, #+0]
   \   00000022   0228               CMP      R0,#+2
   \   00000024   07D0               BEQ.N    ??UART_proNew_1
   \   00000026   1628               CMP      R0,#+22
   \   00000028   02F0FC81           BEQ.W    ??UART_proNew_2
   \   0000002C   1A28               CMP      R0,#+26
   \   0000002E   02F0A281           BEQ.W    ??UART_proNew_3
   \   00000032   02F028BA           B.W      ??UART_proNew_4
    700              case STX:
    701                UartHtag=gWRecBuff[1];
   \                     ??UART_proNew_1:
   \   00000036   DFF8B00D           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   0000003A   4078               LDRB     R0,[R0, #+1]
   \   0000003C   DFF8AC1D           LDR.W    R1,??UART_proNew_0+0x4  ;; UartHtag
   \   00000040   0870               STRB     R0,[R1, #+0]
    702                ChkSum = UartChkSum;//include 2 bytes CS
   \   00000042   DFF8AC0D           LDR.W    R0,??UART_proNew_0+0x8  ;; UartChkSum
   \   00000046   0088               LDRH     R0,[R0, #+0]
   \   00000048   ADF80A00           STRH     R0,[SP, #+10]
    703                GetSum =( gWRecBuff[gWRecLen-2] << 8 ) | gWRecBuff[gWRecLen-1];//Get CheckSum
   \   0000004C   DFF8A40D           LDR.W    R0,??UART_proNew_0+0xC  ;; gWRecLen
   \   00000050   0068               LDR      R0,[R0, #+0]
   \   00000052   DFF8941D           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000056   4018               ADDS     R0,R0,R1
   \   00000058   10F8020C           LDRB     R0,[R0, #-2]
   \   0000005C   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005E   DFF8941D           LDR.W    R1,??UART_proNew_0+0xC  ;; gWRecLen
   \   00000062   0968               LDR      R1,[R1, #+0]
   \   00000064   DFF8802D           LDR.W    R2,??UART_proNew_0  ;; gWRecBuff
   \   00000068   8918               ADDS     R1,R1,R2
   \   0000006A   11F8011C           LDRB     R1,[R1, #-1]
   \   0000006E   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   00000072   8246               MOV      R10,R0
    704                GetSum =( GetSum + gWRecBuff[gWRecLen-2] ) & 0xFFFF;//Add CS1
   \   00000074   DFF87C0D           LDR.W    R0,??UART_proNew_0+0xC  ;; gWRecLen
   \   00000078   0068               LDR      R0,[R0, #+0]
   \   0000007A   DFF86C1D           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   0000007E   4018               ADDS     R0,R0,R1
   \   00000080   10F8020C           LDRB     R0,[R0, #-2]
   \   00000084   10EB0A0A           ADDS     R10,R0,R10
    705                GetSum =( GetSum + gWRecBuff[gWRecLen-1] ) & 0xFFFF;//Add CS2   
   \   00000088   DFF8680D           LDR.W    R0,??UART_proNew_0+0xC  ;; gWRecLen
   \   0000008C   0068               LDR      R0,[R0, #+0]
   \   0000008E   DFF8581D           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000092   4018               ADDS     R0,R0,R1
   \   00000094   10F8010C           LDRB     R0,[R0, #-1]
   \   00000098   10EB0A0A           ADDS     R10,R0,R10
    706                if (GetSum == ChkSum && gWRecBuff[2] <= (23+0x21)){ // && UartHtag==Htag){
   \   0000009C   BDF80A00           LDRH     R0,[SP, #+10]
   \   000000A0   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000A4   8245               CMP      R10,R0
   \   000000A6   19D1               BNE.N    ??UART_proNew_5
   \   000000A8   DFF83C0D           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000000AC   8078               LDRB     R0,[R0, #+2]
   \   000000AE   3928               CMP      R0,#+57
   \   000000B0   14D2               BCS.N    ??UART_proNew_5
    707                  value[0]=ACK;
   \   000000B2   0620               MOVS     R0,#+6
   \   000000B4   8DF80C00           STRB     R0,[SP, #+12]
    708                  value[1]=UartHtag;
   \   000000B8   DFF8300D           LDR.W    R0,??UART_proNew_0+0x4  ;; UartHtag
   \   000000BC   0078               LDRB     R0,[R0, #+0]
   \   000000BE   8DF80D00           STRB     R0,[SP, #+13]
    709                  value[2]=ETX;
   \   000000C2   0320               MOVS     R0,#+3
   \   000000C4   8DF80E00           STRB     R0,[SP, #+14]
    710                  Host_SendNext(value,3); //(Send ACK or NAK) and ETX
   \   000000C8   0321               MOVS     R1,#+3
   \   000000CA   03A8               ADD      R0,SP,#+12
   \   000000CC   ........           BL       Host_SendNext
    711                }else{
    712                  value[0]=NAK;
    713                  value[1]=UartHtag;
    714                  value[2]=ETX;
    715                  Host_SendNext(value,3); //(Send ACK or NAK) and ETX
    716                  return;
    717                } 
    718                if ( mgc_flag==1 )
   \   000000D0   DFF8240D           LDR.W    R0,??UART_proNew_0+0x10  ;; mgc_flag
   \   000000D4   0078               LDRB     R0,[R0, #+0]
   \   000000D6   0128               CMP      R0,#+1
   \   000000D8   16D1               BNE.N    ??UART_proNew_6
   \   000000DA   10E0               B.N      ??UART_proNew_7
   \                     ??UART_proNew_5:
   \   000000DC   1520               MOVS     R0,#+21
   \   000000DE   8DF80C00           STRB     R0,[SP, #+12]
   \   000000E2   DFF8080D           LDR.W    R0,??UART_proNew_0+0x4  ;; UartHtag
   \   000000E6   0078               LDRB     R0,[R0, #+0]
   \   000000E8   8DF80D00           STRB     R0,[SP, #+13]
   \   000000EC   0320               MOVS     R0,#+3
   \   000000EE   8DF80E00           STRB     R0,[SP, #+14]
   \   000000F2   0321               MOVS     R1,#+3
   \   000000F4   03A8               ADD      R0,SP,#+12
   \   000000F6   ........           BL       Host_SendNext
   \   000000FA   02F0C4B9           B.W      ??UART_proNew_4
    719                  UartID=0;
   \                     ??UART_proNew_7:
   \   000000FE   DFF8FC0C           LDR.W    R0,??UART_proNew_0+0x14  ;; UartID
   \   00000102   0021               MOVS     R1,#+0
   \   00000104   0170               STRB     R1,[R0, #+0]
   \   00000106   10E0               B.N      ??UART_proNew_8
    720                else if ( mgc_flag == 24 || mgc_flag == 25 )
   \                     ??UART_proNew_6:
   \   00000108   DFF8EC0C           LDR.W    R0,??UART_proNew_0+0x10  ;; mgc_flag
   \   0000010C   0078               LDRB     R0,[R0, #+0]
   \   0000010E   1828               CMP      R0,#+24
   \   00000110   04D0               BEQ.N    ??UART_proNew_9
   \   00000112   DFF8E40C           LDR.W    R0,??UART_proNew_0+0x10  ;; mgc_flag
   \   00000116   0078               LDRB     R0,[R0, #+0]
   \   00000118   1928               CMP      R0,#+25
   \   0000011A   06D1               BNE.N    ??UART_proNew_8
    721                  UartID=gWRecBuff[2] - 0x21; //ID
   \                     ??UART_proNew_9:
   \   0000011C   DFF8C80C           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000120   8078               LDRB     R0,[R0, #+2]
   \   00000122   2138               SUBS     R0,R0,#+33
   \   00000124   DFF8D41C           LDR.W    R1,??UART_proNew_0+0x14  ;; UartID
   \   00000128   0870               STRB     R0,[R1, #+0]
    722                if (gWRecBuff[3]=='b'){//binary
   \                     ??UART_proNew_8:
   \   0000012A   DFF8BC0C           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   0000012E   C078               LDRB     R0,[R0, #+3]
   \   00000130   6228               CMP      R0,#+98
   \   00000132   08D1               BNE.N    ??UART_proNew_10
    723                  CommandMode=1;
   \   00000134   DFF8C80C           LDR.W    R0,??UART_proNew_0+0x18  ;; CommandMode
   \   00000138   0121               MOVS     R1,#+1
   \   0000013A   0170               STRB     R1,[R0, #+0]
    724                  BinMix = 0;
   \   0000013C   DFF8C40C           LDR.W    R0,??UART_proNew_0+0x1C  ;; BinMix
   \   00000140   0021               MOVS     R1,#+0
   \   00000142   0170               STRB     R1,[R0, #+0]
   \   00000144   42E0               B.N      ??UART_proNew_11
    725                }else if (gWRecBuff[3]=='s'){ //String Binary mode
   \                     ??UART_proNew_10:
   \   00000146   DFF8A00C           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   0000014A   C078               LDRB     R0,[R0, #+3]
   \   0000014C   7328               CMP      R0,#+115
   \   0000014E   08D1               BNE.N    ??UART_proNew_12
    726                  CommandMode=1;
   \   00000150   DFF8AC0C           LDR.W    R0,??UART_proNew_0+0x18  ;; CommandMode
   \   00000154   0121               MOVS     R1,#+1
   \   00000156   0170               STRB     R1,[R0, #+0]
    727                  BinMix = 1;
   \   00000158   DFF8A80C           LDR.W    R0,??UART_proNew_0+0x1C  ;; BinMix
   \   0000015C   0121               MOVS     R1,#+1
   \   0000015E   0170               STRB     R1,[R0, #+0]
   \   00000160   34E0               B.N      ??UART_proNew_11
    728                }else if (gWRecBuff[3]=='m'){ //old normal mix mode
   \                     ??UART_proNew_12:
   \   00000162   DFF8840C           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000166   C078               LDRB     R0,[R0, #+3]
   \   00000168   6D28               CMP      R0,#+109
   \   0000016A   0CD1               BNE.N    ??UART_proNew_13
    729                  CommandMode=2; //old mix normal     
   \   0000016C   DFF8900C           LDR.W    R0,??UART_proNew_0+0x18  ;; CommandMode
   \   00000170   0221               MOVS     R1,#+2
   \   00000172   0170               STRB     R1,[R0, #+0]
    730                  UartLang=0; 
   \   00000174   DFF8900C           LDR.W    R0,??UART_proNew_0+0x20  ;; UartLang
   \   00000178   0021               MOVS     R1,#+0
   \   0000017A   0170               STRB     R1,[R0, #+0]
    731                  BinMix = 0;
   \   0000017C   DFF8840C           LDR.W    R0,??UART_proNew_0+0x1C  ;; BinMix
   \   00000180   0021               MOVS     R1,#+0
   \   00000182   0170               STRB     R1,[R0, #+0]
   \   00000184   22E0               B.N      ??UART_proNew_11
    732                }else if (gWRecBuff[3]=='r'){ //old russian mix mode             	          
   \                     ??UART_proNew_13:
   \   00000186   DFF8600C           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   0000018A   C078               LDRB     R0,[R0, #+3]
   \   0000018C   7228               CMP      R0,#+114
   \   0000018E   0CD1               BNE.N    ??UART_proNew_14
    733                  CommandMode=3; 
   \   00000190   DFF86C0C           LDR.W    R0,??UART_proNew_0+0x18  ;; CommandMode
   \   00000194   0321               MOVS     R1,#+3
   \   00000196   0170               STRB     R1,[R0, #+0]
    734                  UartLang=1; 
   \   00000198   DFF86C0C           LDR.W    R0,??UART_proNew_0+0x20  ;; UartLang
   \   0000019C   0121               MOVS     R1,#+1
   \   0000019E   0170               STRB     R1,[R0, #+0]
    735                  BinMix = 0;
   \   000001A0   DFF8600C           LDR.W    R0,??UART_proNew_0+0x1C  ;; BinMix
   \   000001A4   0021               MOVS     R1,#+0
   \   000001A6   0170               STRB     R1,[R0, #+0]
   \   000001A8   10E0               B.N      ??UART_proNew_11
    736                }else if (gWRecBuff[3]=='a'){ //new alpha           	          
   \                     ??UART_proNew_14:
   \   000001AA   DFF83C0C           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000001AE   C078               LDRB     R0,[R0, #+3]
   \   000001B0   6128               CMP      R0,#+97
   \   000001B2   0BD1               BNE.N    ??UART_proNew_11
    737                  CommandMode=3;   
   \   000001B4   DFF8480C           LDR.W    R0,??UART_proNew_0+0x18  ;; CommandMode
   \   000001B8   0321               MOVS     R1,#+3
   \   000001BA   0170               STRB     R1,[R0, #+0]
    738                  UartLang=0;
   \   000001BC   DFF8480C           LDR.W    R0,??UART_proNew_0+0x20  ;; UartLang
   \   000001C0   0021               MOVS     R1,#+0
   \   000001C2   0170               STRB     R1,[R0, #+0]
    739                  BinMix = 0;
   \   000001C4   DFF83C0C           LDR.W    R0,??UART_proNew_0+0x1C  ;; BinMix
   \   000001C8   0021               MOVS     R1,#+0
   \   000001CA   0170               STRB     R1,[R0, #+0]
    740                }   
    741                len=(gWRecBuff[8] << 8);
   \                     ??UART_proNew_11:
   \   000001CC   DFF8180C           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000001D0   007A               LDRB     R0,[R0, #+8]
   \   000001D2   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001D4   0002               LSLS     R0,R0,#+8
   \   000001D6   8146               MOV      R9,R0
    742                len |= gWRecBuff[9];//Get Data Length
   \   000001D8   DFF80C0C           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000001DC   407A               LDRB     R0,[R0, #+9]
   \   000001DE   50EA0909           ORRS     R9,R0,R9
    743                ip = 10 ;
   \   000001E2   0A20               MOVS     R0,#+10
   \   000001E4   0500               MOVS     R5,R0
    744          // Apha_Mode:Proc Begin      
    745                if (CommandMode!=1){ //Alpha Mode
   \   000001E6   DFF8180C           LDR.W    R0,??UART_proNew_0+0x18  ;; CommandMode
   \   000001EA   0078               LDRB     R0,[R0, #+0]
   \   000001EC   0128               CMP      R0,#+1
   \   000001EE   01F0E287           BEQ.W    ??UART_proNew_15
    746                	//******* 刪除右邊空白 or 控制碼 ************
    747          
    748                  for( i = ip+len-1 ; i >= ip ; i-- )
   \   000001F2   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000001F6   19EB0500           ADDS     R0,R9,R5
   \   000001FA   401E               SUBS     R0,R0,#+1
   \   000001FC   0400               MOVS     R4,R0
   \                     ??UART_proNew_16:
   \   000001FE   AC42               CMP      R4,R5
   \   00000200   06DB               BLT.N    ??UART_proNew_17
    749                    if ( gWRecBuff[i] > 0x20)
   \   00000202   DFF8E40B           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000206   205C               LDRB     R0,[R4, R0]
   \   00000208   2128               CMP      R0,#+33
   \   0000020A   01D2               BCS.N    ??UART_proNew_17
   \   0000020C   641E               SUBS     R4,R4,#+1
   \   0000020E   F6E7               B.N      ??UART_proNew_16
    750                      break;
    751                  gWRecBuff[i+1]='\0';
   \                     ??UART_proNew_17:
   \   00000210   DFF8D40B           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000214   2018               ADDS     R0,R4,R0
   \   00000216   0021               MOVS     R1,#+0
   \   00000218   4170               STRB     R1,[R0, #+1]
    752                  for( j = ip ; j <= i ; j++ ){
   \   0000021A   2E00               MOVS     R6,R5
   \                     ??UART_proNew_18:
   \   0000021C   B442               CMP      R4,R6
   \   0000021E   0ADB               BLT.N    ??UART_proNew_19
    753                  	if ( gWRecBuff[j] == '\0' )
   \   00000220   DFF8C40B           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000224   305C               LDRB     R0,[R6, R0]
   \   00000226   0028               CMP      R0,#+0
   \   00000228   03D1               BNE.N    ??UART_proNew_20
    754                  	  gWRecBuff[j]=0x20;
   \   0000022A   DFF8BC0B           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   0000022E   2021               MOVS     R1,#+32
   \   00000230   3154               STRB     R1,[R6, R0]
    755                  }
   \                     ??UART_proNew_20:
   \   00000232   761C               ADDS     R6,R6,#+1
   \   00000234   F2E7               B.N      ??UART_proNew_18
    756                  len=strlen((char *)&gWRecBuff[ip]);
   \                     ??UART_proNew_19:
   \   00000236   DFF8B00B           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   0000023A   2818               ADDS     R0,R5,R0
   \   0000023C   ........           BL       strlen
   \   00000240   8146               MOV      R9,R0
    757                  if ( gWRecBuff[10] == '?' &&  memcmp( &gWRecBuff[11],GACMD[0],5 ) == 0 ){ //ask command
   \   00000242   DFF8A40B           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000246   807A               LDRB     R0,[R0, #+10]
   \   00000248   3F28               CMP      R0,#+63
   \   0000024A   3AD1               BNE.N    ??UART_proNew_21
   \   0000024C   0522               MOVS     R2,#+5
   \   0000024E   DFF8BC1B           LDR.W    R1,??UART_proNew_0+0x24  ;; GACMD
   \   00000252   DFF8BC0B           LDR.W    R0,??UART_proNew_0+0x28  ;; gWRecBuff + 11
   \   00000256   ........           BL       memcmp
   \   0000025A   0028               CMP      R0,#+0
   \   0000025C   31D1               BNE.N    ??UART_proNew_21
    758                    CmdNum=sizeof(GACMD)/sizeof(GACMD[0]);
   \   0000025E   2A20               MOVS     R0,#+42
   \   00000260   0A90               STR      R0,[SP, #+40]
    759                    for( i = 0 ; i < CmdNum  ; i++ ){
   \   00000262   0020               MOVS     R0,#+0
   \   00000264   0400               MOVS     R4,R0
   \                     ??UART_proNew_22:
   \   00000266   0A98               LDR      R0,[SP, #+40]
   \   00000268   8442               CMP      R4,R0
   \   0000026A   2ADA               BGE.N    ??UART_proNew_21
    760                      if ( strcmp( (char *)&gWRecBuff[11],GACMD[i]) == 0 ){               
   \   0000026C   1420               MOVS     R0,#+20
   \   0000026E   DFF89C1B           LDR.W    R1,??UART_proNew_0+0x24  ;; GACMD
   \   00000272   04FB0011           MLA      R1,R4,R0,R1
   \   00000276   DFF8980B           LDR.W    R0,??UART_proNew_0+0x28  ;; gWRecBuff + 11
   \   0000027A   ........           BL       strcmp
   \   0000027E   0028               CMP      R0,#+0
   \   00000280   1DD1               BNE.N    ??UART_proNew_23
    761                          if ( i == CmdNum - 1 ){//Ask Mode Off
   \   00000282   0A98               LDR      R0,[SP, #+40]
   \   00000284   401E               SUBS     R0,R0,#+1
   \   00000286   8442               CMP      R4,R0
   \   00000288   08D1               BNE.N    ??UART_proNew_24
    762                            ask_flag=0;
   \   0000028A   DFF8880B           LDR.W    R0,??UART_proNew_0+0x2C  ;; ask_flag
   \   0000028E   0021               MOVS     R1,#+0
   \   00000290   0170               STRB     R1,[R0, #+0]
    763                            ask_value=0;
   \   00000292   DFF8840B           LDR.W    R0,??UART_proNew_0+0x30  ;; ask_value
   \   00000296   0021               MOVS     R1,#+0
   \   00000298   0170               STRB     R1,[R0, #+0]
   \   0000029A   06E0               B.N      ??UART_proNew_25
    764                          }
    765                          else {
    766                            ask_flag=1;
   \                     ??UART_proNew_24:
   \   0000029C   DFF8740B           LDR.W    R0,??UART_proNew_0+0x2C  ;; ask_flag
   \   000002A0   0121               MOVS     R1,#+1
   \   000002A2   0170               STRB     R1,[R0, #+0]
    767                            ask_value=i;
   \   000002A4   DFF8700B           LDR.W    R0,??UART_proNew_0+0x30  ;; ask_value
   \   000002A8   0470               STRB     R4,[R0, #+0]
    768                          }
    769                          UartDelFlg = 3;//do nothing
   \                     ??UART_proNew_25:
   \   000002AA   DFF8700B           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   000002AE   0321               MOVS     R1,#+3
   \   000002B0   0170               STRB     R1,[R0, #+0]
    770                          RecProcessing = 2;//Inform self_test_1 ------- AP006                
   \   000002B2   DFF86C0B           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   000002B6   0221               MOVS     R1,#+2
   \   000002B8   0170               STRB     R1,[R0, #+0]
    771                	        return;
   \   000002BA   02F0E4B8           B.W      ??UART_proNew_4
    772                      }
    773                    }          
   \                     ??UART_proNew_23:
   \   000002BE   641C               ADDS     R4,R4,#+1
   \   000002C0   D1E7               B.N      ??UART_proNew_22
    774                  }
    775                  //***** Priority message clear判斷 ***************************************************//        
    776                  if (len == 5 && priclr_flag == 1 ){//check with clear
   \                     ??UART_proNew_21:
   \   000002C2   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000002C6   B9F1050F           CMP      R9,#+5
   \   000002CA   40F08380           BNE.W    ??UART_proNew_26
   \   000002CE   DFF8540B           LDR.W    R0,??UART_proNew_0+0x3C  ;; priclr_flag
   \   000002D2   0078               LDRB     R0,[R0, #+0]
   \   000002D4   0128               CMP      R0,#+1
   \   000002D6   7DD1               BNE.N    ??UART_proNew_26
    777                	  memcpy(TmpTxtBuff,&gWRecBuff[ip],5);
   \   000002D8   0522               MOVS     R2,#+5
   \   000002DA   DFF80C0B           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000002DE   2918               ADDS     R1,R5,R0
   \   000002E0   DFF8440B           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   000002E4   ........           BL       memcpy
    778                	  for(i=0;i<5;i++){
   \   000002E8   0020               MOVS     R0,#+0
   \   000002EA   0400               MOVS     R4,R0
   \                     ??UART_proNew_27:
   \   000002EC   052C               CMP      R4,#+5
   \   000002EE   12DA               BGE.N    ??UART_proNew_28
    779                	    if (TmpTxtBuff[i] >= 'A' && TmpTxtBuff[i]<= 'Z')
   \   000002F0   DFF8340B           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   000002F4   205C               LDRB     R0,[R4, R0]
   \   000002F6   4128               CMP      R0,#+65
   \   000002F8   0BD3               BCC.N    ??UART_proNew_29
   \   000002FA   DFF82C0B           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   000002FE   205C               LDRB     R0,[R4, R0]
   \   00000300   5B28               CMP      R0,#+91
   \   00000302   06D2               BCS.N    ??UART_proNew_29
    780                	      TmpTxtBuff[i]=TmpTxtBuff[i]+32;//to lower case
   \   00000304   DFF8200B           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   00000308   205C               LDRB     R0,[R4, R0]
   \   0000030A   2030               ADDS     R0,R0,#+32
   \   0000030C   DFF8181B           LDR.W    R1,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   00000310   6054               STRB     R0,[R4, R1]
    781                	  }  
   \                     ??UART_proNew_29:
   \   00000312   641C               ADDS     R4,R4,#+1
   \   00000314   EAE7               B.N      ??UART_proNew_27
    782                	  if ( memcmp(TmpTxtBuff,GACLR,5)== 0 ){//"clear" priority message clear
   \                     ??UART_proNew_28:
   \   00000316   0522               MOVS     R2,#+5
   \   00000318   DFF8101B           LDR.W    R1,??UART_proNew_0+0x44  ;; GACLR
   \   0000031C   DFF8080B           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   00000320   ........           BL       memcmp
   \   00000324   0028               CMP      R0,#+0
   \   00000326   55D1               BNE.N    ??UART_proNew_26
    783                      primsg_flag=0;
   \   00000328   DFF8040B           LDR.W    R0,??UART_proNew_0+0x48  ;; primsg_flag
   \   0000032C   0021               MOVS     R1,#+0
   \   0000032E   0170               STRB     R1,[R0, #+0]
    784                      PTopIndex = -1;
   \   00000330   DFF8000B           LDR.W    R0,??UART_proNew_0+0x4C  ;; PTopIndex
   \   00000334   5FF0FF31           MOVS     R1,#-1
   \   00000338   0160               STR      R1,[R0, #+0]
    785                      PLastIndex = -1;
   \   0000033A   DFF8FC0A           LDR.W    R0,??UART_proNew_0+0x50  ;; PLastIndex
   \   0000033E   5FF0FF31           MOVS     R1,#-1
   \   00000342   0160               STR      R1,[R0, #+0]
    786                      for(i=24;i<34;i++){
   \   00000344   1820               MOVS     R0,#+24
   \   00000346   0400               MOVS     R4,R0
   \                     ??UART_proNew_30:
   \   00000348   222C               CMP      R4,#+34
   \   0000034A   1BDA               BGE.N    ??UART_proNew_31
    787                        TxtPage[i].next=-1; 
   \   0000034C   40F6BC70           MOVW     R0,#+4028
   \   00000350   DFF8E81A           LDR.W    R1,??UART_proNew_0+0x54  ;; TxtPage
   \   00000354   04FB0010           MLA      R0,R4,R0,R1
   \   00000358   5FF0FF31           MOVS     R1,#-1
   \   0000035C   4160               STR      R1,[R0, #+4]
    788                        TxtPage[i].prev=-1; 
   \   0000035E   40F6BC70           MOVW     R0,#+4028
   \   00000362   DFF8D81A           LDR.W    R1,??UART_proNew_0+0x54  ;; TxtPage
   \   00000366   04FB0010           MLA      R0,R4,R0,R1
   \   0000036A   5FF0FF31           MOVS     R1,#-1
   \   0000036E   0160               STR      R1,[R0, #+0]
    789                        TxtPage[i].len=0; 
   \   00000370   40F6BC70           MOVW     R0,#+4028
   \   00000374   DFF8C41A           LDR.W    R1,??UART_proNew_0+0x54  ;; TxtPage
   \   00000378   04FB0010           MLA      R0,R4,R0,R1
   \   0000037C   0021               MOVS     R1,#+0
   \   0000037E   8160               STR      R1,[R0, #+8]
    790                      }               
   \   00000380   641C               ADDS     R4,R4,#+1
   \   00000382   E1E7               B.N      ??UART_proNew_30
    791                      CurIndex =TopIndex;
   \                     ??UART_proNew_31:
   \   00000384   DFF8B80A           LDR.W    R0,??UART_proNew_0+0x58  ;; CurIndex
   \   00000388   DFF8B81A           LDR.W    R1,??UART_proNew_0+0x5C  ;; TopIndex
   \   0000038C   0968               LDR      R1,[R1, #+0]
   \   0000038E   0160               STR      R1,[R0, #+0]
    792                      if ( TopIndex == -1 ){
   \   00000390   DFF8B00A           LDR.W    R0,??UART_proNew_0+0x5C  ;; TopIndex
   \   00000394   0068               LDR      R0,[R0, #+0]
   \   00000396   5FF0FF31           MOVS     R1,#-1
   \   0000039A   8842               CMP      R0,R1
   \   0000039C   0CD1               BNE.N    ??UART_proNew_32
    793                        strcpy((char *)RevTxtBuff,DftMsg);
   \   0000039E   DFF8A81A           LDR.W    R1,??UART_proNew_0+0x60  ;; DftMsg
   \   000003A2   DFF8A80A           LDR.W    R0,??UART_proNew_0+0x64  ;; RevTxtBuff
   \   000003A6   ........           BL       strcpy
    794                        RevTxtLen=strlen((char *)RevTxtBuff);
   \   000003AA   DFF8A00A           LDR.W    R0,??UART_proNew_0+0x64  ;; RevTxtBuff
   \   000003AE   ........           BL       strlen
   \   000003B2   DFF89C1A           LDR.W    R1,??UART_proNew_0+0x68  ;; RevTxtLen
   \   000003B6   0880               STRH     R0,[R1, #+0]
    795                      } 
    796                      pmau_flag = 0;     	  	
   \                     ??UART_proNew_32:
   \   000003B8   DFF8980A           LDR.W    R0,??UART_proNew_0+0x6C  ;; pmau_flag
   \   000003BC   0021               MOVS     R1,#+0
   \   000003BE   0170               STRB     R1,[R0, #+0]
    797                      UartDelFlg = 3;//do nothing
   \   000003C0   DFF8580A           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   000003C4   0321               MOVS     R1,#+3
   \   000003C6   0170               STRB     R1,[R0, #+0]
    798                      RecProcessing=2;//Inform self_test_1 ------- AP006
   \   000003C8   DFF8540A           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   000003CC   0221               MOVS     R1,#+2
   \   000003CE   0170               STRB     R1,[R0, #+0]
    799                	    return;      		  
   \   000003D0   02F059B8           B.W      ??UART_proNew_4
    800                    }	 
    801                  }                    
    802                  //***** reset 優先權最高所以先判斷 ***************************************************//
    803                  if (len > 5 && crc_flag == 1 ){//check with reset
   \                     ??UART_proNew_26:
   \   000003D4   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000003D8   B9F1060F           CMP      R9,#+6
   \   000003DC   C0F09880           BCC.W    ??UART_proNew_33
   \   000003E0   DFF8740A           LDR.W    R0,??UART_proNew_0+0x70  ;; crc_flag
   \   000003E4   0078               LDRB     R0,[R0, #+0]
   \   000003E6   0128               CMP      R0,#+1
   \   000003E8   40F09280           BNE.W    ??UART_proNew_33
    804                	  memcpy(TmpTxtBuff,&gWRecBuff[ip],6);
   \   000003EC   0622               MOVS     R2,#+6
   \   000003EE   DFF8F809           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000003F2   2918               ADDS     R1,R5,R0
   \   000003F4   DFF8300A           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   000003F8   ........           BL       memcpy
    805                	  for(i=0;i<6;i++){
   \   000003FC   0020               MOVS     R0,#+0
   \   000003FE   0400               MOVS     R4,R0
   \                     ??UART_proNew_34:
   \   00000400   062C               CMP      R4,#+6
   \   00000402   12DA               BGE.N    ??UART_proNew_35
    806                	    if (TmpTxtBuff[i] >= 'A' && TmpTxtBuff[i]<= 'Z')
   \   00000404   DFF8200A           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   00000408   205C               LDRB     R0,[R4, R0]
   \   0000040A   4128               CMP      R0,#+65
   \   0000040C   0BD3               BCC.N    ??UART_proNew_36
   \   0000040E   DFF8180A           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   00000412   205C               LDRB     R0,[R4, R0]
   \   00000414   5B28               CMP      R0,#+91
   \   00000416   06D2               BCS.N    ??UART_proNew_36
    807                	      TmpTxtBuff[i]=TmpTxtBuff[i]+32;//to lower case
   \   00000418   DFF80C0A           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   0000041C   205C               LDRB     R0,[R4, R0]
   \   0000041E   2030               ADDS     R0,R0,#+32
   \   00000420   DFF8041A           LDR.W    R1,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   00000424   6054               STRB     R0,[R4, R1]
    808                	  }  
   \                     ??UART_proNew_36:
   \   00000426   641C               ADDS     R4,R4,#+1
   \   00000428   EAE7               B.N      ??UART_proNew_34
    809                	  if ( memcmp(TmpTxtBuff,GARST,6)== 0 ){//"reset " check header with reset
   \                     ??UART_proNew_35:
   \   0000042A   0622               MOVS     R2,#+6
   \   0000042C   DFF82C1A           LDR.W    R1,??UART_proNew_0+0x74  ;; GARST
   \   00000430   DFF8F409           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   00000434   ........           BL       memcmp
   \   00000438   0028               CMP      R0,#+0
   \   0000043A   1ED1               BNE.N    ??UART_proNew_37
    810                	    memcpy(TmpTxtBuff,&gWRecBuff[ip+6],len-6);
   \   0000043C   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000440   B9F10602           SUBS     R2,R9,#+6
   \   00000444   DFF8A009           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000448   2818               ADDS     R0,R5,R0
   \   0000044A   811D               ADDS     R1,R0,#+6
   \   0000044C   DFF8D809           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   00000450   ........           BL       memcpy
    811                	    TmpTxtBuff[len-6]='\0';
   \   00000454   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000458   DFF8CC09           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   0000045C   19EB0000           ADDS     R0,R9,R0
   \   00000460   0021               MOVS     R1,#+0
   \   00000462   00F8061C           STRB     R1,[R0, #-6]
    812                	    UartDelFlg = 6;//reset
   \   00000466   DFF8B409           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   0000046A   0621               MOVS     R1,#+6
   \   0000046C   0170               STRB     R1,[R0, #+0]
    813                      RecProcessing=2;//Inform self_test_1 ------- AP006
   \   0000046E   DFF8B009           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000472   0221               MOVS     R1,#+2
   \   00000474   0170               STRB     R1,[R0, #+0]
    814                	    return;      		  
   \   00000476   02F006B8           B.W      ??UART_proNew_4
    815                    }	
    816                	  memcpy(TmpTxtBuff,&gWRecBuff[ip+len-6],6);//check trailer with reset 
   \                     ??UART_proNew_37:
   \   0000047A   0622               MOVS     R2,#+6
   \   0000047C   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000480   19EB0500           ADDS     R0,R9,R5
   \   00000484   DFF86019           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000488   4018               ADDS     R0,R0,R1
   \   0000048A   811F               SUBS     R1,R0,#+6
   \   0000048C   DFF89809           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   00000490   ........           BL       memcpy
    817                	  for(i=0;i<6;i++){
   \   00000494   0020               MOVS     R0,#+0
   \   00000496   0400               MOVS     R4,R0
   \                     ??UART_proNew_38:
   \   00000498   062C               CMP      R4,#+6
   \   0000049A   12DA               BGE.N    ??UART_proNew_39
    818                	    if (TmpTxtBuff[i] >= 'A' && TmpTxtBuff[i]<= 'Z')
   \   0000049C   DFF88809           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   000004A0   205C               LDRB     R0,[R4, R0]
   \   000004A2   4128               CMP      R0,#+65
   \   000004A4   0BD3               BCC.N    ??UART_proNew_40
   \   000004A6   DFF88009           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   000004AA   205C               LDRB     R0,[R4, R0]
   \   000004AC   5B28               CMP      R0,#+91
   \   000004AE   06D2               BCS.N    ??UART_proNew_40
    819                	      TmpTxtBuff[i]=TmpTxtBuff[i]+32;//to lower case
   \   000004B0   DFF87409           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   000004B4   205C               LDRB     R0,[R4, R0]
   \   000004B6   2030               ADDS     R0,R0,#+32
   \   000004B8   DFF86C19           LDR.W    R1,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   000004BC   6054               STRB     R0,[R4, R1]
    820                	  }  
   \                     ??UART_proNew_40:
   \   000004BE   641C               ADDS     R4,R4,#+1
   \   000004C0   EAE7               B.N      ??UART_proNew_38
    821                	  if ( memcmp(TmpTxtBuff,GARST1,6)== 0 ){//" reset"
   \                     ??UART_proNew_39:
   \   000004C2   0622               MOVS     R2,#+6
   \   000004C4   DFF89819           LDR.W    R1,??UART_proNew_0+0x78  ;; GARST1
   \   000004C8   DFF85C09           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   000004CC   ........           BL       memcmp
   \   000004D0   0028               CMP      R0,#+0
   \   000004D2   1DD1               BNE.N    ??UART_proNew_33
    822                	    memcpy(TmpTxtBuff,&gWRecBuff[ip],len-6);
   \   000004D4   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000004D8   B9F10602           SUBS     R2,R9,#+6
   \   000004DC   DFF80809           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000004E0   2918               ADDS     R1,R5,R0
   \   000004E2   DFF84409           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   000004E6   ........           BL       memcpy
    823                	    TmpTxtBuff[len-6]='\0';
   \   000004EA   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000004EE   DFF83809           LDR.W    R0,??UART_proNew_0+0x40  ;; TmpTxtBuff
   \   000004F2   19EB0000           ADDS     R0,R9,R0
   \   000004F6   0021               MOVS     R1,#+0
   \   000004F8   00F8061C           STRB     R1,[R0, #-6]
    824                	    UartDelFlg = 6;//reset 
   \   000004FC   DFF81C09           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000500   0621               MOVS     R1,#+6
   \   00000502   0170               STRB     R1,[R0, #+0]
    825                      RecProcessing=2;//Inform self_test_1 ------- AP006
   \   00000504   DFF81809           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000508   0221               MOVS     R1,#+2
   \   0000050A   0170               STRB     R1,[R0, #+0]
    826                	    return;          		  
   \   0000050C   01F0BBBF           B.W      ??UART_proNew_4
    827                    }
    828                  }   
    829                  //***********************************************************************************              
    830                  if ( len == 0){//delete node 
   \                     ??UART_proNew_33:
   \   00000510   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000514   B9F1000F           CMP      R9,#+0
   \   00000518   09D1               BNE.N    ??UART_proNew_41
    831                    UartDelFlg=1;
   \   0000051A   DFF80009           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   0000051E   0121               MOVS     R1,#+1
   \   00000520   0170               STRB     R1,[R0, #+0]
    832                    RecProcessing=2;//Inform self_test_1 ------- AP006
   \   00000522   DFF8FC08           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000526   0221               MOVS     R1,#+2
   \   00000528   0170               STRB     R1,[R0, #+0]
    833                    return;        
   \   0000052A   01F0ACBF           B.W      ??UART_proNew_4
    834                  //***********************************************************************************
    835                  //**************************** Two Line Command *************************************
    836                  #if LEDType >= 70  
    837                	}else if (memcmp(&gWRecBuff[ip],GATYPE,10)==0){//"GALEDTYPE="
   \                     ??UART_proNew_41:
   \   0000052E   0A22               MOVS     R2,#+10
   \   00000530   DFF83019           LDR.W    R1,??UART_proNew_0+0x7C  ;; GATYPE
   \   00000534   DFF8B008           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000538   2818               ADDS     R0,R5,R0
   \   0000053A   ........           BL       memcmp
   \   0000053E   0028               CMP      R0,#+0
   \   00000540   6CD1               BNE.N    ??UART_proNew_42
    838                    for(i=0;i<3;i++)
   \   00000542   0020               MOVS     R0,#+0
   \   00000544   0400               MOVS     R4,R0
   \                     ??UART_proNew_43:
   \   00000546   032C               CMP      R4,#+3
   \   00000548   47DA               BGE.N    ??UART_proNew_44
    839                      if (  strlen((char *)&gWRecBuff[ip+10]) != 1 || ( gWRecBuff[ip+10] != '1' ) && ( gWRecBuff[ip+10] != '2' ) & ( gWRecBuff[ip+10] != 'A' ) && ( gWRecBuff[ip+10] != 'a' ) & ( gWRecBuff[ip+10] != 'B' ) && ( gWRecBuff[ip+10] != 'b' )){
   \   0000054A   DFF89C08           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   0000054E   2818               ADDS     R0,R5,R0
   \   00000550   0A30               ADDS     R0,R0,#+10
   \   00000552   ........           BL       strlen
   \   00000556   0128               CMP      R0,#+1
   \   00000558   33D1               BNE.N    ??UART_proNew_45
   \   0000055A   DFF88C08           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   0000055E   2818               ADDS     R0,R5,R0
   \   00000560   807A               LDRB     R0,[R0, #+10]
   \   00000562   3128               CMP      R0,#+49
   \   00000564   37D0               BEQ.N    ??UART_proNew_46
   \   00000566   DFF88008           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   0000056A   2818               ADDS     R0,R5,R0
   \   0000056C   807A               LDRB     R0,[R0, #+10]
   \   0000056E   3228               CMP      R0,#+50
   \   00000570   01D0               BEQ.N    ??UART_proNew_47
   \   00000572   0120               MOVS     R0,#+1
   \   00000574   00E0               B.N      ??UART_proNew_48
   \                     ??UART_proNew_47:
   \   00000576   0020               MOVS     R0,#+0
   \                     ??UART_proNew_48:
   \   00000578   DFF86C18           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   0000057C   6918               ADDS     R1,R5,R1
   \   0000057E   897A               LDRB     R1,[R1, #+10]
   \   00000580   4129               CMP      R1,#+65
   \   00000582   01D0               BEQ.N    ??UART_proNew_49
   \   00000584   0121               MOVS     R1,#+1
   \   00000586   00E0               B.N      ??UART_proNew_50
   \                     ??UART_proNew_49:
   \   00000588   0021               MOVS     R1,#+0
   \                     ??UART_proNew_50:
   \   0000058A   0842               TST      R0,R1
   \   0000058C   23D0               BEQ.N    ??UART_proNew_46
   \   0000058E   DFF85808           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000592   2818               ADDS     R0,R5,R0
   \   00000594   807A               LDRB     R0,[R0, #+10]
   \   00000596   6128               CMP      R0,#+97
   \   00000598   01D0               BEQ.N    ??UART_proNew_51
   \   0000059A   0120               MOVS     R0,#+1
   \   0000059C   00E0               B.N      ??UART_proNew_52
   \                     ??UART_proNew_51:
   \   0000059E   0020               MOVS     R0,#+0
   \                     ??UART_proNew_52:
   \   000005A0   DFF84418           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   000005A4   6918               ADDS     R1,R5,R1
   \   000005A6   897A               LDRB     R1,[R1, #+10]
   \   000005A8   4229               CMP      R1,#+66
   \   000005AA   01D0               BEQ.N    ??UART_proNew_53
   \   000005AC   0121               MOVS     R1,#+1
   \   000005AE   00E0               B.N      ??UART_proNew_54
   \                     ??UART_proNew_53:
   \   000005B0   0021               MOVS     R1,#+0
   \                     ??UART_proNew_54:
   \   000005B2   0842               TST      R0,R1
   \   000005B4   0FD0               BEQ.N    ??UART_proNew_46
   \   000005B6   DFF83008           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000005BA   2818               ADDS     R0,R5,R0
   \   000005BC   807A               LDRB     R0,[R0, #+10]
   \   000005BE   6228               CMP      R0,#+98
   \   000005C0   09D0               BEQ.N    ??UART_proNew_46
    840                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_45:
   \   000005C2   DFF85C08           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   000005C6   0321               MOVS     R1,#+3
   \   000005C8   0170               STRB     R1,[R0, #+0]
    841                        Disp_status = 0x2A ; // display error
   \   000005CA   DFF89C08           LDR.W    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   000005CE   2A21               MOVS     R1,#+42
   \   000005D0   0170               STRB     R1,[R0, #+0]
    842                        return;
   \   000005D2   01F058BF           B.W      ??UART_proNew_4
    843                      } 
   \                     ??UART_proNew_46:
   \   000005D6   641C               ADDS     R4,R4,#+1
   \   000005D8   B5E7               B.N      ??UART_proNew_43
    844                    type_flag=gWRecBuff[ip+10];
   \                     ??UART_proNew_44:
   \   000005DA   DFF80C08           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000005DE   2818               ADDS     R0,R5,R0
   \   000005E0   807A               LDRB     R0,[R0, #+10]
   \   000005E2   DFF88818           LDR.W    R1,??UART_proNew_0+0x84  ;; type_flag
   \   000005E6   0870               STRB     R0,[R1, #+0]
    845                    LedDly=0;//one line default
   \   000005E8   DFF88408           LDR.W    R0,??UART_proNew_0+0x88  ;; LedDly
   \   000005EC   0021               MOVS     R1,#+0
   \   000005EE   0160               STR      R1,[R0, #+0]
    846                    Line2_Dly=2;//two lines default
   \   000005F0   DFF88008           LDR.W    R0,??UART_proNew_0+0x8C  ;; Line2_Dly
   \   000005F4   0221               MOVS     R1,#+2
   \   000005F6   0160               STR      R1,[R0, #+0]
    847                    //if ( type_flag == '1' )
    848                    //	amm_flag=0;
    849                    //else if ( type_flag == '2' )
    850                    //  amm_flag=3;
    851                    amm_flag=0;
   \   000005F8   DFF87C08           LDR.W    R0,??UART_proNew_0+0x90  ;; amm_flag
   \   000005FC   0021               MOVS     R1,#+0
   \   000005FE   0170               STRB     R1,[R0, #+0]
    852                    dmm_flag=0;  
   \   00000600   DFF87808           LDR.W    R0,??UART_proNew_0+0x94  ;; dmm_flag
   \   00000604   0021               MOVS     R1,#+0
   \   00000606   0170               STRB     R1,[R0, #+0]
    853                    UartDelFlg = 3;//do nothing
   \   00000608   DFF81008           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   0000060C   0321               MOVS     R1,#+3
   \   0000060E   0170               STRB     R1,[R0, #+0]
    854                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000610   DFF80C08           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000614   0221               MOVS     R1,#+2
   \   00000616   0170               STRB     R1,[R0, #+0]
    855                	  return;
   \   00000618   01F035BF           B.W      ??UART_proNew_4
    856                  }else if (memcmp(&gWRecBuff[ip],GAAPPM,10)==0){//"GALEDAPPM="  
   \                     ??UART_proNew_42:
   \   0000061C   0A22               MOVS     R2,#+10
   \   0000061E   DFF86018           LDR.W    R1,??UART_proNew_0+0x98  ;; GAAPPM
   \   00000622   DFF8C407           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000626   2818               ADDS     R0,R5,R0
   \   00000628   ........           BL       memcmp
   \   0000062C   0028               CMP      R0,#+0
   \   0000062E   3BD1               BNE.N    ??UART_proNew_55
    857                    if ( ( gWRecBuff[ip+10] > '8' ) || ( gWRecBuff[ip+10] < '0') || strlen((char *)&gWRecBuff[ip+10]) != 1 ){
   \   00000630   DFF8B407           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000634   2818               ADDS     R0,R5,R0
   \   00000636   807A               LDRB     R0,[R0, #+10]
   \   00000638   3928               CMP      R0,#+57
   \   0000063A   0DD2               BCS.N    ??UART_proNew_56
   \   0000063C   DFF8A807           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000640   2818               ADDS     R0,R5,R0
   \   00000642   807A               LDRB     R0,[R0, #+10]
   \   00000644   3028               CMP      R0,#+48
   \   00000646   07D3               BCC.N    ??UART_proNew_56
   \   00000648   DFF89C07           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   0000064C   2818               ADDS     R0,R5,R0
   \   0000064E   0A30               ADDS     R0,R0,#+10
   \   00000650   ........           BL       strlen
   \   00000654   0128               CMP      R0,#+1
   \   00000656   09D0               BEQ.N    ??UART_proNew_57
    858                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_56:
   \   00000658   DFF8C407           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   0000065C   0321               MOVS     R1,#+3
   \   0000065E   0170               STRB     R1,[R0, #+0]
    859                        Disp_status = 0x2A ; // display error
   \   00000660   DFF80408           LDR.W    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   00000664   2A21               MOVS     R1,#+42
   \   00000666   0170               STRB     R1,[R0, #+0]
    860                        return;
   \   00000668   01F00DBF           B.W      ??UART_proNew_4
    861                    } 
    862                    amm_flag =gWRecBuff[ip+10]-'0';
   \                     ??UART_proNew_57:
   \   0000066C   DFF87807           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000670   2818               ADDS     R0,R5,R0
   \   00000672   807A               LDRB     R0,[R0, #+10]
   \   00000674   3038               SUBS     R0,R0,#+48
   \   00000676   DFF80018           LDR.W    R1,??UART_proNew_0+0x90  ;; amm_flag
   \   0000067A   0870               STRB     R0,[R1, #+0]
    863                    if ( amm_flag > 9 ) amm_flag -= 7;          
   \   0000067C   DFF8F807           LDR.W    R0,??UART_proNew_0+0x90  ;; amm_flag
   \   00000680   0078               LDRB     R0,[R0, #+0]
   \   00000682   0A28               CMP      R0,#+10
   \   00000684   06D3               BCC.N    ??UART_proNew_58
   \   00000686   DFF8F007           LDR.W    R0,??UART_proNew_0+0x90  ;; amm_flag
   \   0000068A   0078               LDRB     R0,[R0, #+0]
   \   0000068C   C01F               SUBS     R0,R0,#+7
   \   0000068E   DFF8E817           LDR.W    R1,??UART_proNew_0+0x90  ;; amm_flag
   \   00000692   0870               STRB     R0,[R1, #+0]
    864                    UartDelFlg = 3;
   \                     ??UART_proNew_58:
   \   00000694   DFF88407           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000698   0321               MOVS     R1,#+3
   \   0000069A   0170               STRB     R1,[R0, #+0]
    865                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   0000069C   DFF88007           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   000006A0   0221               MOVS     R1,#+2
   \   000006A2   0170               STRB     R1,[R0, #+0]
    866                	  return; 
   \   000006A4   01F0EFBE           B.W      ??UART_proNew_4
    867                  }else if (memcmp(&gWRecBuff[ip],GADISM,10)==0){//"GALEDDISM="  
   \                     ??UART_proNew_55:
   \   000006A8   0A22               MOVS     R2,#+10
   \   000006AA   DFF8D817           LDR.W    R1,??UART_proNew_0+0x9C  ;; GADISM
   \   000006AE   DFF83807           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000006B2   2818               ADDS     R0,R5,R0
   \   000006B4   ........           BL       memcmp
   \   000006B8   0028               CMP      R0,#+0
   \   000006BA   47D1               BNE.N    ??UART_proNew_59
    868                    if ( ( ( gWRecBuff[ip+10] > '9' ) || ( gWRecBuff[ip+10] < '0' ) ) && ( ( gWRecBuff[ip+10] > 'B') || (gWRecBuff[ip+10] < 'A') ) || strlen((char *)&gWRecBuff[ip+10]) != 1 ){
   \   000006BC   DFF82807           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000006C0   2818               ADDS     R0,R5,R0
   \   000006C2   807A               LDRB     R0,[R0, #+10]
   \   000006C4   3A28               CMP      R0,#+58
   \   000006C6   05D2               BCS.N    ??UART_proNew_60
   \   000006C8   DFF81C07           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000006CC   2818               ADDS     R0,R5,R0
   \   000006CE   807A               LDRB     R0,[R0, #+10]
   \   000006D0   3028               CMP      R0,#+48
   \   000006D2   0BD2               BCS.N    ??UART_proNew_61
   \                     ??UART_proNew_60:
   \   000006D4   DFF81007           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000006D8   2818               ADDS     R0,R5,R0
   \   000006DA   807A               LDRB     R0,[R0, #+10]
   \   000006DC   4328               CMP      R0,#+67
   \   000006DE   0DD2               BCS.N    ??UART_proNew_62
   \   000006E0   DFF80407           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000006E4   2818               ADDS     R0,R5,R0
   \   000006E6   807A               LDRB     R0,[R0, #+10]
   \   000006E8   4128               CMP      R0,#+65
   \   000006EA   07D3               BCC.N    ??UART_proNew_62
   \                     ??UART_proNew_61:
   \   000006EC   DFF8F806           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000006F0   2818               ADDS     R0,R5,R0
   \   000006F2   0A30               ADDS     R0,R0,#+10
   \   000006F4   ........           BL       strlen
   \   000006F8   0128               CMP      R0,#+1
   \   000006FA   09D0               BEQ.N    ??UART_proNew_63
    869                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_62:
   \   000006FC   DFF82007           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000700   0321               MOVS     R1,#+3
   \   00000702   0170               STRB     R1,[R0, #+0]
    870                        Disp_status = 0x2A ; // display error
   \   00000704   DFF86007           LDR.W    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   00000708   2A21               MOVS     R1,#+42
   \   0000070A   0170               STRB     R1,[R0, #+0]
    871                        return;
   \   0000070C   01F0BBBE           B.W      ??UART_proNew_4
    872                    } 
    873                    dmm_flag =gWRecBuff[ip+10]-'0';
   \                     ??UART_proNew_63:
   \   00000710   DFF8D406           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000714   2818               ADDS     R0,R5,R0
   \   00000716   807A               LDRB     R0,[R0, #+10]
   \   00000718   3038               SUBS     R0,R0,#+48
   \   0000071A   DFF86017           LDR.W    R1,??UART_proNew_0+0x94  ;; dmm_flag
   \   0000071E   0870               STRB     R0,[R1, #+0]
    874                    if ( dmm_flag > 9 ) dmm_flag -= 7;          
   \   00000720   DFF85807           LDR.W    R0,??UART_proNew_0+0x94  ;; dmm_flag
   \   00000724   0078               LDRB     R0,[R0, #+0]
   \   00000726   0A28               CMP      R0,#+10
   \   00000728   06D3               BCC.N    ??UART_proNew_64
   \   0000072A   DFF85007           LDR.W    R0,??UART_proNew_0+0x94  ;; dmm_flag
   \   0000072E   0078               LDRB     R0,[R0, #+0]
   \   00000730   C01F               SUBS     R0,R0,#+7
   \   00000732   DFF84817           LDR.W    R1,??UART_proNew_0+0x94  ;; dmm_flag
   \   00000736   0870               STRB     R0,[R1, #+0]
    875                    UartDelFlg = 3;
   \                     ??UART_proNew_64:
   \   00000738   DFF8E006           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   0000073C   0321               MOVS     R1,#+3
   \   0000073E   0170               STRB     R1,[R0, #+0]
    876                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000740   DFF8DC06           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000744   0221               MOVS     R1,#+2
   \   00000746   0170               STRB     R1,[R0, #+0]
    877                	  return;  
   \   00000748   01F09DBE           B.W      ??UART_proNew_4
    878                  #endif       	      	       	        	          
    879                  //*************************************************************************************************************************************** 
    880                  //************************************************ Priority Message Command *************************************************************
    881                  #if LEDType == 51 ||  LEDType == 71  
    882                  }else if (memcmp(&gWRecBuff[ip],GAPRIM,10)==0){//"GALEDPRIM=" 
   \                     ??UART_proNew_59:
   \   0000074C   0A22               MOVS     R2,#+10
   \   0000074E   DFF83817           LDR.W    R1,??UART_proNew_0+0xA0  ;; GAPRIM
   \   00000752   DFF89406           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000756   2818               ADDS     R0,R5,R0
   \   00000758   ........           BL       memcmp
   \   0000075C   0028               CMP      R0,#+0
   \   0000075E   2FD1               BNE.N    ??UART_proNew_65
    883                    if ( gWRecBuff[ip+10] > '4' ||  gWRecBuff[ip+10] < '0' || strlen((char *)&gWRecBuff[ip+10]) != 1 ){
   \   00000760   DFF88406           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000764   2818               ADDS     R0,R5,R0
   \   00000766   807A               LDRB     R0,[R0, #+10]
   \   00000768   3528               CMP      R0,#+53
   \   0000076A   0DD2               BCS.N    ??UART_proNew_66
   \   0000076C   DFF87806           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000770   2818               ADDS     R0,R5,R0
   \   00000772   807A               LDRB     R0,[R0, #+10]
   \   00000774   3028               CMP      R0,#+48
   \   00000776   07D3               BCC.N    ??UART_proNew_66
   \   00000778   DFF86C06           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   0000077C   2818               ADDS     R0,R5,R0
   \   0000077E   0A30               ADDS     R0,R0,#+10
   \   00000780   ........           BL       strlen
   \   00000784   0128               CMP      R0,#+1
   \   00000786   09D0               BEQ.N    ??UART_proNew_67
    884                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_66:
   \   00000788   DFF89406           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   0000078C   0321               MOVS     R1,#+3
   \   0000078E   0170               STRB     R1,[R0, #+0]
    885                        Disp_status = 0x2A ; // display error
   \   00000790   DFF8D406           LDR.W    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   00000794   2A21               MOVS     R1,#+42
   \   00000796   0170               STRB     R1,[R0, #+0]
    886                        return;
   \   00000798   01F075BE           B.W      ??UART_proNew_4
    887                    } 
    888                    pri_flag =gWRecBuff[ip+10]-'0';
   \                     ??UART_proNew_67:
   \   0000079C   DFF84806           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000007A0   2818               ADDS     R0,R5,R0
   \   000007A2   807A               LDRB     R0,[R0, #+10]
   \   000007A4   3038               SUBS     R0,R0,#+48
   \   000007A6   DFF8E416           LDR.W    R1,??UART_proNew_0+0xA4  ;; pri_flag
   \   000007AA   0870               STRB     R0,[R1, #+0]
    889                    UartDelFlg = 2;//Del All
   \   000007AC   DFF86C06           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   000007B0   0221               MOVS     R1,#+2
   \   000007B2   0170               STRB     R1,[R0, #+0]
    890                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   000007B4   DFF86806           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   000007B8   0221               MOVS     R1,#+2
   \   000007BA   0170               STRB     R1,[R0, #+0]
    891                	  return;
   \   000007BC   01F063BE           B.W      ??UART_proNew_4
    892                	}else if (memcmp(&gWRecBuff[ip],GARLYTM,11)==0){//"GALEDRLYTM="
   \                     ??UART_proNew_65:
   \   000007C0   0B22               MOVS     R2,#+11
   \   000007C2   DFF8CC16           LDR.W    R1,??UART_proNew_0+0xA8  ;; GARLYTM
   \   000007C6   DFF82006           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000007CA   2818               ADDS     R0,R5,R0
   \   000007CC   ........           BL       memcmp
   \   000007D0   0028               CMP      R0,#+0
   \   000007D2   46D1               BNE.N    ??UART_proNew_68
    893                    for(i=0;i<3;i++)
   \   000007D4   0020               MOVS     R0,#+0
   \   000007D6   0400               MOVS     R4,R0
   \                     ??UART_proNew_69:
   \   000007D8   032C               CMP      R4,#+3
   \   000007DA   21DA               BGE.N    ??UART_proNew_70
    894                      if ( ( gWRecBuff[ip+11+i] > '9' ) || ( gWRecBuff[ip+11+i] < '0' ) || strlen((char *)&gWRecBuff[ip+11]) != 3 ){
   \   000007DC   6019               ADDS     R0,R4,R5
   \   000007DE   DFF80816           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   000007E2   4018               ADDS     R0,R0,R1
   \   000007E4   C07A               LDRB     R0,[R0, #+11]
   \   000007E6   3A28               CMP      R0,#+58
   \   000007E8   0ED2               BCS.N    ??UART_proNew_71
   \   000007EA   6019               ADDS     R0,R4,R5
   \   000007EC   DFF8F815           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   000007F0   4018               ADDS     R0,R0,R1
   \   000007F2   C07A               LDRB     R0,[R0, #+11]
   \   000007F4   3028               CMP      R0,#+48
   \   000007F6   07D3               BCC.N    ??UART_proNew_71
   \   000007F8   DFF8EC05           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000007FC   2818               ADDS     R0,R5,R0
   \   000007FE   0B30               ADDS     R0,R0,#+11
   \   00000800   ........           BL       strlen
   \   00000804   0328               CMP      R0,#+3
   \   00000806   09D0               BEQ.N    ??UART_proNew_72
    895                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_71:
   \   00000808   DFF81406           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   0000080C   0321               MOVS     R1,#+3
   \   0000080E   0170               STRB     R1,[R0, #+0]
    896                        Disp_status = 0x2A ; // display error
   \   00000810   DFF85406           LDR.W    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   00000814   2A21               MOVS     R1,#+42
   \   00000816   0170               STRB     R1,[R0, #+0]
    897                        return;
   \   00000818   01F035BE           B.W      ??UART_proNew_4
    898                      } 
   \                     ??UART_proNew_72:
   \   0000081C   641C               ADDS     R4,R4,#+1
   \   0000081E   DBE7               B.N      ??UART_proNew_69
    899                    rlytm_flag=(gWRecBuff[ip+11]-'0')*100+(gWRecBuff[ip+12]-'0')*10+gWRecBuff[ip+13]-'0';
   \                     ??UART_proNew_70:
   \   00000820   DFF8C405           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000824   2818               ADDS     R0,R5,R0
   \   00000826   C07A               LDRB     R0,[R0, #+11]
   \   00000828   6421               MOVS     R1,#+100
   \   0000082A   DFF8BC25           LDR.W    R2,??UART_proNew_0  ;; gWRecBuff
   \   0000082E   AA18               ADDS     R2,R5,R2
   \   00000830   127B               LDRB     R2,[R2, #+12]
   \   00000832   0A23               MOVS     R3,#+10
   \   00000834   02FB03F2           MUL      R2,R2,R3
   \   00000838   00FB0120           MLA      R0,R0,R1,R2
   \   0000083C   DFF8A815           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000840   6918               ADDS     R1,R5,R1
   \   00000842   497B               LDRB     R1,[R1, #+13]
   \   00000844   0818               ADDS     R0,R1,R0
   \   00000846   3030               ADDS     R0,R0,#+48
   \   00000848   DFF84816           LDR.W    R1,??UART_proNew_0+0xAC  ;; rlytm_flag
   \   0000084C   0870               STRB     R0,[R1, #+0]
    900                    UartDelFlg = 3;//do nothing
   \   0000084E   DFF8CC05           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000852   0321               MOVS     R1,#+3
   \   00000854   0170               STRB     R1,[R0, #+0]
    901                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000856   DFF8C805           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   0000085A   0221               MOVS     R1,#+2
   \   0000085C   0170               STRB     R1,[R0, #+0]
    902                	  return;
   \   0000085E   01F012BE           B.W      ??UART_proNew_4
    903                  }else if (memcmp(&gWRecBuff[ip],GAPRICAP,12)==0){//"GALEDPRICAP="
   \                     ??UART_proNew_68:
   \   00000862   0C22               MOVS     R2,#+12
   \   00000864   DFF83016           LDR.W    R1,??UART_proNew_0+0xB0  ;; GAPRICAP
   \   00000868   DFF87C05           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   0000086C   2818               ADDS     R0,R5,R0
   \   0000086E   ........           BL       memcmp
   \   00000872   0028               CMP      R0,#+0
   \   00000874   68D1               BNE.N    ??UART_proNew_73
    904                    for(i=0;i<6;i++){
   \   00000876   0020               MOVS     R0,#+0
   \   00000878   0400               MOVS     R4,R0
   \                     ??UART_proNew_74:
   \   0000087A   062C               CMP      R4,#+6
   \   0000087C   2FDA               BGE.N    ??UART_proNew_75
    905                      if ( ( gWRecBuff[ip+12+i] > '9' ||  gWRecBuff[ip+12+i] < '0' ) && ( gWRecBuff[ip+12+i] > 'F' || gWRecBuff[ip+12+i] < 'A') || strlen((char *)&gWRecBuff[ip+12]) != 6 ){
   \   0000087E   6019               ADDS     R0,R4,R5
   \   00000880   DFF86415           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000884   4018               ADDS     R0,R0,R1
   \   00000886   007B               LDRB     R0,[R0, #+12]
   \   00000888   3A28               CMP      R0,#+58
   \   0000088A   06D2               BCS.N    ??UART_proNew_76
   \   0000088C   6019               ADDS     R0,R4,R5
   \   0000088E   DFF85815           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000892   4018               ADDS     R0,R0,R1
   \   00000894   007B               LDRB     R0,[R0, #+12]
   \   00000896   3028               CMP      R0,#+48
   \   00000898   0DD2               BCS.N    ??UART_proNew_77
   \                     ??UART_proNew_76:
   \   0000089A   6019               ADDS     R0,R4,R5
   \   0000089C   DFF84815           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   000008A0   4018               ADDS     R0,R0,R1
   \   000008A2   007B               LDRB     R0,[R0, #+12]
   \   000008A4   4728               CMP      R0,#+71
   \   000008A6   0ED2               BCS.N    ??UART_proNew_78
   \   000008A8   6019               ADDS     R0,R4,R5
   \   000008AA   DFF83C15           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   000008AE   4018               ADDS     R0,R0,R1
   \   000008B0   007B               LDRB     R0,[R0, #+12]
   \   000008B2   4128               CMP      R0,#+65
   \   000008B4   07D3               BCC.N    ??UART_proNew_78
   \                     ??UART_proNew_77:
   \   000008B6   DFF83005           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000008BA   2818               ADDS     R0,R5,R0
   \   000008BC   0C30               ADDS     R0,R0,#+12
   \   000008BE   ........           BL       strlen
   \   000008C2   0628               CMP      R0,#+6
   \   000008C4   09D0               BEQ.N    ??UART_proNew_79
    906                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_78:
   \   000008C6   DFF85805           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   000008CA   0321               MOVS     R1,#+3
   \   000008CC   0170               STRB     R1,[R0, #+0]
    907                        Disp_status = 0x2A ; // display error
   \   000008CE   DFF89805           LDR.W    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   000008D2   2A21               MOVS     R1,#+42
   \   000008D4   0170               STRB     R1,[R0, #+0]
    908                        return;
   \   000008D6   01F0D6BD           B.W      ??UART_proNew_4
    909                      }
    910                    }
   \                     ??UART_proNew_79:
   \   000008DA   641C               ADDS     R4,R4,#+1
   \   000008DC   CDE7               B.N      ??UART_proNew_74
    911                    for(i=0,pri_bits=0 ; i < 6 ; i++ ){
   \                     ??UART_proNew_75:
   \   000008DE   0020               MOVS     R0,#+0
   \   000008E0   0400               MOVS     R4,R0
   \   000008E2   DFF8B805           LDR.W    R0,??UART_proNew_0+0xB4  ;; pri_bits
   \   000008E6   0021               MOVS     R1,#+0
   \   000008E8   0160               STR      R1,[R0, #+0]
   \                     ??UART_proNew_80:
   \   000008EA   062C               CMP      R4,#+6
   \   000008EC   1BDA               BGE.N    ??UART_proNew_81
    912                      pri_bits = pri_bits << 4;
   \   000008EE   DFF8AC05           LDR.W    R0,??UART_proNew_0+0xB4  ;; pri_bits
   \   000008F2   0068               LDR      R0,[R0, #+0]
   \   000008F4   0001               LSLS     R0,R0,#+4
   \   000008F6   DFF8A415           LDR.W    R1,??UART_proNew_0+0xB4  ;; pri_bits
   \   000008FA   0860               STR      R0,[R1, #+0]
    913                      tm = gWRecBuff[ip+12+i]-'0';
   \   000008FC   6019               ADDS     R0,R4,R5
   \   000008FE   DFF8E814           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000902   4018               ADDS     R0,R0,R1
   \   00000904   007B               LDRB     R0,[R0, #+12]
   \   00000906   3038               SUBS     R0,R0,#+48
   \   00000908   0700               MOVS     R7,R0
    914                      if ( tm > 9 ) tm -= 7;                 
   \   0000090A   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000090C   0A2F               CMP      R7,#+10
   \   0000090E   00D3               BCC.N    ??UART_proNew_82
   \   00000910   FF1F               SUBS     R7,R7,#+7
    915                      pri_bits += tm;
   \                     ??UART_proNew_82:
   \   00000912   DFF88805           LDR.W    R0,??UART_proNew_0+0xB4  ;; pri_bits
   \   00000916   0068               LDR      R0,[R0, #+0]
   \   00000918   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000091A   3818               ADDS     R0,R7,R0
   \   0000091C   DFF87C15           LDR.W    R1,??UART_proNew_0+0xB4  ;; pri_bits
   \   00000920   0860               STR      R0,[R1, #+0]
    916                    }  
   \   00000922   641C               ADDS     R4,R4,#+1
   \   00000924   E1E7               B.N      ??UART_proNew_80
    917                    pri_bits = pri_bits << 8;
   \                     ??UART_proNew_81:
   \   00000926   DFF87405           LDR.W    R0,??UART_proNew_0+0xB4  ;; pri_bits
   \   0000092A   0068               LDR      R0,[R0, #+0]
   \   0000092C   0002               LSLS     R0,R0,#+8
   \   0000092E   DFF86C15           LDR.W    R1,??UART_proNew_0+0xB4  ;; pri_bits
   \   00000932   0860               STR      R0,[R1, #+0]
    918                    UartDelFlg=2;//Delete All
   \   00000934   DFF8E404           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000938   0221               MOVS     R1,#+2
   \   0000093A   0170               STRB     R1,[R0, #+0]
    919                    RecProcessing=2;//Inform self_test_1 ------- AP006
   \   0000093C   DFF8E004           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000940   0221               MOVS     R1,#+2
   \   00000942   0170               STRB     R1,[R0, #+0]
    920                    return;
   \   00000944   01F09FBD           B.W      ??UART_proNew_4
    921                  }else if (memcmp(&gWRecBuff[ip],GAMAILCAP,11)==0){//"GALEDMDCAP="
   \                     ??UART_proNew_73:
   \   00000948   0B22               MOVS     R2,#+11
   \   0000094A   DFF85415           LDR.W    R1,??UART_proNew_0+0xB8  ;; GAMAILCAP
   \   0000094E   DFF89804           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000952   2818               ADDS     R0,R5,R0
   \   00000954   ........           BL       memcmp
   \   00000958   0028               CMP      R0,#+0
   \   0000095A   40F09580           BNE.W    ??UART_proNew_83
    922                    for(i=0;i<6;i++){
   \   0000095E   0020               MOVS     R0,#+0
   \   00000960   0400               MOVS     R4,R0
   \                     ??UART_proNew_84:
   \   00000962   062C               CMP      R4,#+6
   \   00000964   2FDA               BGE.N    ??UART_proNew_85
    923                      if ( ( gWRecBuff[ip+11+i] > '9' ||  gWRecBuff[ip+11+i] < '0' ) && ( gWRecBuff[ip+11+i] > 'F' || gWRecBuff[ip+11+i] < 'A') || strlen((char *)&gWRecBuff[ip+11]) != 6 ){
   \   00000966   6019               ADDS     R0,R4,R5
   \   00000968   DFF87C14           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   0000096C   4018               ADDS     R0,R0,R1
   \   0000096E   C07A               LDRB     R0,[R0, #+11]
   \   00000970   3A28               CMP      R0,#+58
   \   00000972   06D2               BCS.N    ??UART_proNew_86
   \   00000974   6019               ADDS     R0,R4,R5
   \   00000976   DFF87014           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   0000097A   4018               ADDS     R0,R0,R1
   \   0000097C   C07A               LDRB     R0,[R0, #+11]
   \   0000097E   3028               CMP      R0,#+48
   \   00000980   0DD2               BCS.N    ??UART_proNew_87
   \                     ??UART_proNew_86:
   \   00000982   6019               ADDS     R0,R4,R5
   \   00000984   DFF86014           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000988   4018               ADDS     R0,R0,R1
   \   0000098A   C07A               LDRB     R0,[R0, #+11]
   \   0000098C   4728               CMP      R0,#+71
   \   0000098E   0ED2               BCS.N    ??UART_proNew_88
   \   00000990   6019               ADDS     R0,R4,R5
   \   00000992   DFF85414           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000996   4018               ADDS     R0,R0,R1
   \   00000998   C07A               LDRB     R0,[R0, #+11]
   \   0000099A   4128               CMP      R0,#+65
   \   0000099C   07D3               BCC.N    ??UART_proNew_88
   \                     ??UART_proNew_87:
   \   0000099E   DFF84804           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   000009A2   2818               ADDS     R0,R5,R0
   \   000009A4   0B30               ADDS     R0,R0,#+11
   \   000009A6   ........           BL       strlen
   \   000009AA   0628               CMP      R0,#+6
   \   000009AC   09D0               BEQ.N    ??UART_proNew_89
    924                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_88:
   \   000009AE   DFF87004           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   000009B2   0321               MOVS     R1,#+3
   \   000009B4   0170               STRB     R1,[R0, #+0]
    925                        Disp_status = 0x2A ; // display error
   \   000009B6   DFF8B004           LDR.W    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   000009BA   2A21               MOVS     R1,#+42
   \   000009BC   0170               STRB     R1,[R0, #+0]
    926                        return;
   \   000009BE   01F062BD           B.W      ??UART_proNew_4
    927                      }
    928                    }
   \                     ??UART_proNew_89:
   \   000009C2   641C               ADDS     R4,R4,#+1
   \   000009C4   CDE7               B.N      ??UART_proNew_84
    929                    for(i=0,lv=0 ; i < 6 ; i++ ){
   \                     ??UART_proNew_85:
   \   000009C6   0020               MOVS     R0,#+0
   \   000009C8   0400               MOVS     R4,R0
   \   000009CA   0020               MOVS     R0,#+0
   \   000009CC   8046               MOV      R8,R0
   \                     ??UART_proNew_90:
   \   000009CE   062C               CMP      R4,#+6
   \   000009D0   11DA               BGE.N    ??UART_proNew_91
    930                      lv = lv << 4;
   \   000009D2   5FEA0818           LSLS     R8,R8,#+4
    931                      tm = gWRecBuff[ip+11+i]-'0';
   \   000009D6   6019               ADDS     R0,R4,R5
   \   000009D8   DFF80C14           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   000009DC   4018               ADDS     R0,R0,R1
   \   000009DE   C07A               LDRB     R0,[R0, #+11]
   \   000009E0   3038               SUBS     R0,R0,#+48
   \   000009E2   0700               MOVS     R7,R0
    932                      if ( tm > 9 ) tm -= 7;                 
   \   000009E4   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000009E6   0A2F               CMP      R7,#+10
   \   000009E8   00D3               BCC.N    ??UART_proNew_92
   \   000009EA   FF1F               SUBS     R7,R7,#+7
    933                      lv += tm;
   \                     ??UART_proNew_92:
   \   000009EC   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000009EE   17EB0808           ADDS     R8,R7,R8
    934                    }
   \   000009F2   641C               ADDS     R4,R4,#+1
   \   000009F4   EBE7               B.N      ??UART_proNew_90
    935                    lv = lv << 8;
   \                     ??UART_proNew_91:
   \   000009F6   5FEA0828           LSLS     R8,R8,#+8
    936                    if ( maildrop_count(lv) >= autoct_flag ){
   \   000009FA   4046               MOV      R0,R8
   \   000009FC   ........           BL       maildrop_count
   \   00000A00   DFF8A014           LDR.W    R1,??UART_proNew_0+0xBC  ;; autoct_flag
   \   00000A04   0978               LDRB     R1,[R1, #+0]
   \   00000A06   8842               CMP      R0,R1
   \   00000A08   09DB               BLT.N    ??UART_proNew_93
    937                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   00000A0A   DFF81404           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000A0E   0321               MOVS     R1,#+3
   \   00000A10   0170               STRB     R1,[R0, #+0]
    938                        Disp_status = 0x2A ; // display error
   \   00000A12   DFF85404           LDR.W    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   00000A16   2A21               MOVS     R1,#+42
   \   00000A18   0170               STRB     R1,[R0, #+0]
    939                        return;          	
   \   00000A1A   01F034BD           B.W      ??UART_proNew_4
    940                    }	          
    941                    for(i=0,mail_bits=0 ; i < 6 ; i++ ){
   \                     ??UART_proNew_93:
   \   00000A1E   0020               MOVS     R0,#+0
   \   00000A20   0400               MOVS     R4,R0
   \   00000A22   DFF88404           LDR.W    R0,??UART_proNew_0+0xC0  ;; mail_bits
   \   00000A26   0021               MOVS     R1,#+0
   \   00000A28   0160               STR      R1,[R0, #+0]
   \                     ??UART_proNew_94:
   \   00000A2A   062C               CMP      R4,#+6
   \   00000A2C   1BDA               BGE.N    ??UART_proNew_95
    942                      mail_bits = mail_bits << 4;
   \   00000A2E   DFF87804           LDR.W    R0,??UART_proNew_0+0xC0  ;; mail_bits
   \   00000A32   0068               LDR      R0,[R0, #+0]
   \   00000A34   0001               LSLS     R0,R0,#+4
   \   00000A36   DFF87014           LDR.W    R1,??UART_proNew_0+0xC0  ;; mail_bits
   \   00000A3A   0860               STR      R0,[R1, #+0]
    943                      tm = gWRecBuff[ip+11+i]-'0';
   \   00000A3C   6019               ADDS     R0,R4,R5
   \   00000A3E   DFF8A813           LDR.W    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000A42   4018               ADDS     R0,R0,R1
   \   00000A44   C07A               LDRB     R0,[R0, #+11]
   \   00000A46   3038               SUBS     R0,R0,#+48
   \   00000A48   0700               MOVS     R7,R0
    944                      if ( tm > 9 ) tm -= 7;                 
   \   00000A4A   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000A4C   0A2F               CMP      R7,#+10
   \   00000A4E   00D3               BCC.N    ??UART_proNew_96
   \   00000A50   FF1F               SUBS     R7,R7,#+7
    945                      mail_bits += tm;
   \                     ??UART_proNew_96:
   \   00000A52   DFF85404           LDR.W    R0,??UART_proNew_0+0xC0  ;; mail_bits
   \   00000A56   0068               LDR      R0,[R0, #+0]
   \   00000A58   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000A5A   3818               ADDS     R0,R7,R0
   \   00000A5C   DFF84814           LDR.W    R1,??UART_proNew_0+0xC0  ;; mail_bits
   \   00000A60   0860               STR      R0,[R1, #+0]
    946                    }  
   \   00000A62   641C               ADDS     R4,R4,#+1
   \   00000A64   E1E7               B.N      ??UART_proNew_94
    947                    mail_bits = mail_bits << 8;
   \                     ??UART_proNew_95:
   \   00000A66   DFF84004           LDR.W    R0,??UART_proNew_0+0xC0  ;; mail_bits
   \   00000A6A   0068               LDR      R0,[R0, #+0]
   \   00000A6C   0002               LSLS     R0,R0,#+8
   \   00000A6E   DFF83814           LDR.W    R1,??UART_proNew_0+0xC0  ;; mail_bits
   \   00000A72   0860               STR      R0,[R1, #+0]
    948                    UartDelFlg=2;//Delete All
   \   00000A74   DFF8A403           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000A78   0221               MOVS     R1,#+2
   \   00000A7A   0170               STRB     R1,[R0, #+0]
    949                    RecProcessing=2;//Inform self_test_1 ------- AP006
   \   00000A7C   DFF8A003           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000A80   0221               MOVS     R1,#+2
   \   00000A82   0170               STRB     R1,[R0, #+0]
    950                    return;
   \   00000A84   01F0FFBC           B.W      ??UART_proNew_4
    951                  }else if (strcmp((char *)&gWRecBuff[ip],GAMDFON)==0){//"GALEDMDTOOF=ON"
   \                     ??UART_proNew_83:
   \   00000A88   DFF82014           LDR.W    R1,??UART_proNew_0+0xC4  ;; GAMDFON
   \   00000A8C   DFF85803           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000A90   2818               ADDS     R0,R5,R0
   \   00000A92   ........           BL       strcmp
   \   00000A96   0028               CMP      R0,#+0
   \   00000A98   0DD1               BNE.N    ??UART_proNew_97
    952                    mdf_flag = 1;
   \   00000A9A   DFF81404           LDR.W    R0,??UART_proNew_0+0xC8  ;; mdf_flag
   \   00000A9E   0121               MOVS     R1,#+1
   \   00000AA0   0170               STRB     R1,[R0, #+0]
    953                    UartDelFlg = 3;//do nothing
   \   00000AA2   DFF87803           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000AA6   0321               MOVS     R1,#+3
   \   00000AA8   0170               STRB     R1,[R0, #+0]
    954                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000AAA   DFF87403           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000AAE   0221               MOVS     R1,#+2
   \   00000AB0   0170               STRB     R1,[R0, #+0]
    955                	  return;
   \   00000AB2   01F0E8BC           B.W      ??UART_proNew_4
    956                  }else if (strcmp((char *)&gWRecBuff[ip],GAMDFOFF)==0){//"GALEDMDTOOF=OFF"
   \                     ??UART_proNew_97:
   \   00000AB6   DFF8FC13           LDR.W    R1,??UART_proNew_0+0xCC  ;; GAMDFOFF
   \   00000ABA   DFF82C03           LDR.W    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000ABE   2818               ADDS     R0,R5,R0
   \   00000AC0   ........           BL       strcmp
   \   00000AC4   0028               CMP      R0,#+0
   \   00000AC6   0DD1               BNE.N    ??UART_proNew_98
    957                    mdf_flag = 0;
   \   00000AC8   DFF8E403           LDR.W    R0,??UART_proNew_0+0xC8  ;; mdf_flag
   \   00000ACC   0021               MOVS     R1,#+0
   \   00000ACE   0170               STRB     R1,[R0, #+0]
    958                    UartDelFlg = 3;//do nothing
   \   00000AD0   DFF84803           LDR.W    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000AD4   0321               MOVS     R1,#+3
   \   00000AD6   0170               STRB     R1,[R0, #+0]
    959                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000AD8   DFF84403           LDR.W    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000ADC   0221               MOVS     R1,#+2
   \   00000ADE   0170               STRB     R1,[R0, #+0]
    960                	  return;  
   \   00000AE0   01F0D1BC           B.W      ??UART_proNew_4
    961                  }else if (memcmp(&gWRecBuff[ip],GAPRICT,11)==0){//GALEDPRICT=
   \                     ??UART_proNew_98:
   \   00000AE4   0B22               MOVS     R2,#+11
   \   00000AE6   DFF8D013           LDR.W    R1,??UART_proNew_0+0xD0  ;; GAPRICT
   \   00000AEA   BF48               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000AEC   2818               ADDS     R0,R5,R0
   \   00000AEE   ........           BL       memcmp
   \   00000AF2   0028               CMP      R0,#+0
   \   00000AF4   2CD1               BNE.N    ??UART_proNew_99
    962                    if ( ( gWRecBuff[ip+11] > '5' ) || ( gWRecBuff[ip+11] < '1' ) || strlen((char *)&gWRecBuff[ip+11]) != 1 ){
   \   00000AF6   BC48               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000AF8   2818               ADDS     R0,R5,R0
   \   00000AFA   C07A               LDRB     R0,[R0, #+11]
   \   00000AFC   3628               CMP      R0,#+54
   \   00000AFE   0BD2               BCS.N    ??UART_proNew_100
   \   00000B00   B948               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000B02   2818               ADDS     R0,R5,R0
   \   00000B04   C07A               LDRB     R0,[R0, #+11]
   \   00000B06   3128               CMP      R0,#+49
   \   00000B08   06D3               BCC.N    ??UART_proNew_100
   \   00000B0A   B748               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000B0C   2818               ADDS     R0,R5,R0
   \   00000B0E   0B30               ADDS     R0,R0,#+11
   \   00000B10   ........           BL       strlen
   \   00000B14   0128               CMP      R0,#+1
   \   00000B16   08D0               BEQ.N    ??UART_proNew_101
    963                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_100:
   \   00000B18   C148               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000B1A   0321               MOVS     R1,#+3
   \   00000B1C   0170               STRB     R1,[R0, #+0]
    964                      Disp_status = 0x2A ; // display error
   \   00000B1E   DFF84803           LDR.W    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   00000B22   2A21               MOVS     R1,#+42
   \   00000B24   0170               STRB     R1,[R0, #+0]
    965                      return;          	
   \   00000B26   01F0AEBC           B.W      ??UART_proNew_4
    966                    }  
    967                    pricnt_flag = gWRecBuff[ip+11]-'0';//
   \                     ??UART_proNew_101:
   \   00000B2A   AF48               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000B2C   2818               ADDS     R0,R5,R0
   \   00000B2E   C07A               LDRB     R0,[R0, #+11]
   \   00000B30   3038               SUBS     R0,R0,#+48
   \   00000B32   DFF88813           LDR.W    R1,??UART_proNew_0+0xD4  ;; pricnt_flag
   \   00000B36   0870               STRB     R0,[R1, #+0]
    968                    pgc_flag = 0;//
   \   00000B38   DFF88403           LDR.W    R0,??UART_proNew_0+0xD8  ;; pgc_flag
   \   00000B3C   0021               MOVS     R1,#+0
   \   00000B3E   0170               STRB     R1,[R0, #+0]
    969                    UartDelFlg = 2;//Delete All
   \   00000B40   B648               LDR.N    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000B42   0221               MOVS     R1,#+2
   \   00000B44   0170               STRB     R1,[R0, #+0]
    970                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000B46   B648               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000B48   0221               MOVS     R1,#+2
   \   00000B4A   0170               STRB     R1,[R0, #+0]
    971                	  return; 
   \   00000B4C   01F09BBC           B.W      ??UART_proNew_4
    972                  }else if (strcmp((char *)&gWRecBuff[ip],GAPRICLRON)==0){//"GALEDPRICLR=ON"
   \                     ??UART_proNew_99:
   \   00000B50   DFF87013           LDR.W    R1,??UART_proNew_0+0xDC  ;; GAPRICLRON
   \   00000B54   A448               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000B56   2818               ADDS     R0,R5,R0
   \   00000B58   ........           BL       strcmp
   \   00000B5C   0028               CMP      R0,#+0
   \   00000B5E   0AD1               BNE.N    ??UART_proNew_102
    973                    priclr_flag = 1;
   \   00000B60   B048               LDR.N    R0,??UART_proNew_0+0x3C  ;; priclr_flag
   \   00000B62   0121               MOVS     R1,#+1
   \   00000B64   0170               STRB     R1,[R0, #+0]
    974                    UartDelFlg = 3;//do nothing
   \   00000B66   AD48               LDR.N    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000B68   0321               MOVS     R1,#+3
   \   00000B6A   0170               STRB     R1,[R0, #+0]
    975                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000B6C   AC48               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000B6E   0221               MOVS     R1,#+2
   \   00000B70   0170               STRB     R1,[R0, #+0]
    976                	  return;
   \   00000B72   01F088BC           B.W      ??UART_proNew_4
    977                  }else if (strcmp((char *)&gWRecBuff[ip],GAPRICLROFF)==0){//"GALEDPRICLR=OFF"
   \                     ??UART_proNew_102:
   \   00000B76   DFF85013           LDR.W    R1,??UART_proNew_0+0xE0  ;; GAPRICLROFF
   \   00000B7A   9B48               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000B7C   2818               ADDS     R0,R5,R0
   \   00000B7E   ........           BL       strcmp
   \   00000B82   0028               CMP      R0,#+0
   \   00000B84   0AD1               BNE.N    ??UART_proNew_103
    978                    priclr_flag = 0;
   \   00000B86   A748               LDR.N    R0,??UART_proNew_0+0x3C  ;; priclr_flag
   \   00000B88   0021               MOVS     R1,#+0
   \   00000B8A   0170               STRB     R1,[R0, #+0]
    979                    UartDelFlg = 3;//do nothing
   \   00000B8C   A348               LDR.N    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000B8E   0321               MOVS     R1,#+3
   \   00000B90   0170               STRB     R1,[R0, #+0]
    980                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000B92   A348               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000B94   0221               MOVS     R1,#+2
   \   00000B96   0170               STRB     R1,[R0, #+0]
    981                	  return;
   \   00000B98   01F075BC           B.W      ??UART_proNew_4
    982                  }else if (strcmp((char *)&gWRecBuff[ip],GAMSGCLON)==0){//"GALEDMSGCL=ON"
   \                     ??UART_proNew_103:
   \   00000B9C   CB49               LDR.N    R1,??UART_proNew_0+0xE4  ;; GAMSGCLON
   \   00000B9E   9248               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000BA0   2818               ADDS     R0,R5,R0
   \   00000BA2   ........           BL       strcmp
   \   00000BA6   0028               CMP      R0,#+0
   \   00000BA8   0AD1               BNE.N    ??UART_proNew_104
    983                    msgcl_flag = 1;
   \   00000BAA   C948               LDR.N    R0,??UART_proNew_0+0xE8  ;; msgcl_flag
   \   00000BAC   0121               MOVS     R1,#+1
   \   00000BAE   0170               STRB     R1,[R0, #+0]
    984                    UartDelFlg = 3;//do nothing
   \   00000BB0   9A48               LDR.N    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000BB2   0321               MOVS     R1,#+3
   \   00000BB4   0170               STRB     R1,[R0, #+0]
    985                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000BB6   9A48               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000BB8   0221               MOVS     R1,#+2
   \   00000BBA   0170               STRB     R1,[R0, #+0]
    986                	  return;
   \   00000BBC   01F063BC           B.W      ??UART_proNew_4
    987                  }else if (strcmp((char *)&gWRecBuff[ip],GAMSGCLOFF)==0){//"GALEDMSGCL=OFF"
   \                     ??UART_proNew_104:
   \   00000BC0   C449               LDR.N    R1,??UART_proNew_0+0xEC  ;; GAMSGCLOFF
   \   00000BC2   8948               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000BC4   2818               ADDS     R0,R5,R0
   \   00000BC6   ........           BL       strcmp
   \   00000BCA   0028               CMP      R0,#+0
   \   00000BCC   0AD1               BNE.N    ??UART_proNew_105
    988                    msgcl_flag = 0;
   \   00000BCE   C048               LDR.N    R0,??UART_proNew_0+0xE8  ;; msgcl_flag
   \   00000BD0   0021               MOVS     R1,#+0
   \   00000BD2   0170               STRB     R1,[R0, #+0]
    989                    UartDelFlg = 3;//do nothing
   \   00000BD4   9148               LDR.N    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000BD6   0321               MOVS     R1,#+3
   \   00000BD8   0170               STRB     R1,[R0, #+0]
    990                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000BDA   9148               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000BDC   0221               MOVS     R1,#+2
   \   00000BDE   0170               STRB     R1,[R0, #+0]
    991                	  return;      	  
   \   00000BE0   01F051BC           B.W      ??UART_proNew_4
    992                  }else if (memcmp(&gWRecBuff[ip],GAAUCT,10)==0){//"GALEDAUCT="
   \                     ??UART_proNew_105:
   \   00000BE4   0A22               MOVS     R2,#+10
   \   00000BE6   BC49               LDR.N    R1,??UART_proNew_0+0xF0  ;; GAAUCT
   \   00000BE8   7F48               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000BEA   2818               ADDS     R0,R5,R0
   \   00000BEC   ........           BL       memcmp
   \   00000BF0   0028               CMP      R0,#+0
   \   00000BF2   58D1               BNE.N    ??UART_proNew_106
    993                    for(i=0;i<2;i++){
   \   00000BF4   0020               MOVS     R0,#+0
   \   00000BF6   0400               MOVS     R4,R0
   \                     ??UART_proNew_107:
   \   00000BF8   022C               CMP      R4,#+2
   \   00000BFA   1CDA               BGE.N    ??UART_proNew_108
    994                      if ( ( gWRecBuff[ip+10+i] > '9' ) || ( gWRecBuff[ip+10+i] < '0' ) || strlen((char *)&gWRecBuff[ip+10]) != 2 ){
   \   00000BFC   6019               ADDS     R0,R4,R5
   \   00000BFE   7A49               LDR.N    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000C00   4018               ADDS     R0,R0,R1
   \   00000C02   807A               LDRB     R0,[R0, #+10]
   \   00000C04   3A28               CMP      R0,#+58
   \   00000C06   0CD2               BCS.N    ??UART_proNew_109
   \   00000C08   6019               ADDS     R0,R4,R5
   \   00000C0A   7749               LDR.N    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000C0C   4018               ADDS     R0,R0,R1
   \   00000C0E   807A               LDRB     R0,[R0, #+10]
   \   00000C10   3028               CMP      R0,#+48
   \   00000C12   06D3               BCC.N    ??UART_proNew_109
   \   00000C14   7448               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000C16   2818               ADDS     R0,R5,R0
   \   00000C18   0A30               ADDS     R0,R0,#+10
   \   00000C1A   ........           BL       strlen
   \   00000C1E   0228               CMP      R0,#+2
   \   00000C20   07D0               BEQ.N    ??UART_proNew_110
    995                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_109:
   \   00000C22   7F48               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000C24   0321               MOVS     R1,#+3
   \   00000C26   0170               STRB     R1,[R0, #+0]
    996                        Disp_status = 0x2A ; // display error
   \   00000C28   8F48               LDR.N    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   00000C2A   2A21               MOVS     R1,#+42
   \   00000C2C   0170               STRB     R1,[R0, #+0]
    997                        return;          	
   \   00000C2E   01F02ABC           B.W      ??UART_proNew_4
    998                      } 
    999                    }     
   \                     ??UART_proNew_110:
   \   00000C32   641C               ADDS     R4,R4,#+1
   \   00000C34   E0E7               B.N      ??UART_proNew_107
   1000                    tmp =  (gWRecBuff[ip+10]-'0' )*10 + gWRecBuff[ip+11]-'0';//
   \                     ??UART_proNew_108:
   \   00000C36   6C48               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000C38   2818               ADDS     R0,R5,R0
   \   00000C3A   807A               LDRB     R0,[R0, #+10]
   \   00000C3C   0A21               MOVS     R1,#+10
   \   00000C3E   6A4A               LDR.N    R2,??UART_proNew_0  ;; gWRecBuff
   \   00000C40   AA18               ADDS     R2,R5,R2
   \   00000C42   D27A               LDRB     R2,[R2, #+11]
   \   00000C44   00FB0120           MLA      R0,R0,R1,R2
   \   00000C48   1038               SUBS     R0,R0,#+16
   \   00000C4A   8346               MOV      R11,R0
   1001                    if ( tmp < 1 || tmp > 24 ){
   \   00000C4C   5FFA8BFB           UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000C50   BBF1010F           CMP      R11,#+1
   \   00000C54   04D3               BCC.N    ??UART_proNew_111
   \   00000C56   5FFA8BFB           UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000C5A   BBF1190F           CMP      R11,#+25
   \   00000C5E   07D3               BCC.N    ??UART_proNew_112
   1002                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_111:
   \   00000C60   6F48               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000C62   0321               MOVS     R1,#+3
   \   00000C64   0170               STRB     R1,[R0, #+0]
   1003                      Disp_status = 0x2A ; // display error
   \   00000C66   8048               LDR.N    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   00000C68   2A21               MOVS     R1,#+42
   \   00000C6A   0170               STRB     R1,[R0, #+0]
   1004                      return;          	
   \   00000C6C   01F00BBC           B.W      ??UART_proNew_4
   1005                    }            
   1006                    if ( maildrop_count(mail_bits) >= tmp ){
   \                     ??UART_proNew_112:
   \   00000C70   8D48               LDR.N    R0,??UART_proNew_0+0xC0  ;; mail_bits
   \   00000C72   0068               LDR      R0,[R0, #+0]
   \   00000C74   ........           BL       maildrop_count
   \   00000C78   5FFA8BFB           UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000C7C   5845               CMP      R0,R11
   \   00000C7E   07DB               BLT.N    ??UART_proNew_113
   1007                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   00000C80   6748               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000C82   0321               MOVS     R1,#+3
   \   00000C84   0170               STRB     R1,[R0, #+0]
   1008                        Disp_status = 0x2A ; // display error
   \   00000C86   7848               LDR.N    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   00000C88   2A21               MOVS     R1,#+42
   \   00000C8A   0170               STRB     R1,[R0, #+0]
   1009                        return;          	
   \   00000C8C   01F0FBBB           B.W      ??UART_proNew_4
   1010                    }	          	          
   1011                    autoct_flag = tmp;//
   \                     ??UART_proNew_113:
   \   00000C90   8448               LDR.N    R0,??UART_proNew_0+0xBC  ;; autoct_flag
   \   00000C92   80F800B0           STRB     R11,[R0, #+0]
   1012                    UartDelFlg = 2;//Delete All
   \   00000C96   6148               LDR.N    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000C98   0221               MOVS     R1,#+2
   \   00000C9A   0170               STRB     R1,[R0, #+0]
   1013                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000C9C   6048               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000C9E   0221               MOVS     R1,#+2
   \   00000CA0   0170               STRB     R1,[R0, #+0]
   1014                	  return;
   \   00000CA2   01F0F0BB           B.W      ??UART_proNew_4
   1015                	}else if (memcmp(&gWRecBuff[ip],GAPRDY,12) == 0){//"GALEDPCLRDY="
   \                     ??UART_proNew_106:
   \   00000CA6   0C22               MOVS     R2,#+12
   \   00000CA8   8C49               LDR.N    R1,??UART_proNew_0+0xF4  ;; GAPRDY
   \   00000CAA   4F48               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000CAC   2818               ADDS     R0,R5,R0
   \   00000CAE   ........           BL       memcmp
   \   00000CB2   0028               CMP      R0,#+0
   \   00000CB4   3BD1               BNE.N    ??UART_proNew_114
   1016                    for(i=0;i<3;i++)
   \   00000CB6   0020               MOVS     R0,#+0
   \   00000CB8   0400               MOVS     R4,R0
   \                     ??UART_proNew_115:
   \   00000CBA   032C               CMP      R4,#+3
   \   00000CBC   1CDA               BGE.N    ??UART_proNew_116
   1017                      if ( ( gWRecBuff[ip+12+i] > '9' ) || ( gWRecBuff[ip+12+i] < '0' ) || strlen((char *)&gWRecBuff[ip+12]) != 3 ){
   \   00000CBE   6019               ADDS     R0,R4,R5
   \   00000CC0   4949               LDR.N    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000CC2   4018               ADDS     R0,R0,R1
   \   00000CC4   007B               LDRB     R0,[R0, #+12]
   \   00000CC6   3A28               CMP      R0,#+58
   \   00000CC8   0CD2               BCS.N    ??UART_proNew_117
   \   00000CCA   6019               ADDS     R0,R4,R5
   \   00000CCC   4649               LDR.N    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000CCE   4018               ADDS     R0,R0,R1
   \   00000CD0   007B               LDRB     R0,[R0, #+12]
   \   00000CD2   3028               CMP      R0,#+48
   \   00000CD4   06D3               BCC.N    ??UART_proNew_117
   \   00000CD6   4448               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000CD8   2818               ADDS     R0,R5,R0
   \   00000CDA   0C30               ADDS     R0,R0,#+12
   \   00000CDC   ........           BL       strlen
   \   00000CE0   0328               CMP      R0,#+3
   \   00000CE2   07D0               BEQ.N    ??UART_proNew_118
   1018                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_117:
   \   00000CE4   4E48               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000CE6   0321               MOVS     R1,#+3
   \   00000CE8   0170               STRB     R1,[R0, #+0]
   1019                        Disp_status = 0x2A ; // display error
   \   00000CEA   5F48               LDR.N    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   00000CEC   2A21               MOVS     R1,#+42
   \   00000CEE   0170               STRB     R1,[R0, #+0]
   1020                        return;
   \   00000CF0   01F0C9BB           B.W      ??UART_proNew_4
   1021                      } 
   \                     ??UART_proNew_118:
   \   00000CF4   641C               ADDS     R4,R4,#+1
   \   00000CF6   E0E7               B.N      ??UART_proNew_115
   1022                    pact_flag=(gWRecBuff[ip+12]-'0')*100+(gWRecBuff[ip+13]-'0')*10+gWRecBuff[ip+14]-'0';
   \                     ??UART_proNew_116:
   \   00000CF8   3B48               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000CFA   2818               ADDS     R0,R5,R0
   \   00000CFC   007B               LDRB     R0,[R0, #+12]
   \   00000CFE   6421               MOVS     R1,#+100
   \   00000D00   394A               LDR.N    R2,??UART_proNew_0  ;; gWRecBuff
   \   00000D02   AA18               ADDS     R2,R5,R2
   \   00000D04   527B               LDRB     R2,[R2, #+13]
   \   00000D06   0A23               MOVS     R3,#+10
   \   00000D08   02FB03F2           MUL      R2,R2,R3
   \   00000D0C   00FB0120           MLA      R0,R0,R1,R2
   \   00000D10   3549               LDR.N    R1,??UART_proNew_0  ;; gWRecBuff
   \   00000D12   6918               ADDS     R1,R5,R1
   \   00000D14   897B               LDRB     R1,[R1, #+14]
   \   00000D16   0818               ADDS     R0,R1,R0
   \   00000D18   3030               ADDS     R0,R0,#+48
   \   00000D1A   7149               LDR.N    R1,??UART_proNew_0+0xF8  ;; pact_flag
   \   00000D1C   0870               STRB     R0,[R1, #+0]
   1023                    UartDelFlg = 3;//do nothing
   \   00000D1E   3F48               LDR.N    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000D20   0321               MOVS     R1,#+3
   \   00000D22   0170               STRB     R1,[R0, #+0]
   1024                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000D24   3E48               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000D26   0221               MOVS     R1,#+2
   \   00000D28   0170               STRB     R1,[R0, #+0]
   1025                	  return;
   \   00000D2A   01F0ACBB           B.W      ??UART_proNew_4
   1026                  }else if (strcmp((char *)&gWRecBuff[ip],GASNOON)==0){//"GALEDMGNO=ON"
   \                     ??UART_proNew_114:
   \   00000D2E   6D49               LDR.N    R1,??UART_proNew_0+0xFC  ;; GASNOON
   \   00000D30   2D48               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000D32   2818               ADDS     R0,R5,R0
   \   00000D34   ........           BL       strcmp
   \   00000D38   0028               CMP      R0,#+0
   \   00000D3A   0AD1               BNE.N    ??UART_proNew_119
   1027                    mgn_flag = 1;
   \   00000D3C   6A48               LDR.N    R0,??UART_proNew_0+0x100  ;; mgn_flag
   \   00000D3E   0121               MOVS     R1,#+1
   \   00000D40   0170               STRB     R1,[R0, #+0]
   1028                    UartDelFlg = 3;//do nothing
   \   00000D42   3648               LDR.N    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000D44   0321               MOVS     R1,#+3
   \   00000D46   0170               STRB     R1,[R0, #+0]
   1029                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000D48   3548               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000D4A   0221               MOVS     R1,#+2
   \   00000D4C   0170               STRB     R1,[R0, #+0]
   1030                	  return;
   \   00000D4E   01F09ABB           B.W      ??UART_proNew_4
   1031                  }else if (strcmp((char *)&gWRecBuff[ip],GASNOOFF)==0){//"GALEDMGNO=OFF"
   \                     ??UART_proNew_119:
   \   00000D52   6649               LDR.N    R1,??UART_proNew_0+0x104  ;; GASNOOFF
   \   00000D54   2448               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000D56   2818               ADDS     R0,R5,R0
   \   00000D58   ........           BL       strcmp
   \   00000D5C   0028               CMP      R0,#+0
   \   00000D5E   0AD1               BNE.N    ??UART_proNew_120
   1032                    mgn_flag = 0;
   \   00000D60   6148               LDR.N    R0,??UART_proNew_0+0x100  ;; mgn_flag
   \   00000D62   0021               MOVS     R1,#+0
   \   00000D64   0170               STRB     R1,[R0, #+0]
   1033                    UartDelFlg = 3;//do nothing
   \   00000D66   2D48               LDR.N    R0,??UART_proNew_0+0x34  ;; UartDelFlg
   \   00000D68   0321               MOVS     R1,#+3
   \   00000D6A   0170               STRB     R1,[R0, #+0]
   1034                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00000D6C   2C48               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000D6E   0221               MOVS     R1,#+2
   \   00000D70   0170               STRB     R1,[R0, #+0]
   1035                	  return;  
   \   00000D72   01F088BB           B.W      ??UART_proNew_4
   1036                	#endif             
   1037                  //***********************************************************************************************************************************                        
   1038                  }else if (memcmp(&gWRecBuff[ip],GADStr,11)==0){//"GALEDSPEED="
   \                     ??UART_proNew_120:
   \   00000D76   0B22               MOVS     R2,#+11
   \   00000D78   5D49               LDR.N    R1,??UART_proNew_0+0x108  ;; GADStr
   \   00000D7A   1B48               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000D7C   2818               ADDS     R0,R5,R0
   \   00000D7E   ........           BL       memcmp
   \   00000D82   0028               CMP      R0,#+0
   \   00000D84   40F0E780           BNE.W    ??UART_proNew_121
   1039                    if ( (( gWRecBuff[ip+11] > '5' ) || ( gWRecBuff[ip+11] < '1' ))  || strlen((char *)&gWRecBuff[ip+11]) !=1 ){
   \   00000D88   1748               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000D8A   2818               ADDS     R0,R5,R0
   \   00000D8C   C07A               LDRB     R0,[R0, #+11]
   \   00000D8E   3628               CMP      R0,#+54
   \   00000D90   0BD2               BCS.N    ??UART_proNew_122
   \   00000D92   1548               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000D94   2818               ADDS     R0,R5,R0
   \   00000D96   C07A               LDRB     R0,[R0, #+11]
   \   00000D98   3128               CMP      R0,#+49
   \   00000D9A   06D3               BCC.N    ??UART_proNew_122
   \   00000D9C   1248               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000D9E   2818               ADDS     R0,R5,R0
   \   00000DA0   0B30               ADDS     R0,R0,#+11
   \   00000DA2   ........           BL       strlen
   \   00000DA6   0128               CMP      R0,#+1
   \   00000DA8   07D0               BEQ.N    ??UART_proNew_123
   1040                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_122:
   \   00000DAA   1D48               LDR.N    R0,??UART_proNew_0+0x38  ;; RecProcessing
   \   00000DAC   0321               MOVS     R1,#+3
   \   00000DAE   0170               STRB     R1,[R0, #+0]
   1041                        Disp_status = 0x2A ; // display error
   \   00000DB0   2D48               LDR.N    R0,??UART_proNew_0+0x80  ;; Disp_status
   \   00000DB2   2A21               MOVS     R1,#+42
   \   00000DB4   0170               STRB     R1,[R0, #+0]
   1042                        return;
   \   00000DB6   01F066BB           B.W      ??UART_proNew_4
   1043                    }
   1044                    if (type_flag != '2'){
   \                     ??UART_proNew_123:
   \   00000DBA   2C48               LDR.N    R0,??UART_proNew_0+0x84  ;; type_flag
   \   00000DBC   0078               LDRB     R0,[R0, #+0]
   \   00000DBE   3228               CMP      R0,#+50
   \   00000DC0   00F0A280           BEQ.W    ??UART_proNew_124
   1045                    	LedDly=5-(gWRecBuff[ip+11]-'0');
   \   00000DC4   0848               LDR.N    R0,??UART_proNew_0  ;; gWRecBuff
   \   00000DC6   2818               ADDS     R0,R5,R0
   \   00000DC8   C07A               LDRB     R0,[R0, #+11]
   \   00000DCA   D0F10500           RSBS     R0,R0,#+5
   \   00000DCE   3030               ADDS     R0,R0,#+48
   \   00000DD0   2749               LDR.N    R1,??UART_proNew_0+0x88  ;; LedDly
   \   00000DD2   0860               STR      R0,[R1, #+0]
   1046                      if (LedDly < 0 ) 
   \   00000DD4   2648               LDR.N    R0,??UART_proNew_0+0x88  ;; LedDly
   \   00000DD6   0068               LDR      R0,[R0, #+0]
   \   00000DD8   0028               CMP      R0,#+0
   \   00000DDA   40F18B80           BPL.W    ??UART_proNew_125
   1047                        LedDly=0;
   \   00000DDE   2448               LDR.N    R0,??UART_proNew_0+0x88  ;; LedDly
   \   00000DE0   0021               MOVS     R1,#+0
   \   00000DE2   0160               STR      R1,[R0, #+0]
   \   00000DE4   ADE0               B.N      ??UART_proNew_126
   \   00000DE6   00BF               Nop      
   \                     ??UART_proNew_0:
   \   00000DE8   ........           DC32     gWRecBuff
   \   00000DEC   ........           DC32     UartHtag
   \   00000DF0   ........           DC32     UartChkSum
   \   00000DF4   ........           DC32     gWRecLen
   \   00000DF8   ........           DC32     mgc_flag
   \   00000DFC   ........           DC32     UartID
   \   00000E00   ........           DC32     CommandMode
   \   00000E04   ........           DC32     BinMix
   \   00000E08   ........           DC32     UartLang
   \   00000E0C   ........           DC32     GACMD
   \   00000E10   ........           DC32     gWRecBuff + 11
   \   00000E14   ........           DC32     ask_flag
   \   00000E18   ........           DC32     ask_value
   \   00000E1C   ........           DC32     UartDelFlg
   \   00000E20   ........           DC32     RecProcessing
   \   00000E24   ........           DC32     priclr_flag
   \   00000E28   ........           DC32     TmpTxtBuff
   \   00000E2C   ........           DC32     GACLR
   \   00000E30   ........           DC32     primsg_flag
   \   00000E34   ........           DC32     PTopIndex
   \   00000E38   ........           DC32     PLastIndex
   \   00000E3C   ........           DC32     TxtPage
   \   00000E40   ........           DC32     CurIndex
   \   00000E44   ........           DC32     TopIndex
   \   00000E48   ........           DC32     DftMsg
   \   00000E4C   ........           DC32     RevTxtBuff
   \   00000E50   ........           DC32     RevTxtLen
   \   00000E54   ........           DC32     pmau_flag
   \   00000E58   ........           DC32     crc_flag
   \   00000E5C   ........           DC32     GARST
   \   00000E60   ........           DC32     GARST1
   \   00000E64   ........           DC32     GATYPE
   \   00000E68   ........           DC32     Disp_status
   \   00000E6C   ........           DC32     type_flag
   \   00000E70   ........           DC32     LedDly
   \   00000E74   ........           DC32     Line2_Dly
   \   00000E78   ........           DC32     amm_flag
   \   00000E7C   ........           DC32     dmm_flag
   \   00000E80   ........           DC32     GAAPPM
   \   00000E84   ........           DC32     GADISM
   \   00000E88   ........           DC32     GAPRIM
   \   00000E8C   ........           DC32     pri_flag
   \   00000E90   ........           DC32     GARLYTM
   \   00000E94   ........           DC32     rlytm_flag
   \   00000E98   ........           DC32     GAPRICAP
   \   00000E9C   ........           DC32     pri_bits
   \   00000EA0   ........           DC32     GAMAILCAP
   \   00000EA4   ........           DC32     autoct_flag
   \   00000EA8   ........           DC32     mail_bits
   \   00000EAC   ........           DC32     GAMDFON
   \   00000EB0   ........           DC32     mdf_flag
   \   00000EB4   ........           DC32     GAMDFOFF
   \   00000EB8   ........           DC32     GAPRICT
   \   00000EBC   ........           DC32     pricnt_flag
   \   00000EC0   ........           DC32     pgc_flag
   \   00000EC4   ........           DC32     GAPRICLRON
   \   00000EC8   ........           DC32     GAPRICLROFF
   \   00000ECC   ........           DC32     GAMSGCLON
   \   00000ED0   ........           DC32     msgcl_flag
   \   00000ED4   ........           DC32     GAMSGCLOFF
   \   00000ED8   ........           DC32     GAAUCT
   \   00000EDC   ........           DC32     GAPRDY
   \   00000EE0   ........           DC32     pact_flag
   \   00000EE4   ........           DC32     GASNOON
   \   00000EE8   ........           DC32     mgn_flag
   \   00000EEC   ........           DC32     GASNOOFF
   \   00000EF0   ........           DC32     GADStr
   1048                      else if (LedDly > 4 )
   \                     ??UART_proNew_125:
   \   00000EF4   DFF8000E           LDR.W    R0,??UART_proNew_127  ;; LedDly
   \   00000EF8   0068               LDR      R0,[R0, #+0]
   \   00000EFA   0528               CMP      R0,#+5
   \   00000EFC   21DB               BLT.N    ??UART_proNew_126
   1049                        LedDly=4;        
   \   00000EFE   DFF8F80D           LDR.W    R0,??UART_proNew_127  ;; LedDly
   \   00000F02   0421               MOVS     R1,#+4
   \   00000F04   0160               STR      R1,[R0, #+0]
   \   00000F06   1CE0               B.N      ??UART_proNew_126
   1050                    }else{
   1051                    	Line2_Dly=5-(gWRecBuff[ip+11]-'0');
   \                     ??UART_proNew_124:
   \   00000F08   DFF8F00D           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00000F0C   2818               ADDS     R0,R5,R0
   \   00000F0E   C07A               LDRB     R0,[R0, #+11]
   \   00000F10   D0F10500           RSBS     R0,R0,#+5
   \   00000F14   3030               ADDS     R0,R0,#+48
   \   00000F16   DFF8E81D           LDR.W    R1,??UART_proNew_127+0x8  ;; Line2_Dly
   \   00000F1A   0860               STR      R0,[R1, #+0]
   1052                      if (Line2_Dly < 0 ) 
   \   00000F1C   DFF8E00D           LDR.W    R0,??UART_proNew_127+0x8  ;; Line2_Dly
   \   00000F20   0068               LDR      R0,[R0, #+0]
   \   00000F22   0028               CMP      R0,#+0
   \   00000F24   04D5               BPL.N    ??UART_proNew_128
   1053                        Line2_Dly=0;
   \   00000F26   DFF8D80D           LDR.W    R0,??UART_proNew_127+0x8  ;; Line2_Dly
   \   00000F2A   0021               MOVS     R1,#+0
   \   00000F2C   0160               STR      R1,[R0, #+0]
   \   00000F2E   08E0               B.N      ??UART_proNew_126
   1054                      else if (Line2_Dly > 4 )
   \                     ??UART_proNew_128:
   \   00000F30   DFF8CC0D           LDR.W    R0,??UART_proNew_127+0x8  ;; Line2_Dly
   \   00000F34   0068               LDR      R0,[R0, #+0]
   \   00000F36   0528               CMP      R0,#+5
   \   00000F38   03DB               BLT.N    ??UART_proNew_126
   1055                        Line2_Dly=4;                    
   \   00000F3A   DFF8C40D           LDR.W    R0,??UART_proNew_127+0x8  ;; Line2_Dly
   \   00000F3E   0421               MOVS     R1,#+4
   \   00000F40   0160               STR      R1,[R0, #+0]
   1056                    }    
   1057                    UartDelFlg=3;
   \                     ??UART_proNew_126:
   \   00000F42   DFF8C00D           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00000F46   0321               MOVS     R1,#+3
   \   00000F48   0170               STRB     R1,[R0, #+0]
   1058                    RecProcessing=2;//Inform self_test_1 ------- AP006
   \   00000F4A   DFF8BC0D           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00000F4E   0221               MOVS     R1,#+2
   \   00000F50   0170               STRB     R1,[R0, #+0]
   1059                    return;
   \   00000F52   01F098BA           B.W      ??UART_proNew_4
   1060                  }else if (memcmp(&gWRecBuff[ip],GAGStr,10)==0){//"GALEDMESG="
   \                     ??UART_proNew_121:
   \   00000F56   0A22               MOVS     R2,#+10
   \   00000F58   DFF8B01D           LDR.W    R1,??UART_proNew_127+0x14  ;; GAGStr
   \   00000F5C   DFF89C0D           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00000F60   2818               ADDS     R0,R5,R0
   \   00000F62   ........           BL       memcmp
   \   00000F66   0028               CMP      R0,#+0
   \   00000F68   3DD1               BNE.N    ??UART_proNew_129
   1061                    if ( strlen((char *)&gWRecBuff[ip+10]) > 50 ){
   \   00000F6A   DFF8900D           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00000F6E   2818               ADDS     R0,R5,R0
   \   00000F70   0A30               ADDS     R0,R0,#+10
   \   00000F72   ........           BL       strlen
   \   00000F76   3328               CMP      R0,#+51
   \   00000F78   0FD3               BCC.N    ??UART_proNew_130
   1062                       memcpy(DftMsg,&gWRecBuff[ip + 10],50);
   \   00000F7A   3222               MOVS     R2,#+50
   \   00000F7C   DFF87C0D           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00000F80   2818               ADDS     R0,R5,R0
   \   00000F82   10F10A01           ADDS     R1,R0,#+10
   \   00000F86   DFF8880D           LDR.W    R0,??UART_proNew_127+0x18  ;; DftMsg
   \   00000F8A   ........           BL       memcpy
   1063                       DftMsg[50]='\0';
   \   00000F8E   DFF8800D           LDR.W    R0,??UART_proNew_127+0x18  ;; DftMsg
   \   00000F92   0021               MOVS     R1,#+0
   \   00000F94   80F83210           STRB     R1,[R0, #+50]
   \   00000F98   1BE0               B.N      ??UART_proNew_131
   1064                    }else if ( strlen((char *)&gWRecBuff[ip]) == 10 ){
   \                     ??UART_proNew_130:
   \   00000F9A   DFF8600D           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00000F9E   2818               ADDS     R0,R5,R0
   \   00000FA0   ........           BL       strlen
   \   00000FA4   0A28               CMP      R0,#+10
   \   00000FA6   0BD1               BNE.N    ??UART_proNew_132
   1065                       memset(DftMsg,' ',50);
   \   00000FA8   3222               MOVS     R2,#+50
   \   00000FAA   2021               MOVS     R1,#+32
   \   00000FAC   DFF8600D           LDR.W    R0,??UART_proNew_127+0x18  ;; DftMsg
   \   00000FB0   ........           BL       memset
   1066                       DftMsg[50]='\0';
   \   00000FB4   DFF8580D           LDR.W    R0,??UART_proNew_127+0x18  ;; DftMsg
   \   00000FB8   0021               MOVS     R1,#+0
   \   00000FBA   80F83210           STRB     R1,[R0, #+50]
   \   00000FBE   08E0               B.N      ??UART_proNew_131
   1067                    }else
   1068                      strcpy(DftMsg,(char *)&gWRecBuff[ip+10]);
   \                     ??UART_proNew_132:
   \   00000FC0   DFF8380D           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00000FC4   2818               ADDS     R0,R5,R0
   \   00000FC6   10F10A01           ADDS     R1,R0,#+10
   \   00000FCA   DFF8440D           LDR.W    R0,??UART_proNew_127+0x18  ;; DftMsg
   \   00000FCE   ........           BL       strcpy
   1069                    UartDelFlg=3;
   \                     ??UART_proNew_131:
   \   00000FD2   DFF8300D           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00000FD6   0321               MOVS     R1,#+3
   \   00000FD8   0170               STRB     R1,[R0, #+0]
   1070                    RecProcessing=2;//Inform self_test_1 ------- AP006
   \   00000FDA   DFF82C0D           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00000FDE   0221               MOVS     R1,#+2
   \   00000FE0   0170               STRB     R1,[R0, #+0]
   1071                    return;
   \   00000FE2   01F050BA           B.W      ??UART_proNew_4
   1072                  }else if (memcmp(&gWRecBuff[ip],GAEStr,10)==0){//"GALEDDATE="
   \                     ??UART_proNew_129:
   \   00000FE6   0A22               MOVS     R2,#+10
   \   00000FE8   DFF8281D           LDR.W    R1,??UART_proNew_127+0x1C  ;; GAEStr
   \   00000FEC   DFF80C0D           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00000FF0   2818               ADDS     R0,R5,R0
   \   00000FF2   ........           BL       memcmp
   \   00000FF6   0028               CMP      R0,#+0
   \   00000FF8   40F0ED80           BNE.W    ??UART_proNew_133
   1073                    if (  RTC_flag == 0 ){
   \   00000FFC   DFF8180D           LDR.W    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   00001000   0078               LDRB     R0,[R0, #+0]
   \   00001002   0028               CMP      R0,#+0
   \   00001004   09D1               BNE.N    ??UART_proNew_134
   1074                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   00001006   DFF8000D           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   0000100A   0321               MOVS     R1,#+3
   \   0000100C   0170               STRB     R1,[R0, #+0]
   1075                      Disp_status = 0x30 ; // display error
   \   0000100E   DFF80C0D           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001012   3021               MOVS     R1,#+48
   \   00001014   0170               STRB     R1,[R0, #+0]
   1076                      return;
   \   00001016   01F036BA           B.W      ??UART_proNew_4
   1077                    }           
   1078                    for(i=0;i<6;i++)
   \                     ??UART_proNew_134:
   \   0000101A   0020               MOVS     R0,#+0
   \   0000101C   0400               MOVS     R4,R0
   \                     ??UART_proNew_135:
   \   0000101E   062C               CMP      R4,#+6
   \   00001020   21DA               BGE.N    ??UART_proNew_136
   1079                      if ( ( gWRecBuff[ip+10+i] > '9' ) || ( gWRecBuff[ip+10+i] < '0' ) || strlen((char *)&gWRecBuff[ip+10]) != 6 ){
   \   00001022   6019               ADDS     R0,R4,R5
   \   00001024   DFF8D41C           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001028   4018               ADDS     R0,R0,R1
   \   0000102A   807A               LDRB     R0,[R0, #+10]
   \   0000102C   3A28               CMP      R0,#+58
   \   0000102E   0ED2               BCS.N    ??UART_proNew_137
   \   00001030   6019               ADDS     R0,R4,R5
   \   00001032   DFF8C81C           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001036   4018               ADDS     R0,R0,R1
   \   00001038   807A               LDRB     R0,[R0, #+10]
   \   0000103A   3028               CMP      R0,#+48
   \   0000103C   07D3               BCC.N    ??UART_proNew_137
   \   0000103E   DFF8BC0C           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001042   2818               ADDS     R0,R5,R0
   \   00001044   0A30               ADDS     R0,R0,#+10
   \   00001046   ........           BL       strlen
   \   0000104A   0628               CMP      R0,#+6
   \   0000104C   09D0               BEQ.N    ??UART_proNew_138
   1080                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_137:
   \   0000104E   DFF8B80C           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001052   0321               MOVS     R1,#+3
   \   00001054   0170               STRB     R1,[R0, #+0]
   1081                        Disp_status = 0x2A ; // display error
   \   00001056   DFF8C40C           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   0000105A   2A21               MOVS     R1,#+42
   \   0000105C   0170               STRB     R1,[R0, #+0]
   1082                        return;
   \   0000105E   01F012BA           B.W      ??UART_proNew_4
   1083                      }
   \                     ??UART_proNew_138:
   \   00001062   641C               ADDS     R4,R4,#+1
   \   00001064   DBE7               B.N      ??UART_proNew_135
   1084                    tm=gWRecBuff[ip+10]-'0';
   \                     ??UART_proNew_136:
   \   00001066   DFF8940C           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000106A   2818               ADDS     R0,R5,R0
   \   0000106C   807A               LDRB     R0,[R0, #+10]
   \   0000106E   3038               SUBS     R0,R0,#+48
   \   00001070   0700               MOVS     R7,R0
   1085                    yys= (tm << 4 ) + gWRecBuff[ip+11] - '0';//YY
   \   00001072   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001074   DFF8840C           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001078   2818               ADDS     R0,R5,R0
   \   0000107A   C07A               LDRB     R0,[R0, #+11]
   \   0000107C   10EB0710           ADDS     R0,R0,R7, LSL #+4
   \   00001080   3038               SUBS     R0,R0,#+48
   \   00001082   8DF80600           STRB     R0,[SP, #+6]
   1086                    tm=gWRecBuff[ip+12]-'0';
   \   00001086   DFF8740C           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000108A   2818               ADDS     R0,R5,R0
   \   0000108C   007B               LDRB     R0,[R0, #+12]
   \   0000108E   3038               SUBS     R0,R0,#+48
   \   00001090   0700               MOVS     R7,R0
   1087                    tm= (tm << 4 ) + gWRecBuff[ip+13] - '0';//MM
   \   00001092   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001094   DFF8640C           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001098   2818               ADDS     R0,R5,R0
   \   0000109A   407B               LDRB     R0,[R0, #+13]
   \   0000109C   10EB0710           ADDS     R0,R0,R7, LSL #+4
   \   000010A0   B0F13007           SUBS     R7,R0,#+48
   1088                    if (tm > 0x12 || tm == 0){
   \   000010A4   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000010A6   132F               CMP      R7,#+19
   \   000010A8   02D2               BCS.N    ??UART_proNew_139
   \   000010AA   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000010AC   002F               CMP      R7,#+0
   \   000010AE   09D1               BNE.N    ??UART_proNew_140
   1089                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_139:
   \   000010B0   DFF8540C           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000010B4   0321               MOVS     R1,#+3
   \   000010B6   0170               STRB     R1,[R0, #+0]
   1090                      Disp_status = 0x2A ; // display error
   \   000010B8   DFF8600C           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   000010BC   2A21               MOVS     R1,#+42
   \   000010BE   0170               STRB     R1,[R0, #+0]
   1091                      return;
   \   000010C0   01F0E1B9           B.W      ??UART_proNew_4
   1092                    }
   1093                    mms=tm;
   \                     ??UART_proNew_140:
   \   000010C4   8DF80770           STRB     R7,[SP, #+7]
   1094                    yy=2000+(gWRecBuff[ip+10]-'0')*10 + gWRecBuff[ip+11] - '0';
   \   000010C8   DFF8300C           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000010CC   2818               ADDS     R0,R5,R0
   \   000010CE   807A               LDRB     R0,[R0, #+10]
   \   000010D0   0A21               MOVS     R1,#+10
   \   000010D2   DFF8282C           LDR.W    R2,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000010D6   AA18               ADDS     R2,R5,R2
   \   000010D8   D27A               LDRB     R2,[R2, #+11]
   \   000010DA   00FB0120           MLA      R0,R0,R1,R2
   \   000010DE   4038               SUBS     R0,R0,#+64
   \   000010E0   8DF80100           STRB     R0,[SP, #+1]
   1095                    mm=(gWRecBuff[ip+12]-'0')*10+gWRecBuff[ip+13]-'0'-1;//MM Dec Index; MM=1 => Index=0 so index=MM-1
   \   000010E4   DFF8140C           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000010E8   2818               ADDS     R0,R5,R0
   \   000010EA   007B               LDRB     R0,[R0, #+12]
   \   000010EC   0A21               MOVS     R1,#+10
   \   000010EE   DFF80C2C           LDR.W    R2,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000010F2   AA18               ADDS     R2,R5,R2
   \   000010F4   527B               LDRB     R2,[R2, #+13]
   \   000010F6   00FB0120           MLA      R0,R0,R1,R2
   \   000010FA   1138               SUBS     R0,R0,#+17
   \   000010FC   8DF80400           STRB     R0,[SP, #+4]
   1096                    if ( ( mm==1 ) && ( (yy % 4==0 && yy % 100 !=0) || ( yy % 400 == 0) ) )
   \   00001100   9DF80400           LDRB     R0,[SP, #+4]
   \   00001104   0128               CMP      R0,#+1
   \   00001106   23D1               BNE.N    ??UART_proNew_141
   \   00001108   9DF80100           LDRB     R0,[SP, #+1]
   \   0000110C   0421               MOVS     R1,#+4
   \   0000110E   90FBF1F2           SDIV     R2,R0,R1
   \   00001112   02FB1102           MLS      R2,R2,R1,R0
   \   00001116   002A               CMP      R2,#+0
   \   00001118   08D1               BNE.N    ??UART_proNew_142
   \   0000111A   9DF80100           LDRB     R0,[SP, #+1]
   \   0000111E   6421               MOVS     R1,#+100
   \   00001120   90FBF1F2           SDIV     R2,R0,R1
   \   00001124   02FB1100           MLS      R0,R2,R1,R0
   \   00001128   0028               CMP      R0,#+0
   \   0000112A   0DD1               BNE.N    ??UART_proNew_143
   \                     ??UART_proNew_142:
   \   0000112C   9DF80100           LDRB     R0,[SP, #+1]
   \   00001130   4FF4C871           MOV      R1,#+400
   \   00001134   90FBF1F2           SDIV     R2,R0,R1
   \   00001138   02FB1100           MLS      R0,R2,R1,R0
   \   0000113C   401E               SUBS     R0,R0,#+1
   \   0000113E   8041               SBCS     R0,R0,R0
   \   00001140   C00F               LSRS     R0,R0,#+31
   \   00001142   8DF80200           STRB     R0,[SP, #+2]
   \   00001146   06E0               B.N      ??UART_proNew_144
   1097                      ofs=1;
   \                     ??UART_proNew_143:
   \   00001148   0120               MOVS     R0,#+1
   \   0000114A   8DF80200           STRB     R0,[SP, #+2]
   \   0000114E   02E0               B.N      ??UART_proNew_144
   1098                    else
   1099                      ofs=0;
   \                     ??UART_proNew_141:
   \   00001150   0020               MOVS     R0,#+0
   \   00001152   8DF80200           STRB     R0,[SP, #+2]
   1100          	        tm=gWRecBuff[ip+14] - '0';
   \                     ??UART_proNew_144:
   \   00001156   DFF8A40B           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000115A   2818               ADDS     R0,R5,R0
   \   0000115C   807B               LDRB     R0,[R0, #+14]
   \   0000115E   3038               SUBS     R0,R0,#+48
   \   00001160   0700               MOVS     R7,R0
   1101                    tm= (tm << 4 ) + gWRecBuff[ip+15] - '0';//DD  
   \   00001162   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001164   DFF8940B           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001168   2818               ADDS     R0,R5,R0
   \   0000116A   C07B               LDRB     R0,[R0, #+15]
   \   0000116C   10EB0710           ADDS     R0,R0,R7, LSL #+4
   \   00001170   B0F13007           SUBS     R7,R0,#+48
   1102                    if ( tm > (MonthStr[mm]+ofs) || tm == 0 ){
   \   00001174   9DF80400           LDRB     R0,[SP, #+4]
   \   00001178   DFF8A41B           LDR.W    R1,??UART_proNew_127+0x28  ;; MonthStr
   \   0000117C   405C               LDRB     R0,[R0, R1]
   \   0000117E   9DF80210           LDRB     R1,[SP, #+2]
   \   00001182   0818               ADDS     R0,R1,R0
   \   00001184   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001186   B842               CMP      R0,R7
   \   00001188   02DB               BLT.N    ??UART_proNew_145
   \   0000118A   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000118C   002F               CMP      R7,#+0
   \   0000118E   09D1               BNE.N    ??UART_proNew_146
   1103                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_145:
   \   00001190   DFF8740B           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001194   0321               MOVS     R1,#+3
   \   00001196   0170               STRB     R1,[R0, #+0]
   1104                      Disp_status = 0x2A ; // display error
   \   00001198   DFF8800B           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   0000119C   2A21               MOVS     R1,#+42
   \   0000119E   0170               STRB     R1,[R0, #+0]
   1105                      return;
   \   000011A0   01F071B9           B.W      ??UART_proNew_4
   1106                    }
   1107                    RTC_write1(RTCDay,tm);
   \                     ??UART_proNew_146:
   \   000011A4   3900               MOVS     R1,R7
   \   000011A6   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000011A8   0420               MOVS     R0,#+4
   \   000011AA   ........           BL       RTC_write1
   1108                    RTC_write1(RTCMonth,mms);
   \   000011AE   9DF80710           LDRB     R1,[SP, #+7]
   \   000011B2   0520               MOVS     R0,#+5
   \   000011B4   ........           BL       RTC_write1
   1109                    RTC_write1(RTCYear,yys);
   \   000011B8   9DF80610           LDRB     R1,[SP, #+6]
   \   000011BC   0620               MOVS     R0,#+6
   \   000011BE   ........           BL       RTC_write1
   1110                    UartDelFlg=5;
   \   000011C2   DFF8400B           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   000011C6   0521               MOVS     R1,#+5
   \   000011C8   0170               STRB     R1,[R0, #+0]
   1111                    RecProcessing=2;//Inform self_test_1 ------- AP006
   \   000011CA   DFF83C0B           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000011CE   0221               MOVS     R1,#+2
   \   000011D0   0170               STRB     R1,[R0, #+0]
   1112                    return;
   \   000011D2   01F058B9           B.W      ??UART_proNew_4
   1113                  }else if (memcmp(&gWRecBuff[ip],GATME,10)==0){//"GALEDTIME="
   \                     ??UART_proNew_133:
   \   000011D6   0A22               MOVS     R2,#+10
   \   000011D8   DFF8481B           LDR.W    R1,??UART_proNew_127+0x2C  ;; GATME
   \   000011DC   DFF81C0B           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000011E0   2818               ADDS     R0,R5,R0
   \   000011E2   ........           BL       memcmp
   \   000011E6   0028               CMP      R0,#+0
   \   000011E8   40F0A680           BNE.W    ??UART_proNew_147
   1114                    if (  RTC_flag == 0 ){
   \   000011EC   DFF8280B           LDR.W    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   000011F0   0078               LDRB     R0,[R0, #+0]
   \   000011F2   0028               CMP      R0,#+0
   \   000011F4   09D1               BNE.N    ??UART_proNew_148
   1115                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   000011F6   DFF8100B           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000011FA   0321               MOVS     R1,#+3
   \   000011FC   0170               STRB     R1,[R0, #+0]
   1116                      Disp_status = 0x30 ; // display error
   \   000011FE   DFF81C0B           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001202   3021               MOVS     R1,#+48
   \   00001204   0170               STRB     R1,[R0, #+0]
   1117                      return;
   \   00001206   01F03EB9           B.W      ??UART_proNew_4
   1118                    }            
   1119                    for(i=0;i<6;i++)
   \                     ??UART_proNew_148:
   \   0000120A   0020               MOVS     R0,#+0
   \   0000120C   0400               MOVS     R4,R0
   \                     ??UART_proNew_149:
   \   0000120E   062C               CMP      R4,#+6
   \   00001210   21DA               BGE.N    ??UART_proNew_150
   1120                      if ( ( gWRecBuff[ip+10+i] > '9' ) || ( gWRecBuff[ip+10+i] < '0' ) || strlen((char *)&gWRecBuff[ip+10]) != 6 ){
   \   00001212   6019               ADDS     R0,R4,R5
   \   00001214   DFF8E41A           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001218   4018               ADDS     R0,R0,R1
   \   0000121A   807A               LDRB     R0,[R0, #+10]
   \   0000121C   3A28               CMP      R0,#+58
   \   0000121E   0ED2               BCS.N    ??UART_proNew_151
   \   00001220   6019               ADDS     R0,R4,R5
   \   00001222   DFF8D81A           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001226   4018               ADDS     R0,R0,R1
   \   00001228   807A               LDRB     R0,[R0, #+10]
   \   0000122A   3028               CMP      R0,#+48
   \   0000122C   07D3               BCC.N    ??UART_proNew_151
   \   0000122E   DFF8CC0A           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001232   2818               ADDS     R0,R5,R0
   \   00001234   0A30               ADDS     R0,R0,#+10
   \   00001236   ........           BL       strlen
   \   0000123A   0628               CMP      R0,#+6
   \   0000123C   09D0               BEQ.N    ??UART_proNew_152
   1121                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_151:
   \   0000123E   DFF8C80A           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001242   0321               MOVS     R1,#+3
   \   00001244   0170               STRB     R1,[R0, #+0]
   1122                        Disp_status = 0x2A ; // display error
   \   00001246   DFF8D40A           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   0000124A   2A21               MOVS     R1,#+42
   \   0000124C   0170               STRB     R1,[R0, #+0]
   1123                        return;
   \   0000124E   01F01AB9           B.W      ??UART_proNew_4
   1124                      }
   \                     ??UART_proNew_152:
   \   00001252   641C               ADDS     R4,R4,#+1
   \   00001254   DBE7               B.N      ??UART_proNew_149
   1125                    tm=gWRecBuff[ip+10]-'0';
   \                     ??UART_proNew_150:
   \   00001256   DFF8A40A           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000125A   2818               ADDS     R0,R5,R0
   \   0000125C   807A               LDRB     R0,[R0, #+10]
   \   0000125E   3038               SUBS     R0,R0,#+48
   \   00001260   0700               MOVS     R7,R0
   1126                    tm= (tm << 4 ) + gWRecBuff[ip+11]-'0';//HH
   \   00001262   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001264   DFF8940A           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001268   2818               ADDS     R0,R5,R0
   \   0000126A   C07A               LDRB     R0,[R0, #+11]
   \   0000126C   10EB0710           ADDS     R0,R0,R7, LSL #+4
   \   00001270   B0F13007           SUBS     R7,R0,#+48
   1127                    if ( tm >= 0x24 ){
   \   00001274   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00001276   242F               CMP      R7,#+36
   \   00001278   09D3               BCC.N    ??UART_proNew_153
   1128                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   0000127A   DFF88C0A           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   0000127E   0321               MOVS     R1,#+3
   \   00001280   0170               STRB     R1,[R0, #+0]
   1129                      Disp_status = 0x2A ; // display error            
   \   00001282   DFF8980A           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001286   2A21               MOVS     R1,#+42
   \   00001288   0170               STRB     R1,[R0, #+0]
   1130                      return;
   \   0000128A   01F0FCB8           B.W      ??UART_proNew_4
   1131                    } 
   1132                    hhs=tm;
   \                     ??UART_proNew_153:
   \   0000128E   8DF80870           STRB     R7,[SP, #+8]
   1133                    tm=gWRecBuff[ip+12]-'0';
   \   00001292   DFF8680A           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001296   2818               ADDS     R0,R5,R0
   \   00001298   007B               LDRB     R0,[R0, #+12]
   \   0000129A   3038               SUBS     R0,R0,#+48
   \   0000129C   0700               MOVS     R7,R0
   1134                    tm= (tm << 4 ) + gWRecBuff[ip+13]-'0';//mm
   \   0000129E   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000012A0   DFF8580A           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000012A4   2818               ADDS     R0,R5,R0
   \   000012A6   407B               LDRB     R0,[R0, #+13]
   \   000012A8   10EB0710           ADDS     R0,R0,R7, LSL #+4
   \   000012AC   B0F13007           SUBS     R7,R0,#+48
   1135                    if ( tm >= 0x60 ){
   \   000012B0   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000012B2   602F               CMP      R7,#+96
   \   000012B4   09D3               BCC.N    ??UART_proNew_154
   1136                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   000012B6   DFF8500A           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000012BA   0321               MOVS     R1,#+3
   \   000012BC   0170               STRB     R1,[R0, #+0]
   1137                      Disp_status = 0x2A ; // display error
   \   000012BE   DFF85C0A           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   000012C2   2A21               MOVS     R1,#+42
   \   000012C4   0170               STRB     R1,[R0, #+0]
   1138                      return;
   \   000012C6   01F0DEB8           B.W      ??UART_proNew_4
   1139                    }
   1140                    mns=tm;
   \                     ??UART_proNew_154:
   \   000012CA   8DF80970           STRB     R7,[SP, #+9]
   1141                    tm=gWRecBuff[ip+14]-'0';
   \   000012CE   DFF82C0A           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000012D2   2818               ADDS     R0,R5,R0
   \   000012D4   807B               LDRB     R0,[R0, #+14]
   \   000012D6   3038               SUBS     R0,R0,#+48
   \   000012D8   0700               MOVS     R7,R0
   1142                    tm= (tm << 4 ) + gWRecBuff[ip+15]-'0';//SS
   \   000012DA   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000012DC   DFF81C0A           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000012E0   2818               ADDS     R0,R5,R0
   \   000012E2   C07B               LDRB     R0,[R0, #+15]
   \   000012E4   10EB0710           ADDS     R0,R0,R7, LSL #+4
   \   000012E8   B0F13007           SUBS     R7,R0,#+48
   1143                    if ( tm >= 0x60 ){
   \   000012EC   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000012EE   602F               CMP      R7,#+96
   \   000012F0   09D3               BCC.N    ??UART_proNew_155
   1144                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   000012F2   DFF8140A           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000012F6   0321               MOVS     R1,#+3
   \   000012F8   0170               STRB     R1,[R0, #+0]
   1145                      Disp_status = 0x2A ; // display error
   \   000012FA   DFF8200A           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   000012FE   2A21               MOVS     R1,#+42
   \   00001300   0170               STRB     R1,[R0, #+0]
   1146                      return;
   \   00001302   01F0C0B8           B.W      ??UART_proNew_4
   1147                    }
   1148                    RTC_write1(RTCSecond,tm);
   \                     ??UART_proNew_155:
   \   00001306   3900               MOVS     R1,R7
   \   00001308   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000130A   0020               MOVS     R0,#+0
   \   0000130C   ........           BL       RTC_write1
   1149                    RTC_write1(RTCMinute,mns);
   \   00001310   9DF80910           LDRB     R1,[SP, #+9]
   \   00001314   0120               MOVS     R0,#+1
   \   00001316   ........           BL       RTC_write1
   1150                    RTC_write1(RTCHour,hhs);
   \   0000131A   9DF80810           LDRB     R1,[SP, #+8]
   \   0000131E   0220               MOVS     R0,#+2
   \   00001320   ........           BL       RTC_write1
   1151                    UartDelFlg=5;
   \   00001324   DFF8DC09           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001328   0521               MOVS     R1,#+5
   \   0000132A   0170               STRB     R1,[R0, #+0]
   1152                    RecProcessing=2;//Inform self_test_1 ------- AP006
   \   0000132C   DFF8D809           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001330   0221               MOVS     R1,#+2
   \   00001332   0170               STRB     R1,[R0, #+0]
   1153                    return;
   \   00001334   01F0A7B8           B.W      ??UART_proNew_4
   1154                 }else if (strcmp((char *)&gWRecBuff[ip],GADELALL)==0){//"GALEDDELALL"
   \                     ??UART_proNew_147:
   \   00001338   DFF8EC19           LDR.W    R1,??UART_proNew_127+0x30  ;; GADELALL
   \   0000133C   DFF8BC09           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001340   2818               ADDS     R0,R5,R0
   \   00001342   ........           BL       strcmp
   \   00001346   0028               CMP      R0,#+0
   \   00001348   09D1               BNE.N    ??UART_proNew_156
   1155                    UartDelFlg=2;
   \   0000134A   DFF8B809           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   0000134E   0221               MOVS     R1,#+2
   \   00001350   0170               STRB     R1,[R0, #+0]
   1156                    RecProcessing=2;//Inform self_test_1 ------- AP006
   \   00001352   DFF8B409           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001356   0221               MOVS     R1,#+2
   \   00001358   0170               STRB     R1,[R0, #+0]
   1157                	  return;
   \   0000135A   01F094B8           B.W      ??UART_proNew_4
   1158                 }else if (strcmp((char *)&gWRecBuff[ip],GARSTVALUE)==0){//"GALEDDEFAULT"
   \                     ??UART_proNew_156:
   \   0000135E   DFF8CC19           LDR.W    R1,??UART_proNew_127+0x34  ;; GARSTVALUE
   \   00001362   DFF89809           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001366   2818               ADDS     R0,R5,R0
   \   00001368   ........           BL       strcmp
   \   0000136C   0028               CMP      R0,#+0
   \   0000136E   0BD1               BNE.N    ??UART_proNew_157
   1159                    reset_value();
   \   00001370   ........           BL       reset_value
   1160                    UartDelFlg=2;
   \   00001374   DFF88C09           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001378   0221               MOVS     R1,#+2
   \   0000137A   0170               STRB     R1,[R0, #+0]
   1161                    RecProcessing=2;//Inform self_test_1 ------- AP006
   \   0000137C   DFF88809           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001380   0221               MOVS     R1,#+2
   \   00001382   0170               STRB     R1,[R0, #+0]
   1162                	  return;      	  
   \   00001384   01F07FB8           B.W      ??UART_proNew_4
   1163                  }else if (strcmp((char *)&gWRecBuff[ip],GADTMON)==0){//"GALEDTM=ON"
   \                     ??UART_proNew_157:
   \   00001388   DFF8A419           LDR.W    R1,??UART_proNew_127+0x38  ;; GADTMON
   \   0000138C   DFF86C09           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001390   2818               ADDS     R0,R5,R0
   \   00001392   ........           BL       strcmp
   \   00001396   0028               CMP      R0,#+0
   \   00001398   1CD1               BNE.N    ??UART_proNew_158
   1164                    if ( RTC_flag ){
   \   0000139A   DFF87C09           LDR.W    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   0000139E   0078               LDRB     R0,[R0, #+0]
   \   000013A0   0028               CMP      R0,#+0
   \   000013A2   0DD0               BEQ.N    ??UART_proNew_159
   1165                      dtm_flag = 1;
   \   000013A4   DFF88C09           LDR.W    R0,??UART_proNew_127+0x3C  ;; dtm_flag
   \   000013A8   0121               MOVS     R1,#+1
   \   000013AA   0170               STRB     R1,[R0, #+0]
   1166                      UartDelFlg = 5;//Show Time Immediately
   \   000013AC   DFF85409           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   000013B0   0521               MOVS     R1,#+5
   \   000013B2   0170               STRB     R1,[R0, #+0]
   1167                      RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   000013B4   DFF85009           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000013B8   0221               MOVS     R1,#+2
   \   000013BA   0170               STRB     R1,[R0, #+0]
   \   000013BC   01F063B8           B.W      ??UART_proNew_4
   1168                    }else{
   1169                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_159:
   \   000013C0   DFF84409           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000013C4   0321               MOVS     R1,#+3
   \   000013C6   0170               STRB     R1,[R0, #+0]
   1170                      Disp_status = 0x30 ; // display error            
   \   000013C8   DFF85009           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   000013CC   3021               MOVS     R1,#+48
   \   000013CE   0170               STRB     R1,[R0, #+0]
   \   000013D0   01F059B8           B.W      ??UART_proNew_4
   1171                    }
   1172                    return; 
   1173                  }else if (strcmp((char *)&gWRecBuff[ip],GADTMOFF)==0){//"GALEDTM=OFF"
   \                     ??UART_proNew_158:
   \   000013D4   DFF86019           LDR.W    R1,??UART_proNew_127+0x40  ;; GADTMOFF
   \   000013D8   DFF82009           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000013DC   2818               ADDS     R0,R5,R0
   \   000013DE   ........           BL       strcmp
   \   000013E2   0028               CMP      R0,#+0
   \   000013E4   1CD1               BNE.N    ??UART_proNew_160
   1174                    if ( RTC_flag ){
   \   000013E6   DFF83009           LDR.W    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   000013EA   0078               LDRB     R0,[R0, #+0]
   \   000013EC   0028               CMP      R0,#+0
   \   000013EE   0DD0               BEQ.N    ??UART_proNew_161
   1175                      dtm_flag = 0;
   \   000013F0   DFF84009           LDR.W    R0,??UART_proNew_127+0x3C  ;; dtm_flag
   \   000013F4   0021               MOVS     R1,#+0
   \   000013F6   0170               STRB     R1,[R0, #+0]
   1176                      UartDelFlg = 3;
   \   000013F8   DFF80809           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   000013FC   0321               MOVS     R1,#+3
   \   000013FE   0170               STRB     R1,[R0, #+0]
   1177                      RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001400   DFF80409           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001404   0221               MOVS     R1,#+2
   \   00001406   0170               STRB     R1,[R0, #+0]
   \   00001408   01F03DB8           B.W      ??UART_proNew_4
   1178                    }else{
   1179                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_161:
   \   0000140C   DFF8F808           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001410   0321               MOVS     R1,#+3
   \   00001412   0170               STRB     R1,[R0, #+0]
   1180                      Disp_status = 0x30 ; // display error                 
   \   00001414   DFF80409           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001418   3021               MOVS     R1,#+48
   \   0000141A   0170               STRB     R1,[R0, #+0]
   \   0000141C   01F033B8           B.W      ??UART_proNew_4
   1181                	  }
   1182                    return;
   1183                  }else if (strcmp((char *)&gWRecBuff[ip],GASCMON)==0){//"GALEDRESCM=ON"
   \                     ??UART_proNew_160:
   \   00001420   DFF81819           LDR.W    R1,??UART_proNew_127+0x44  ;; GASCMON
   \   00001424   DFF8D408           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001428   2818               ADDS     R0,R5,R0
   \   0000142A   ........           BL       strcmp
   \   0000142E   0028               CMP      R0,#+0
   \   00001430   0DD1               BNE.N    ??UART_proNew_162
   1184                    crc_flag = 1;
   \   00001432   DFF80C09           LDR.W    R0,??UART_proNew_127+0x48  ;; crc_flag
   \   00001436   0121               MOVS     R1,#+1
   \   00001438   0170               STRB     R1,[R0, #+0]
   1185                    UartDelFlg = 3;//do nothing
   \   0000143A   DFF8C808           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   0000143E   0321               MOVS     R1,#+3
   \   00001440   0170               STRB     R1,[R0, #+0]
   1186                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001442   DFF8C408           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001446   0221               MOVS     R1,#+2
   \   00001448   0170               STRB     R1,[R0, #+0]
   1187                	  return;
   \   0000144A   01F01CB8           B.W      ??UART_proNew_4
   1188                  }else if (strcmp((char *)&gWRecBuff[ip],GASCMOFF)==0){//"GALEDRESCM=OFF"
   \                     ??UART_proNew_162:
   \   0000144E   DFF8F418           LDR.W    R1,??UART_proNew_127+0x4C  ;; GASCMOFF
   \   00001452   DFF8A808           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001456   2818               ADDS     R0,R5,R0
   \   00001458   ........           BL       strcmp
   \   0000145C   0028               CMP      R0,#+0
   \   0000145E   0DD1               BNE.N    ??UART_proNew_163
   1189                    crc_flag = 0;
   \   00001460   DFF8DC08           LDR.W    R0,??UART_proNew_127+0x48  ;; crc_flag
   \   00001464   0021               MOVS     R1,#+0
   \   00001466   0170               STRB     R1,[R0, #+0]
   1190                    UartDelFlg = 3;//do nothing
   \   00001468   DFF89808           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   0000146C   0321               MOVS     R1,#+3
   \   0000146E   0170               STRB     R1,[R0, #+0]
   1191                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001470   DFF89408           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001474   0221               MOVS     R1,#+2
   \   00001476   0170               STRB     R1,[R0, #+0]
   1192                	  return;
   \   00001478   01F005B8           B.W      ??UART_proNew_4
   1193                  }else if (strcmp((char *)&gWRecBuff[ip],GASTEON)==0){//"GALEDTEST=ON"
   \                     ??UART_proNew_163:
   \   0000147C   DFF8C818           LDR.W    R1,??UART_proNew_127+0x50  ;; GASTEON
   \   00001480   DFF87808           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001484   2818               ADDS     R0,R5,R0
   \   00001486   ........           BL       strcmp
   \   0000148A   0028               CMP      R0,#+0
   \   0000148C   0DD1               BNE.N    ??UART_proNew_164
   1194                    te_flag = 1;
   \   0000148E   DFF8BC08           LDR.W    R0,??UART_proNew_127+0x54  ;; te_flag
   \   00001492   0121               MOVS     R1,#+1
   \   00001494   0170               STRB     R1,[R0, #+0]
   1195                    UartDelFlg = 3;//do nothing
   \   00001496   DFF86C08           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   0000149A   0321               MOVS     R1,#+3
   \   0000149C   0170               STRB     R1,[R0, #+0]
   1196                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   0000149E   DFF86808           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000014A2   0221               MOVS     R1,#+2
   \   000014A4   0170               STRB     R1,[R0, #+0]
   1197                	  return;
   \   000014A6   00F0EEBF           B.W      ??UART_proNew_4
   1198                  }else if (strcmp((char *)&gWRecBuff[ip],GASTEOFF)==0){//"GALEDTEST=OFF"
   \                     ??UART_proNew_164:
   \   000014AA   DFF8A418           LDR.W    R1,??UART_proNew_127+0x58  ;; GASTEOFF
   \   000014AE   DFF84C08           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000014B2   2818               ADDS     R0,R5,R0
   \   000014B4   ........           BL       strcmp
   \   000014B8   0028               CMP      R0,#+0
   \   000014BA   0DD1               BNE.N    ??UART_proNew_165
   1199                    te_flag = 0;
   \   000014BC   DFF88C08           LDR.W    R0,??UART_proNew_127+0x54  ;; te_flag
   \   000014C0   0021               MOVS     R1,#+0
   \   000014C2   0170               STRB     R1,[R0, #+0]
   1200                    UartDelFlg = 3;//do nothing
   \   000014C4   DFF83C08           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   000014C8   0321               MOVS     R1,#+3
   \   000014CA   0170               STRB     R1,[R0, #+0]
   1201                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   000014CC   DFF83808           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000014D0   0221               MOVS     R1,#+2
   \   000014D2   0170               STRB     R1,[R0, #+0]
   1202                	  return;      	        	       	        	      	        	       	  
   \   000014D4   00F0D7BF           B.W      ??UART_proNew_4
   1203                  }else if (strcmp((char *)&gWRecBuff[ip],GATMD1)==0){//"GALEDTMD=1"
   \                     ??UART_proNew_165:
   \   000014D8   DFF87818           LDR.W    R1,??UART_proNew_127+0x5C  ;; GATMD1
   \   000014DC   DFF81C08           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000014E0   2818               ADDS     R0,R5,R0
   \   000014E2   ........           BL       strcmp
   \   000014E6   0028               CMP      R0,#+0
   \   000014E8   1CD1               BNE.N    ??UART_proNew_166
   1204                    if ( RTC_flag == 0 ){
   \   000014EA   DFF82C08           LDR.W    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   000014EE   0078               LDRB     R0,[R0, #+0]
   \   000014F0   0028               CMP      R0,#+0
   \   000014F2   09D1               BNE.N    ??UART_proNew_167
   1205                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   000014F4   DFF81008           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000014F8   0321               MOVS     R1,#+3
   \   000014FA   0170               STRB     R1,[R0, #+0]
   1206                      Disp_status = 0x30 ; // display error
   \   000014FC   DFF81C08           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001500   3021               MOVS     R1,#+48
   \   00001502   0170               STRB     R1,[R0, #+0]
   1207                      return;
   \   00001504   00F0BFBF           B.W      ??UART_proNew_4
   1208                    }           
   1209                    tmd_flag = 1;
   \                     ??UART_proNew_167:
   \   00001508   DFF84C08           LDR.W    R0,??UART_proNew_127+0x60  ;; tmd_flag
   \   0000150C   0121               MOVS     R1,#+1
   \   0000150E   0170               STRB     R1,[R0, #+0]
   1210                    UartDelFlg = 5;
   \   00001510   DFF8F007           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001514   0521               MOVS     R1,#+5
   \   00001516   0170               STRB     R1,[R0, #+0]
   1211                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001518   DFF8EC07           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   0000151C   0221               MOVS     R1,#+2
   \   0000151E   0170               STRB     R1,[R0, #+0]
   1212                	  return;
   \   00001520   00F0B1BF           B.W      ??UART_proNew_4
   1213                  }else if (strcmp((char *)&gWRecBuff[ip],GATMD2)==0){//"GALEDTMD=2"
   \                     ??UART_proNew_166:
   \   00001524   DFF83418           LDR.W    R1,??UART_proNew_127+0x64  ;; GATMD2
   \   00001528   DFF8D007           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000152C   2818               ADDS     R0,R5,R0
   \   0000152E   ........           BL       strcmp
   \   00001532   0028               CMP      R0,#+0
   \   00001534   1CD1               BNE.N    ??UART_proNew_168
   1214                    if ( RTC_flag == 0 ){
   \   00001536   DFF8E007           LDR.W    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   0000153A   0078               LDRB     R0,[R0, #+0]
   \   0000153C   0028               CMP      R0,#+0
   \   0000153E   09D1               BNE.N    ??UART_proNew_169
   1215                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   00001540   DFF8C407           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001544   0321               MOVS     R1,#+3
   \   00001546   0170               STRB     R1,[R0, #+0]
   1216                      Disp_status = 0x30 ; // display error
   \   00001548   DFF8D007           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   0000154C   3021               MOVS     R1,#+48
   \   0000154E   0170               STRB     R1,[R0, #+0]
   1217                      return;
   \   00001550   00F099BF           B.W      ??UART_proNew_4
   1218                    }           
   1219                    tmd_flag = 2;
   \                     ??UART_proNew_169:
   \   00001554   DFF80008           LDR.W    R0,??UART_proNew_127+0x60  ;; tmd_flag
   \   00001558   0221               MOVS     R1,#+2
   \   0000155A   0170               STRB     R1,[R0, #+0]
   1220                    UartDelFlg = 5;
   \   0000155C   DFF8A407           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001560   0521               MOVS     R1,#+5
   \   00001562   0170               STRB     R1,[R0, #+0]
   1221                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001564   DFF8A007           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001568   0221               MOVS     R1,#+2
   \   0000156A   0170               STRB     R1,[R0, #+0]
   1222                	  return;
   \   0000156C   00F08BBF           B.W      ??UART_proNew_4
   1223                  }else if (memcmp(&gWRecBuff[ip],GAHTM,10)==0){//"GALEDSHTM="
   \                     ??UART_proNew_168:
   \   00001570   0A22               MOVS     R2,#+10
   \   00001572   DFF8EC17           LDR.W    R1,??UART_proNew_127+0x68  ;; GAHTM
   \   00001576   DFF88407           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000157A   2818               ADDS     R0,R5,R0
   \   0000157C   ........           BL       memcmp
   \   00001580   0028               CMP      R0,#+0
   \   00001582   48D1               BNE.N    ??UART_proNew_170
   1224                    for(i=0;i<3;i++)
   \   00001584   0020               MOVS     R0,#+0
   \   00001586   0400               MOVS     R4,R0
   \                     ??UART_proNew_171:
   \   00001588   032C               CMP      R4,#+3
   \   0000158A   21DA               BGE.N    ??UART_proNew_172
   1225                      if ( ( gWRecBuff[ip+10+i] > '9' ) || ( gWRecBuff[ip+10+i] < '0' ) || strlen((char *)&gWRecBuff[ip+10]) != 3 ){
   \   0000158C   6019               ADDS     R0,R4,R5
   \   0000158E   DFF86C17           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001592   4018               ADDS     R0,R0,R1
   \   00001594   807A               LDRB     R0,[R0, #+10]
   \   00001596   3A28               CMP      R0,#+58
   \   00001598   0ED2               BCS.N    ??UART_proNew_173
   \   0000159A   6019               ADDS     R0,R4,R5
   \   0000159C   DFF85C17           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000015A0   4018               ADDS     R0,R0,R1
   \   000015A2   807A               LDRB     R0,[R0, #+10]
   \   000015A4   3028               CMP      R0,#+48
   \   000015A6   07D3               BCC.N    ??UART_proNew_173
   \   000015A8   DFF85007           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000015AC   2818               ADDS     R0,R5,R0
   \   000015AE   0A30               ADDS     R0,R0,#+10
   \   000015B0   ........           BL       strlen
   \   000015B4   0328               CMP      R0,#+3
   \   000015B6   09D0               BEQ.N    ??UART_proNew_174
   1226                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_173:
   \   000015B8   DFF84C07           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000015BC   0321               MOVS     R1,#+3
   \   000015BE   0170               STRB     R1,[R0, #+0]
   1227                        Disp_status = 0x2A ; // display error
   \   000015C0   DFF85807           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   000015C4   2A21               MOVS     R1,#+42
   \   000015C6   0170               STRB     R1,[R0, #+0]
   1228                        return;
   \   000015C8   00F05DBF           B.W      ??UART_proNew_4
   1229                      } 
   \                     ??UART_proNew_174:
   \   000015CC   641C               ADDS     R4,R4,#+1
   \   000015CE   DBE7               B.N      ??UART_proNew_171
   1230                    tdy_flag=(gWRecBuff[ip+10]-'0')*100+(gWRecBuff[ip+11]-'0')*10+gWRecBuff[ip+12]-'0';
   \                     ??UART_proNew_172:
   \   000015D0   DFF82807           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000015D4   2818               ADDS     R0,R5,R0
   \   000015D6   807A               LDRB     R0,[R0, #+10]
   \   000015D8   6421               MOVS     R1,#+100
   \   000015DA   DFF82027           LDR.W    R2,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000015DE   AA18               ADDS     R2,R5,R2
   \   000015E0   D27A               LDRB     R2,[R2, #+11]
   \   000015E2   0A23               MOVS     R3,#+10
   \   000015E4   02FB03F2           MUL      R2,R2,R3
   \   000015E8   00FB0120           MLA      R0,R0,R1,R2
   \   000015EC   DFF80C17           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000015F0   6918               ADDS     R1,R5,R1
   \   000015F2   097B               LDRB     R1,[R1, #+12]
   \   000015F4   0818               ADDS     R0,R1,R0
   \   000015F6   DFF86C17           LDR.W    R1,??UART_proNew_127+0x6C  ;; 0xffffeb30
   \   000015FA   0818               ADDS     R0,R1,R0
   \   000015FC   DFF86817           LDR.W    R1,??UART_proNew_127+0x70  ;; tdy_flag
   \   00001600   0860               STR      R0,[R1, #+0]
   1231                    UartDelFlg = 5;
   \   00001602   DFF80007           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001606   0521               MOVS     R1,#+5
   \   00001608   0170               STRB     R1,[R0, #+0]
   1232                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   0000160A   DFF8FC06           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   0000160E   0221               MOVS     R1,#+2
   \   00001610   0170               STRB     R1,[R0, #+0]
   1233                	  return;
   \   00001612   00F038BF           B.W      ??UART_proNew_4
   1234                  }else if (memcmp(&gWRecBuff[ip],GAGTM,10)==0){//"GALEDMGTM="
   \                     ??UART_proNew_170:
   \   00001616   0A22               MOVS     R2,#+10
   \   00001618   DFF85017           LDR.W    R1,??UART_proNew_127+0x74  ;; GAGTM
   \   0000161C   DFF8DC06           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001620   2818               ADDS     R0,R5,R0
   \   00001622   ........           BL       memcmp
   \   00001626   0028               CMP      R0,#+0
   \   00001628   48D1               BNE.N    ??UART_proNew_175
   1235                    for(i=0;i<3;i++)
   \   0000162A   0020               MOVS     R0,#+0
   \   0000162C   0400               MOVS     R4,R0
   \                     ??UART_proNew_176:
   \   0000162E   032C               CMP      R4,#+3
   \   00001630   21DA               BGE.N    ??UART_proNew_177
   1236                      if ( ( gWRecBuff[ip+10+i] > '9' ) || ( gWRecBuff[ip+10+i] < '0' ) || strlen((char *)&gWRecBuff[ip+10]) != 3 ){
   \   00001632   6019               ADDS     R0,R4,R5
   \   00001634   DFF8C416           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001638   4018               ADDS     R0,R0,R1
   \   0000163A   807A               LDRB     R0,[R0, #+10]
   \   0000163C   3A28               CMP      R0,#+58
   \   0000163E   0ED2               BCS.N    ??UART_proNew_178
   \   00001640   6019               ADDS     R0,R4,R5
   \   00001642   DFF8B816           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001646   4018               ADDS     R0,R0,R1
   \   00001648   807A               LDRB     R0,[R0, #+10]
   \   0000164A   3028               CMP      R0,#+48
   \   0000164C   07D3               BCC.N    ??UART_proNew_178
   \   0000164E   DFF8AC06           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001652   2818               ADDS     R0,R5,R0
   \   00001654   0A30               ADDS     R0,R0,#+10
   \   00001656   ........           BL       strlen
   \   0000165A   0328               CMP      R0,#+3
   \   0000165C   09D0               BEQ.N    ??UART_proNew_179
   1237                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_178:
   \   0000165E   DFF8A806           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001662   0321               MOVS     R1,#+3
   \   00001664   0170               STRB     R1,[R0, #+0]
   1238                        Disp_status = 0x2A ; // display error
   \   00001666   DFF8B406           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   0000166A   2A21               MOVS     R1,#+42
   \   0000166C   0170               STRB     R1,[R0, #+0]
   1239                        return;
   \   0000166E   00F00ABF           B.W      ??UART_proNew_4
   1240                      } 
   \                     ??UART_proNew_179:
   \   00001672   641C               ADDS     R4,R4,#+1
   \   00001674   DBE7               B.N      ??UART_proNew_176
   1241                    nst_flag=(gWRecBuff[ip+10]-'0')*100+(gWRecBuff[ip+11]-'0')*10+gWRecBuff[ip+12]-'0';
   \                     ??UART_proNew_177:
   \   00001676   DFF88406           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000167A   2818               ADDS     R0,R5,R0
   \   0000167C   807A               LDRB     R0,[R0, #+10]
   \   0000167E   6421               MOVS     R1,#+100
   \   00001680   DFF87826           LDR.W    R2,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001684   AA18               ADDS     R2,R5,R2
   \   00001686   D27A               LDRB     R2,[R2, #+11]
   \   00001688   0A23               MOVS     R3,#+10
   \   0000168A   02FB03F2           MUL      R2,R2,R3
   \   0000168E   00FB0120           MLA      R0,R0,R1,R2
   \   00001692   DFF86816           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001696   6918               ADDS     R1,R5,R1
   \   00001698   097B               LDRB     R1,[R1, #+12]
   \   0000169A   0818               ADDS     R0,R1,R0
   \   0000169C   DFF8C416           LDR.W    R1,??UART_proNew_127+0x6C  ;; 0xffffeb30
   \   000016A0   0818               ADDS     R0,R1,R0
   \   000016A2   DFF8CC16           LDR.W    R1,??UART_proNew_127+0x78  ;; nst_flag
   \   000016A6   0860               STR      R0,[R1, #+0]
   1242                    UartDelFlg = 3;//do nothing
   \   000016A8   DFF85806           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   000016AC   0321               MOVS     R1,#+3
   \   000016AE   0170               STRB     R1,[R0, #+0]
   1243                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   000016B0   DFF85406           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000016B4   0221               MOVS     R1,#+2
   \   000016B6   0170               STRB     R1,[R0, #+0]
   1244                	  return;
   \   000016B8   00F0E5BE           B.W      ??UART_proNew_4
   1245                	}else if (memcmp(&gWRecBuff[ip],GARDY,11)==0){//"GALEDCLRDY="
   \                     ??UART_proNew_175:
   \   000016BC   0B22               MOVS     R2,#+11
   \   000016BE   DFF8B416           LDR.W    R1,??UART_proNew_127+0x7C  ;; GARDY
   \   000016C2   DFF83806           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000016C6   2818               ADDS     R0,R5,R0
   \   000016C8   ........           BL       memcmp
   \   000016CC   0028               CMP      R0,#+0
   \   000016CE   48D1               BNE.N    ??UART_proNew_180
   1246                    for(i=0;i<3;i++)
   \   000016D0   0020               MOVS     R0,#+0
   \   000016D2   0400               MOVS     R4,R0
   \                     ??UART_proNew_181:
   \   000016D4   032C               CMP      R4,#+3
   \   000016D6   21DA               BGE.N    ??UART_proNew_182
   1247                      if ( ( gWRecBuff[ip+11+i] > '9' ) || ( gWRecBuff[ip+11+i] < '0' ) || strlen((char *)&gWRecBuff[ip+11]) != 3 ){
   \   000016D8   6019               ADDS     R0,R4,R5
   \   000016DA   DFF82016           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000016DE   4018               ADDS     R0,R0,R1
   \   000016E0   C07A               LDRB     R0,[R0, #+11]
   \   000016E2   3A28               CMP      R0,#+58
   \   000016E4   0ED2               BCS.N    ??UART_proNew_183
   \   000016E6   6019               ADDS     R0,R4,R5
   \   000016E8   DFF81016           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000016EC   4018               ADDS     R0,R0,R1
   \   000016EE   C07A               LDRB     R0,[R0, #+11]
   \   000016F0   3028               CMP      R0,#+48
   \   000016F2   07D3               BCC.N    ??UART_proNew_183
   \   000016F4   DFF80406           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000016F8   2818               ADDS     R0,R5,R0
   \   000016FA   0B30               ADDS     R0,R0,#+11
   \   000016FC   ........           BL       strlen
   \   00001700   0328               CMP      R0,#+3
   \   00001702   09D0               BEQ.N    ??UART_proNew_184
   1248                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_183:
   \   00001704   DFF80006           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001708   0321               MOVS     R1,#+3
   \   0000170A   0170               STRB     R1,[R0, #+0]
   1249                        Disp_status = 0x2A ; // display error
   \   0000170C   DFF80C06           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001710   2A21               MOVS     R1,#+42
   \   00001712   0170               STRB     R1,[R0, #+0]
   1250                        return;
   \   00001714   00F0B7BE           B.W      ??UART_proNew_4
   1251                      } 
   \                     ??UART_proNew_184:
   \   00001718   641C               ADDS     R4,R4,#+1
   \   0000171A   DBE7               B.N      ??UART_proNew_181
   1252                    act_flag=(gWRecBuff[ip+11]-'0')*100+(gWRecBuff[ip+12]-'0')*10+gWRecBuff[ip+13]-'0';
   \                     ??UART_proNew_182:
   \   0000171C   DFF8DC05           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001720   2818               ADDS     R0,R5,R0
   \   00001722   C07A               LDRB     R0,[R0, #+11]
   \   00001724   6421               MOVS     R1,#+100
   \   00001726   DFF8D425           LDR.W    R2,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000172A   AA18               ADDS     R2,R5,R2
   \   0000172C   127B               LDRB     R2,[R2, #+12]
   \   0000172E   0A23               MOVS     R3,#+10
   \   00001730   02FB03F2           MUL      R2,R2,R3
   \   00001734   00FB0120           MLA      R0,R0,R1,R2
   \   00001738   DFF8C015           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000173C   6918               ADDS     R1,R5,R1
   \   0000173E   497B               LDRB     R1,[R1, #+13]
   \   00001740   0818               ADDS     R0,R1,R0
   \   00001742   DFF82016           LDR.W    R1,??UART_proNew_127+0x6C  ;; 0xffffeb30
   \   00001746   0818               ADDS     R0,R1,R0
   \   00001748   DFF8401D           LDR.W    R1,??UART_proNew_185  ;; act_flag
   \   0000174C   0860               STR      R0,[R1, #+0]
   1253                    UartDelFlg = 3;//do nothing
   \   0000174E   DFF8B405           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001752   0321               MOVS     R1,#+3
   \   00001754   0170               STRB     R1,[R0, #+0]
   1254                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001756   DFF8B005           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   0000175A   0221               MOVS     R1,#+2
   \   0000175C   0170               STRB     R1,[R0, #+0]
   1255                	  return;
   \   0000175E   00F092BE           B.W      ??UART_proNew_4
   1256                	}else if (memcmp(&gWRecBuff[ip],GARCT,11)==0){//"GALEDCLRCT="
   \                     ??UART_proNew_180:
   \   00001762   0B22               MOVS     R2,#+11
   \   00001764   DFF8281D           LDR.W    R1,??UART_proNew_185+0x4  ;; GARCT
   \   00001768   DFF89005           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000176C   2818               ADDS     R0,R5,R0
   \   0000176E   ........           BL       memcmp
   \   00001772   0028               CMP      R0,#+0
   \   00001774   48D1               BNE.N    ??UART_proNew_186
   1257                    for(i=0;i<3;i++)
   \   00001776   0020               MOVS     R0,#+0
   \   00001778   0400               MOVS     R4,R0
   \                     ??UART_proNew_187:
   \   0000177A   032C               CMP      R4,#+3
   \   0000177C   21DA               BGE.N    ??UART_proNew_188
   1258                      if ( ( gWRecBuff[ip+11+i] > '9' ) || ( gWRecBuff[ip+11+i] < '0' ) || strlen((char *)&gWRecBuff[ip+11]) != 3 ){
   \   0000177E   6019               ADDS     R0,R4,R5
   \   00001780   DFF87815           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001784   4018               ADDS     R0,R0,R1
   \   00001786   C07A               LDRB     R0,[R0, #+11]
   \   00001788   3A28               CMP      R0,#+58
   \   0000178A   0ED2               BCS.N    ??UART_proNew_189
   \   0000178C   6019               ADDS     R0,R4,R5
   \   0000178E   DFF86C15           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001792   4018               ADDS     R0,R0,R1
   \   00001794   C07A               LDRB     R0,[R0, #+11]
   \   00001796   3028               CMP      R0,#+48
   \   00001798   07D3               BCC.N    ??UART_proNew_189
   \   0000179A   DFF86005           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000179E   2818               ADDS     R0,R5,R0
   \   000017A0   0B30               ADDS     R0,R0,#+11
   \   000017A2   ........           BL       strlen
   \   000017A6   0328               CMP      R0,#+3
   \   000017A8   09D0               BEQ.N    ??UART_proNew_190
   1259                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_189:
   \   000017AA   DFF85C05           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000017AE   0321               MOVS     R1,#+3
   \   000017B0   0170               STRB     R1,[R0, #+0]
   1260                        Disp_status = 0x2A ; // display error
   \   000017B2   DFF86805           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   000017B6   2A21               MOVS     R1,#+42
   \   000017B8   0170               STRB     R1,[R0, #+0]
   1261                        return;
   \   000017BA   00F064BE           B.W      ??UART_proNew_4
   1262                      } 
   \                     ??UART_proNew_190:
   \   000017BE   641C               ADDS     R4,R4,#+1
   \   000017C0   DBE7               B.N      ??UART_proNew_187
   1263                    acc_flag=(gWRecBuff[ip+11]-'0')*100+(gWRecBuff[ip+12]-'0')*10+gWRecBuff[ip+13]-'0';
   \                     ??UART_proNew_188:
   \   000017C2   DFF83805           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000017C6   2818               ADDS     R0,R5,R0
   \   000017C8   C07A               LDRB     R0,[R0, #+11]
   \   000017CA   6421               MOVS     R1,#+100
   \   000017CC   DFF82C25           LDR.W    R2,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000017D0   AA18               ADDS     R2,R5,R2
   \   000017D2   127B               LDRB     R2,[R2, #+12]
   \   000017D4   0A23               MOVS     R3,#+10
   \   000017D6   02FB03F2           MUL      R2,R2,R3
   \   000017DA   00FB0120           MLA      R0,R0,R1,R2
   \   000017DE   DFF81C15           LDR.W    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000017E2   6918               ADDS     R1,R5,R1
   \   000017E4   497B               LDRB     R1,[R1, #+13]
   \   000017E6   0818               ADDS     R0,R1,R0
   \   000017E8   DFF87815           LDR.W    R1,??UART_proNew_127+0x6C  ;; 0xffffeb30
   \   000017EC   0818               ADDS     R0,R1,R0
   \   000017EE   DFF8A41C           LDR.W    R1,??UART_proNew_185+0x8  ;; acc_flag
   \   000017F2   0860               STR      R0,[R1, #+0]
   1264                    UartDelFlg = 3;//do nothing
   \   000017F4   DFF80C05           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   000017F8   0321               MOVS     R1,#+3
   \   000017FA   0170               STRB     R1,[R0, #+0]
   1265                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   000017FC   DFF80805           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001800   0221               MOVS     R1,#+2
   \   00001802   0170               STRB     R1,[R0, #+0]
   1266                	  return;
   \   00001804   00F03FBE           B.W      ??UART_proNew_4
   1267                  }else if (strcmp((char *)&gWRecBuff[ip],GAENG)==0){//"GALEDLANG=ENG"
   \                     ??UART_proNew_186:
   \   00001808   DFF88C1C           LDR.W    R1,??UART_proNew_185+0xC  ;; GAENG
   \   0000180C   DFF8EC04           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001810   2818               ADDS     R0,R5,R0
   \   00001812   ........           BL       strcmp
   \   00001816   0028               CMP      R0,#+0
   \   00001818   1CD1               BNE.N    ??UART_proNew_191
   1268                    if (  RTC_flag == 0 ){
   \   0000181A   DFF8FC04           LDR.W    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   0000181E   0078               LDRB     R0,[R0, #+0]
   \   00001820   0028               CMP      R0,#+0
   \   00001822   09D1               BNE.N    ??UART_proNew_192
   1269                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   00001824   DFF8E004           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001828   0321               MOVS     R1,#+3
   \   0000182A   0170               STRB     R1,[R0, #+0]
   1270                      Disp_status = 0x30 ; // display error
   \   0000182C   DFF8EC04           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001830   3021               MOVS     R1,#+48
   \   00001832   0170               STRB     R1,[R0, #+0]
   1271                      return;
   \   00001834   00F027BE           B.W      ??UART_proNew_4
   1272                    }           
   1273                    lng_flag = 0;
   \                     ??UART_proNew_192:
   \   00001838   DFF8600C           LDR.W    R0,??UART_proNew_185+0x10  ;; lng_flag
   \   0000183C   0021               MOVS     R1,#+0
   \   0000183E   0170               STRB     R1,[R0, #+0]
   1274                    UartDelFlg = 5;
   \   00001840   DFF8C004           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001844   0521               MOVS     R1,#+5
   \   00001846   0170               STRB     R1,[R0, #+0]
   1275                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001848   DFF8BC04           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   0000184C   0221               MOVS     R1,#+2
   \   0000184E   0170               STRB     R1,[R0, #+0]
   1276                	  return;
   \   00001850   00F019BE           B.W      ??UART_proNew_4
   1277                  }else if (strcmp((char *)&gWRecBuff[ip],GAFRA)==0){//"GALEDLANG=FRA"
   \                     ??UART_proNew_191:
   \   00001854   DFF8481C           LDR.W    R1,??UART_proNew_185+0x14  ;; GAFRA
   \   00001858   DFF8A004           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000185C   2818               ADDS     R0,R5,R0
   \   0000185E   ........           BL       strcmp
   \   00001862   0028               CMP      R0,#+0
   \   00001864   1CD1               BNE.N    ??UART_proNew_193
   1278                    if ( RTC_flag == 0 ){
   \   00001866   DFF8B004           LDR.W    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   0000186A   0078               LDRB     R0,[R0, #+0]
   \   0000186C   0028               CMP      R0,#+0
   \   0000186E   09D1               BNE.N    ??UART_proNew_194
   1279                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   00001870   DFF89404           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001874   0321               MOVS     R1,#+3
   \   00001876   0170               STRB     R1,[R0, #+0]
   1280                      Disp_status = 0x30 ; // display error
   \   00001878   DFF8A004           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   0000187C   3021               MOVS     R1,#+48
   \   0000187E   0170               STRB     R1,[R0, #+0]
   1281                      return;
   \   00001880   00F001BE           B.W      ??UART_proNew_4
   1282                    }           
   1283                    lng_flag = 1;
   \                     ??UART_proNew_194:
   \   00001884   DFF8140C           LDR.W    R0,??UART_proNew_185+0x10  ;; lng_flag
   \   00001888   0121               MOVS     R1,#+1
   \   0000188A   0170               STRB     R1,[R0, #+0]
   1284                    UartDelFlg = 5;
   \   0000188C   DFF87404           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001890   0521               MOVS     R1,#+5
   \   00001892   0170               STRB     R1,[R0, #+0]
   1285                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001894   DFF87004           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001898   0221               MOVS     R1,#+2
   \   0000189A   0170               STRB     R1,[R0, #+0]
   1286                	  return;
   \   0000189C   00F0F3BD           B.W      ??UART_proNew_4
   1287                  }else if (strcmp((char *)&gWRecBuff[ip],GATMHR24)==0){//"GALEDTMHR=24"
   \                     ??UART_proNew_193:
   \   000018A0   DFF8001C           LDR.W    R1,??UART_proNew_185+0x18  ;; GATMHR24
   \   000018A4   DFF85404           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000018A8   2818               ADDS     R0,R5,R0
   \   000018AA   ........           BL       strcmp
   \   000018AE   0028               CMP      R0,#+0
   \   000018B0   20D1               BNE.N    ??UART_proNew_195
   1288                    if (  RTC_flag == 0 ){
   \   000018B2   DFF86404           LDR.W    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   000018B6   0078               LDRB     R0,[R0, #+0]
   \   000018B8   0028               CMP      R0,#+0
   \   000018BA   09D1               BNE.N    ??UART_proNew_196
   1289                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   000018BC   DFF84804           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000018C0   0321               MOVS     R1,#+3
   \   000018C2   0170               STRB     R1,[R0, #+0]
   1290                      Disp_status = 0x30 ; // display error
   \   000018C4   DFF85404           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   000018C8   3021               MOVS     R1,#+48
   \   000018CA   0170               STRB     R1,[R0, #+0]
   1291                      return;
   \   000018CC   00F0DBBD           B.W      ??UART_proNew_4
   1292                    }           
   1293                    tmhr_flag = 0;
   \                     ??UART_proNew_196:
   \   000018D0   DFF8D40B           LDR.W    R0,??UART_proNew_185+0x1C  ;; tmhr_flag
   \   000018D4   0021               MOVS     R1,#+0
   \   000018D6   0170               STRB     R1,[R0, #+0]
   1294                    if ( LED_byte_Length == 10 ){
   1295                      tm_strt = 7;
   \   000018D8   DFF8D00B           LDR.W    R0,??UART_proNew_185+0x20  ;; tm_strt
   \   000018DC   0721               MOVS     R1,#+7
   \   000018DE   0170               STRB     R1,[R0, #+0]
   1296                    }else{
   1297                      tm_strt = 47;
   1298                    }
   1299                    UartDelFlg = 5;
   \   000018E0   DFF82004           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   000018E4   0521               MOVS     R1,#+5
   \   000018E6   0170               STRB     R1,[R0, #+0]
   1300                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   000018E8   DFF81C04           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000018EC   0221               MOVS     R1,#+2
   \   000018EE   0170               STRB     R1,[R0, #+0]
   1301                	  return;
   \   000018F0   00F0C9BD           B.W      ??UART_proNew_4
   1302                  }else if (strcmp((char *)&gWRecBuff[ip],GATMHR12)==0){//"GALEDTMHR=12"
   \                     ??UART_proNew_195:
   \   000018F4   DFF8B81B           LDR.W    R1,??UART_proNew_185+0x24  ;; GATMHR12
   \   000018F8   DFF80004           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000018FC   2818               ADDS     R0,R5,R0
   \   000018FE   ........           BL       strcmp
   \   00001902   0028               CMP      R0,#+0
   \   00001904   20D1               BNE.N    ??UART_proNew_197
   1303                    if ( RTC_flag == 0 ){
   \   00001906   DFF81004           LDR.W    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   0000190A   0078               LDRB     R0,[R0, #+0]
   \   0000190C   0028               CMP      R0,#+0
   \   0000190E   09D1               BNE.N    ??UART_proNew_198
   1304                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   00001910   DFF8F403           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001914   0321               MOVS     R1,#+3
   \   00001916   0170               STRB     R1,[R0, #+0]
   1305                      Disp_status = 0x30 ; // display error
   \   00001918   DFF80004           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   0000191C   3021               MOVS     R1,#+48
   \   0000191E   0170               STRB     R1,[R0, #+0]
   1306                      return;
   \   00001920   00F0B1BD           B.W      ??UART_proNew_4
   1307                    }           
   1308                    tmhr_flag = 1;
   \                     ??UART_proNew_198:
   \   00001924   DFF8800B           LDR.W    R0,??UART_proNew_185+0x1C  ;; tmhr_flag
   \   00001928   0121               MOVS     R1,#+1
   \   0000192A   0170               STRB     R1,[R0, #+0]
   1309                    if ( LED_byte_Length == 10 ){
   1310                      tm_strt = 1;
   \   0000192C   DFF87C0B           LDR.W    R0,??UART_proNew_185+0x20  ;; tm_strt
   \   00001930   0121               MOVS     R1,#+1
   \   00001932   0170               STRB     R1,[R0, #+0]
   1311                    }else{
   1312                      tm_strt = 41;
   1313                    }
   1314                    UartDelFlg = 5;
   \   00001934   DFF8CC03           LDR.W    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001938   0521               MOVS     R1,#+5
   \   0000193A   0170               STRB     R1,[R0, #+0]
   1315                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   0000193C   DFF8C803           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001940   0221               MOVS     R1,#+2
   \   00001942   0170               STRB     R1,[R0, #+0]
   1316                	  return;      	  
   \   00001944   00F09FBD           B.W      ??UART_proNew_4
   1317                  }else if (memcmp(&gWRecBuff[ip],GADTMD,10)==0){//"GALEDDTMD=" 
   \                     ??UART_proNew_197:
   \   00001948   0A22               MOVS     R2,#+10
   \   0000194A   DFF8681B           LDR.W    R1,??UART_proNew_185+0x28  ;; GADTMD
   \   0000194E   DFF8AC03           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001952   2818               ADDS     R0,R5,R0
   \   00001954   ........           BL       memcmp
   \   00001958   0028               CMP      R0,#+0
   \   0000195A   54D1               BNE.N    ??UART_proNew_199
   1318                    if (  RTC_flag == 0 ){
   \   0000195C   DFF8B803           LDR.W    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   00001960   0078               LDRB     R0,[R0, #+0]
   \   00001962   0028               CMP      R0,#+0
   \   00001964   09D1               BNE.N    ??UART_proNew_200
   1319                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   00001966   DFF8A003           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   0000196A   0321               MOVS     R1,#+3
   \   0000196C   0170               STRB     R1,[R0, #+0]
   1320                      Disp_status = 0x30 ; // display error
   \   0000196E   DFF8AC03           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001972   3021               MOVS     R1,#+48
   \   00001974   0170               STRB     R1,[R0, #+0]
   1321                      return;
   \   00001976   00F086BD           B.W      ??UART_proNew_4
   1322                    }           
   1323                    if ( (( gWRecBuff[ip+10] > '9' ) || ( gWRecBuff[ip+10] < '0' )) && ( ( gWRecBuff[ip+10] > 'C') || (gWRecBuff[ip+10] < 'A') ) || strlen((char *)&gWRecBuff[ip+10]) != 1 ){
   \                     ??UART_proNew_200:
   \   0000197A   DFF88003           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000197E   2818               ADDS     R0,R5,R0
   \   00001980   807A               LDRB     R0,[R0, #+10]
   \   00001982   3A28               CMP      R0,#+58
   \   00001984   05D2               BCS.N    ??UART_proNew_201
   \   00001986   DFF87403           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   0000198A   2818               ADDS     R0,R5,R0
   \   0000198C   807A               LDRB     R0,[R0, #+10]
   \   0000198E   3028               CMP      R0,#+48
   \   00001990   0BD2               BCS.N    ??UART_proNew_202
   \                     ??UART_proNew_201:
   \   00001992   DFF86803           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001996   2818               ADDS     R0,R5,R0
   \   00001998   807A               LDRB     R0,[R0, #+10]
   \   0000199A   4428               CMP      R0,#+68
   \   0000199C   0DD2               BCS.N    ??UART_proNew_203
   \   0000199E   DFF85C03           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000019A2   2818               ADDS     R0,R5,R0
   \   000019A4   807A               LDRB     R0,[R0, #+10]
   \   000019A6   4128               CMP      R0,#+65
   \   000019A8   07D3               BCC.N    ??UART_proNew_203
   \                     ??UART_proNew_202:
   \   000019AA   DFF85003           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000019AE   2818               ADDS     R0,R5,R0
   \   000019B0   0A30               ADDS     R0,R0,#+10
   \   000019B2   ........           BL       strlen
   \   000019B6   0128               CMP      R0,#+1
   \   000019B8   09D0               BEQ.N    ??UART_proNew_204
   1324                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_203:
   \   000019BA   DFF84C03           LDR.W    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000019BE   0321               MOVS     R1,#+3
   \   000019C0   0170               STRB     R1,[R0, #+0]
   1325                        Disp_status = 0x2A ; // display error
   \   000019C2   DFF85803           LDR.W    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   000019C6   2A21               MOVS     R1,#+42
   \   000019C8   0170               STRB     R1,[R0, #+0]
   1326                        return;
   \   000019CA   00F05CBD           B.W      ??UART_proNew_4
   1327                    } 
   1328                    tfm_flag =gWRecBuff[ip+10]-'0';
   \                     ??UART_proNew_204:
   \   000019CE   DFF82C03           LDR.W    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   000019D2   2818               ADDS     R0,R5,R0
   \   000019D4   807A               LDRB     R0,[R0, #+10]
   \   000019D6   3038               SUBS     R0,R0,#+48
   \   000019D8   DFF8DC1A           LDR.W    R1,??UART_proNew_185+0x2C  ;; tfm_flag
   \   000019DC   0870               STRB     R0,[R1, #+0]
   1329                    if ( tfm_flag > 9 ) tfm_flag -= 7;
   \   000019DE   DFF8D80A           LDR.W    R0,??UART_proNew_185+0x2C  ;; tfm_flag
   \   000019E2   0078               LDRB     R0,[R0, #+0]
   \   000019E4   0A28               CMP      R0,#+10
   \   000019E6   06D3               BCC.N    ??UART_proNew_205
   \   000019E8   DFF8CC0A           LDR.W    R0,??UART_proNew_185+0x2C  ;; tfm_flag
   \   000019EC   0078               LDRB     R0,[R0, #+0]
   \   000019EE   C01F               SUBS     R0,R0,#+7
   \   000019F0   DFF8C41A           LDR.W    R1,??UART_proNew_185+0x2C  ;; tfm_flag
   \   000019F4   0870               STRB     R0,[R1, #+0]
   1330                    UartDelFlg = 5;
   \                     ??UART_proNew_205:
   \   000019F6   C348               LDR.N    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   000019F8   0521               MOVS     R1,#+5
   \   000019FA   0170               STRB     R1,[R0, #+0]
   1331                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   000019FC   C248               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   000019FE   0221               MOVS     R1,#+2
   \   00001A00   0170               STRB     R1,[R0, #+0]
   1332                	  return;
   \   00001A02   00F040BD           B.W      ??UART_proNew_4
   1333                  }else if (memcmp(&gWRecBuff[ip],GAMSM,10)==0){//"GALEDTMSM=" 1=after every msg,2=after all msg
   \                     ??UART_proNew_199:
   \   00001A06   0A22               MOVS     R2,#+10
   \   00001A08   DFF8B01A           LDR.W    R1,??UART_proNew_185+0x30  ;; GAMSM
   \   00001A0C   BB48               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001A0E   2818               ADDS     R0,R5,R0
   \   00001A10   ........           BL       memcmp
   \   00001A14   0028               CMP      R0,#+0
   \   00001A16   33D1               BNE.N    ??UART_proNew_206
   1334                    if ( RTC_flag == 0 ){
   \   00001A18   BF48               LDR.N    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   00001A1A   0078               LDRB     R0,[R0, #+0]
   \   00001A1C   0028               CMP      R0,#+0
   \   00001A1E   07D1               BNE.N    ??UART_proNew_207
   1335                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   00001A20   B948               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001A22   0321               MOVS     R1,#+3
   \   00001A24   0170               STRB     R1,[R0, #+0]
   1336                      Disp_status = 0x30 ; // display error
   \   00001A26   BD48               LDR.N    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001A28   3021               MOVS     R1,#+48
   \   00001A2A   0170               STRB     R1,[R0, #+0]
   1337                      return;
   \   00001A2C   00F02BBD           B.W      ??UART_proNew_4
   1338                    }           
   1339                    if ( ( gWRecBuff[ip+10] > '2' ) || ( gWRecBuff[ip+10] < '0' ) || strlen((char *)&gWRecBuff[ip+10]) != 1 ){
   \                     ??UART_proNew_207:
   \   00001A30   B248               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001A32   2818               ADDS     R0,R5,R0
   \   00001A34   807A               LDRB     R0,[R0, #+10]
   \   00001A36   3328               CMP      R0,#+51
   \   00001A38   0BD2               BCS.N    ??UART_proNew_208
   \   00001A3A   B048               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001A3C   2818               ADDS     R0,R5,R0
   \   00001A3E   807A               LDRB     R0,[R0, #+10]
   \   00001A40   3028               CMP      R0,#+48
   \   00001A42   06D3               BCC.N    ??UART_proNew_208
   \   00001A44   AD48               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001A46   2818               ADDS     R0,R5,R0
   \   00001A48   0A30               ADDS     R0,R0,#+10
   \   00001A4A   ........           BL       strlen
   \   00001A4E   0128               CMP      R0,#+1
   \   00001A50   07D0               BEQ.N    ??UART_proNew_209
   1340                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_208:
   \   00001A52   AD48               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001A54   0321               MOVS     R1,#+3
   \   00001A56   0170               STRB     R1,[R0, #+0]
   1341                        Disp_status = 0x2A ; // display error
   \   00001A58   B048               LDR.N    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001A5A   2A21               MOVS     R1,#+42
   \   00001A5C   0170               STRB     R1,[R0, #+0]
   1342                        return;
   \   00001A5E   00F012BD           B.W      ??UART_proNew_4
   1343                    } 
   1344                    tsm_flag =gWRecBuff[ip+10]-'0';
   \                     ??UART_proNew_209:
   \   00001A62   A648               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001A64   2818               ADDS     R0,R5,R0
   \   00001A66   807A               LDRB     R0,[R0, #+10]
   \   00001A68   3038               SUBS     R0,R0,#+48
   \   00001A6A   DFF8541A           LDR.W    R1,??UART_proNew_185+0x34  ;; tsm_flag
   \   00001A6E   0870               STRB     R0,[R1, #+0]
   1345                    UartDelFlg = 3;//do noyhing
   \   00001A70   A448               LDR.N    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001A72   0321               MOVS     R1,#+3
   \   00001A74   0170               STRB     R1,[R0, #+0]
   1346                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001A76   A448               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001A78   0221               MOVS     R1,#+2
   \   00001A7A   0170               STRB     R1,[R0, #+0]
   1347                	  return; 
   \   00001A7C   00F003BD           B.W      ??UART_proNew_4
   1348                  }else if (memcmp(&gWRecBuff[ip],GASEQU,10)==0){//"GALEDSEQU=" 0=FILO 1=LIFO   
   \                     ??UART_proNew_206:
   \   00001A80   0A22               MOVS     R2,#+10
   \   00001A82   DFF8401A           LDR.W    R1,??UART_proNew_185+0x38  ;; GASEQU
   \   00001A86   9D48               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001A88   2818               ADDS     R0,R5,R0
   \   00001A8A   ........           BL       memcmp
   \   00001A8E   0028               CMP      R0,#+0
   \   00001A90   27D1               BNE.N    ??UART_proNew_210
   1349                    if ( ( gWRecBuff[ip+10] > '5' ) || ( gWRecBuff[ip+10] < '0' ) || strlen((char *)&gWRecBuff[ip+10]) != 1 ){
   \   00001A92   9A48               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001A94   2818               ADDS     R0,R5,R0
   \   00001A96   807A               LDRB     R0,[R0, #+10]
   \   00001A98   3628               CMP      R0,#+54
   \   00001A9A   0BD2               BCS.N    ??UART_proNew_211
   \   00001A9C   9748               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001A9E   2818               ADDS     R0,R5,R0
   \   00001AA0   807A               LDRB     R0,[R0, #+10]
   \   00001AA2   3028               CMP      R0,#+48
   \   00001AA4   06D3               BCC.N    ??UART_proNew_211
   \   00001AA6   9548               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001AA8   2818               ADDS     R0,R5,R0
   \   00001AAA   0A30               ADDS     R0,R0,#+10
   \   00001AAC   ........           BL       strlen
   \   00001AB0   0128               CMP      R0,#+1
   \   00001AB2   07D0               BEQ.N    ??UART_proNew_212
   1350                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_211:
   \   00001AB4   9448               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001AB6   0321               MOVS     R1,#+3
   \   00001AB8   0170               STRB     R1,[R0, #+0]
   1351                        Disp_status = 0x2A ; // display error
   \   00001ABA   9848               LDR.N    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001ABC   2A21               MOVS     R1,#+42
   \   00001ABE   0170               STRB     R1,[R0, #+0]
   1352                        return;
   \   00001AC0   00F0E1BC           B.W      ??UART_proNew_4
   1353                    } 
   1354                    seq_flag =gWRecBuff[ip+10]-'0';
   \                     ??UART_proNew_212:
   \   00001AC4   8D48               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001AC6   2818               ADDS     R0,R5,R0
   \   00001AC8   807A               LDRB     R0,[R0, #+10]
   \   00001ACA   3038               SUBS     R0,R0,#+48
   \   00001ACC   DFF8F819           LDR.W    R1,??UART_proNew_185+0x3C  ;; seq_flag
   \   00001AD0   0870               STRB     R0,[R1, #+0]
   1355                    UartDelFlg = 2;//Delete All
   \   00001AD2   8C48               LDR.N    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001AD4   0221               MOVS     R1,#+2
   \   00001AD6   0170               STRB     R1,[R0, #+0]
   1356                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001AD8   8B48               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001ADA   0221               MOVS     R1,#+2
   \   00001ADC   0170               STRB     R1,[R0, #+0]
   1357                	  return; 
   \   00001ADE   00F0D2BC           B.W      ??UART_proNew_4
   1358                  }else if (memcmp(&gWRecBuff[ip],GACOLOR,11)==0){//"GALEDCOLOR=" 1=R 2=G 3=O                                   
   \                     ??UART_proNew_210:
   \   00001AE2   0B22               MOVS     R2,#+11
   \   00001AE4   DFF8E419           LDR.W    R1,??UART_proNew_185+0x40  ;; GACOLOR
   \   00001AE8   8448               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001AEA   2818               ADDS     R0,R5,R0
   \   00001AEC   ........           BL       memcmp
   \   00001AF0   0028               CMP      R0,#+0
   \   00001AF2   27D1               BNE.N    ??UART_proNew_213
   1359                    if ( ( gWRecBuff[ip+11] > '3' ) || ( gWRecBuff[ip+11] < '1' ) || strlen((char *)&gWRecBuff[ip+11]) != 1 ){
   \   00001AF4   8148               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001AF6   2818               ADDS     R0,R5,R0
   \   00001AF8   C07A               LDRB     R0,[R0, #+11]
   \   00001AFA   3428               CMP      R0,#+52
   \   00001AFC   0BD2               BCS.N    ??UART_proNew_214
   \   00001AFE   7F48               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001B00   2818               ADDS     R0,R5,R0
   \   00001B02   C07A               LDRB     R0,[R0, #+11]
   \   00001B04   3128               CMP      R0,#+49
   \   00001B06   06D3               BCC.N    ??UART_proNew_214
   \   00001B08   7C48               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001B0A   2818               ADDS     R0,R5,R0
   \   00001B0C   0B30               ADDS     R0,R0,#+11
   \   00001B0E   ........           BL       strlen
   \   00001B12   0128               CMP      R0,#+1
   \   00001B14   07D0               BEQ.N    ??UART_proNew_215
   1360                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_214:
   \   00001B16   7C48               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001B18   0321               MOVS     R1,#+3
   \   00001B1A   0170               STRB     R1,[R0, #+0]
   1361                        Disp_status = 0x2A ; // display error
   \   00001B1C   7F48               LDR.N    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001B1E   2A21               MOVS     R1,#+42
   \   00001B20   0170               STRB     R1,[R0, #+0]
   1362                        return;
   \   00001B22   00F0B0BC           B.W      ??UART_proNew_4
   1363                    } 
   1364                    color_flag =gWRecBuff[ip+11]-'0';
   \                     ??UART_proNew_215:
   \   00001B26   7548               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001B28   2818               ADDS     R0,R5,R0
   \   00001B2A   C07A               LDRB     R0,[R0, #+11]
   \   00001B2C   3038               SUBS     R0,R0,#+48
   \   00001B2E   DFF8A019           LDR.W    R1,??UART_proNew_185+0x44  ;; color_flag
   \   00001B32   0870               STRB     R0,[R1, #+0]
   1365                    UartDelFlg = 3;//Delete All
   \   00001B34   7348               LDR.N    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001B36   0321               MOVS     R1,#+3
   \   00001B38   0170               STRB     R1,[R0, #+0]
   1366                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001B3A   7348               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001B3C   0221               MOVS     R1,#+2
   \   00001B3E   0170               STRB     R1,[R0, #+0]
   1367                	  return;
   \   00001B40   00F0A1BC           B.W      ??UART_proNew_4
   1368                  }else if (memcmp(&gWRecBuff[ip],GAPCOLOR,12)==0){//"GALEDPCOLOR=" 1=R 2=G 3=O
   \                     ??UART_proNew_213:
   \   00001B44   0C22               MOVS     R2,#+12
   \   00001B46   DFF88C19           LDR.W    R1,??UART_proNew_185+0x48  ;; GAPCOLOR
   \   00001B4A   6C48               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001B4C   2818               ADDS     R0,R5,R0
   \   00001B4E   ........           BL       memcmp
   \   00001B52   0028               CMP      R0,#+0
   \   00001B54   27D1               BNE.N    ??UART_proNew_216
   1369                    if ( ( gWRecBuff[ip+12] > '3' ) || ( gWRecBuff[ip+12] < '0' ) || strlen((char *)&gWRecBuff[ip+12]) != 1 ){
   \   00001B56   6948               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001B58   2818               ADDS     R0,R5,R0
   \   00001B5A   007B               LDRB     R0,[R0, #+12]
   \   00001B5C   3428               CMP      R0,#+52
   \   00001B5E   0BD2               BCS.N    ??UART_proNew_217
   \   00001B60   6648               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001B62   2818               ADDS     R0,R5,R0
   \   00001B64   007B               LDRB     R0,[R0, #+12]
   \   00001B66   3028               CMP      R0,#+48
   \   00001B68   06D3               BCC.N    ??UART_proNew_217
   \   00001B6A   6448               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001B6C   2818               ADDS     R0,R5,R0
   \   00001B6E   0C30               ADDS     R0,R0,#+12
   \   00001B70   ........           BL       strlen
   \   00001B74   0128               CMP      R0,#+1
   \   00001B76   07D0               BEQ.N    ??UART_proNew_218
   1370                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_217:
   \   00001B78   6348               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001B7A   0321               MOVS     R1,#+3
   \   00001B7C   0170               STRB     R1,[R0, #+0]
   1371                        Disp_status = 0x2A ; // display error
   \   00001B7E   6748               LDR.N    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001B80   2A21               MOVS     R1,#+42
   \   00001B82   0170               STRB     R1,[R0, #+0]
   1372                        return;
   \   00001B84   00F07FBC           B.W      ??UART_proNew_4
   1373                    } 
   1374                    pcolor_flag =gWRecBuff[ip+12]-'0';
   \                     ??UART_proNew_218:
   \   00001B88   5C48               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001B8A   2818               ADDS     R0,R5,R0
   \   00001B8C   007B               LDRB     R0,[R0, #+12]
   \   00001B8E   3038               SUBS     R0,R0,#+48
   \   00001B90   DFF84419           LDR.W    R1,??UART_proNew_185+0x4C  ;; pcolor_flag
   \   00001B94   0870               STRB     R0,[R1, #+0]
   1375                    UartDelFlg = 3;//Delete All
   \   00001B96   5B48               LDR.N    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001B98   0321               MOVS     R1,#+3
   \   00001B9A   0170               STRB     R1,[R0, #+0]
   1376                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001B9C   5A48               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001B9E   0221               MOVS     R1,#+2
   \   00001BA0   0170               STRB     R1,[R0, #+0]
   1377                	  return;      	       	              	        	       	        	       	       	  
   \   00001BA2   00F070BC           B.W      ??UART_proNew_4
   1378                  }else if (strcmp((char *)&gWRecBuff[ip],GADDTON)==0){//"GALEDDT=ON"
   \                     ??UART_proNew_216:
   \   00001BA6   DFF83419           LDR.W    R1,??UART_proNew_185+0x50  ;; GADDTON
   \   00001BAA   5448               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001BAC   2818               ADDS     R0,R5,R0
   \   00001BAE   ........           BL       strcmp
   \   00001BB2   0028               CMP      R0,#+0
   \   00001BB4   17D1               BNE.N    ??UART_proNew_219
   1379                    if ( RTC_flag ){
   \   00001BB6   5848               LDR.N    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   00001BB8   0078               LDRB     R0,[R0, #+0]
   \   00001BBA   0028               CMP      R0,#+0
   \   00001BBC   0BD0               BEQ.N    ??UART_proNew_220
   1380                      ddt_flag = 1;
   \   00001BBE   DFF82009           LDR.W    R0,??UART_proNew_185+0x54  ;; ddt_flag
   \   00001BC2   0121               MOVS     R1,#+1
   \   00001BC4   0170               STRB     R1,[R0, #+0]
   1381                      UartDelFlg = 5;//Show Time Immediately
   \   00001BC6   4F48               LDR.N    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001BC8   0521               MOVS     R1,#+5
   \   00001BCA   0170               STRB     R1,[R0, #+0]
   1382                      RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001BCC   4E48               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001BCE   0221               MOVS     R1,#+2
   \   00001BD0   0170               STRB     R1,[R0, #+0]
   \   00001BD2   00F058BC           B.W      ??UART_proNew_4
   1383                    }else{
   1384                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_220:
   \   00001BD6   4C48               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001BD8   0321               MOVS     R1,#+3
   \   00001BDA   0170               STRB     R1,[R0, #+0]
   1385                      Disp_status = 0x30 ; // display error 
   \   00001BDC   4F48               LDR.N    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001BDE   3021               MOVS     R1,#+48
   \   00001BE0   0170               STRB     R1,[R0, #+0]
   \   00001BE2   00F050BC           B.W      ??UART_proNew_4
   1386                    }        
   1387                	  return;
   1388                  }else if (strcmp((char *)&gWRecBuff[ip],GADDTOFF)==0){//"GALEDDT=OFF"
   \                     ??UART_proNew_219:
   \   00001BE6   DFF8FC18           LDR.W    R1,??UART_proNew_185+0x58  ;; GADDTOFF
   \   00001BEA   4448               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001BEC   2818               ADDS     R0,R5,R0
   \   00001BEE   ........           BL       strcmp
   \   00001BF2   0028               CMP      R0,#+0
   \   00001BF4   17D1               BNE.N    ??UART_proNew_221
   1389                    if ( RTC_flag ){
   \   00001BF6   4848               LDR.N    R0,??UART_proNew_127+0x20  ;; RTC_flag
   \   00001BF8   0078               LDRB     R0,[R0, #+0]
   \   00001BFA   0028               CMP      R0,#+0
   \   00001BFC   0BD0               BEQ.N    ??UART_proNew_222
   1390                      ddt_flag = 0;
   \   00001BFE   DFF8E008           LDR.W    R0,??UART_proNew_185+0x54  ;; ddt_flag
   \   00001C02   0021               MOVS     R1,#+0
   \   00001C04   0170               STRB     R1,[R0, #+0]
   1391                      UartDelFlg = 5;//Show Time Immediately
   \   00001C06   3F48               LDR.N    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001C08   0521               MOVS     R1,#+5
   \   00001C0A   0170               STRB     R1,[R0, #+0]
   1392                      RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001C0C   3E48               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001C0E   0221               MOVS     R1,#+2
   \   00001C10   0170               STRB     R1,[R0, #+0]
   \   00001C12   00F038BC           B.W      ??UART_proNew_4
   1393                    }else{
   1394                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_222:
   \   00001C16   3C48               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001C18   0321               MOVS     R1,#+3
   \   00001C1A   0170               STRB     R1,[R0, #+0]
   1395                      Disp_status = 0x30 ; // display error 
   \   00001C1C   3F48               LDR.N    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001C1E   3021               MOVS     R1,#+48
   \   00001C20   0170               STRB     R1,[R0, #+0]
   \   00001C22   00F030BC           B.W      ??UART_proNew_4
   1396                    }        
   1397                	  return;
   1398                  }else if (strcmp((char *)&gWRecBuff[ip],GAGCTAU)==0){//"GALEDMGCT=AU"
   \                     ??UART_proNew_221:
   \   00001C26   DFF8C018           LDR.W    R1,??UART_proNew_185+0x5C  ;; GAGCTAU
   \   00001C2A   3448               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001C2C   2818               ADDS     R0,R5,R0
   \   00001C2E   ........           BL       strcmp
   \   00001C32   0028               CMP      R0,#+0
   \   00001C34   0FD1               BNE.N    ??UART_proNew_223
   1399                    mgc_flag = 25;//
   \   00001C36   DFF8B408           LDR.W    R0,??UART_proNew_185+0x60  ;; mgc_flag
   \   00001C3A   1921               MOVS     R1,#+25
   \   00001C3C   0170               STRB     R1,[R0, #+0]
   1400                    mau_flag = 0;
   \   00001C3E   DFF8B008           LDR.W    R0,??UART_proNew_185+0x64  ;; mau_flag
   \   00001C42   0021               MOVS     R1,#+0
   \   00001C44   0170               STRB     R1,[R0, #+0]
   1401                    UartDelFlg = 2;//Delete All
   \   00001C46   2F48               LDR.N    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001C48   0221               MOVS     R1,#+2
   \   00001C4A   0170               STRB     R1,[R0, #+0]
   1402                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001C4C   2E48               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001C4E   0221               MOVS     R1,#+2
   \   00001C50   0170               STRB     R1,[R0, #+0]
   1403                	  return;       	  
   \   00001C52   00F018BC           B.W      ??UART_proNew_4
   1404                  }else if (memcmp(&gWRecBuff[ip],GAGCT,10)==0){//"GALEDMGCT="
   \                     ??UART_proNew_223:
   \   00001C56   0A22               MOVS     R2,#+10
   \   00001C58   DFF89818           LDR.W    R1,??UART_proNew_185+0x68  ;; GAGCT
   \   00001C5C   2748               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001C5E   2818               ADDS     R0,R5,R0
   \   00001C60   ........           BL       memcmp
   \   00001C64   0028               CMP      R0,#+0
   \   00001C66   40F08780           BNE.W    ??UART_proNew_224
   1405                    for(i=0;i<2;i++)
   \   00001C6A   0020               MOVS     R0,#+0
   \   00001C6C   0400               MOVS     R4,R0
   \                     ??UART_proNew_225:
   \   00001C6E   022C               CMP      R4,#+2
   \   00001C70   1BDA               BGE.N    ??UART_proNew_226
   1406                      if ( ( gWRecBuff[ip+10+i] > '9' ) || ( gWRecBuff[ip+10+i] < '0' ) || strlen((char *)&gWRecBuff[ip+10]) != 2 ){
   \   00001C72   6019               ADDS     R0,R4,R5
   \   00001C74   2149               LDR.N    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001C76   4018               ADDS     R0,R0,R1
   \   00001C78   807A               LDRB     R0,[R0, #+10]
   \   00001C7A   3A28               CMP      R0,#+58
   \   00001C7C   0CD2               BCS.N    ??UART_proNew_227
   \   00001C7E   6019               ADDS     R0,R4,R5
   \   00001C80   1E49               LDR.N    R1,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001C82   4018               ADDS     R0,R0,R1
   \   00001C84   807A               LDRB     R0,[R0, #+10]
   \   00001C86   3028               CMP      R0,#+48
   \   00001C88   06D3               BCC.N    ??UART_proNew_227
   \   00001C8A   1C48               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001C8C   2818               ADDS     R0,R5,R0
   \   00001C8E   0A30               ADDS     R0,R0,#+10
   \   00001C90   ........           BL       strlen
   \   00001C94   0228               CMP      R0,#+2
   \   00001C96   06D0               BEQ.N    ??UART_proNew_228
   1407                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_227:
   \   00001C98   1B48               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001C9A   0321               MOVS     R1,#+3
   \   00001C9C   0170               STRB     R1,[R0, #+0]
   1408                        Disp_status = 0x2A ; // display error
   \   00001C9E   1F48               LDR.N    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001CA0   2A21               MOVS     R1,#+42
   \   00001CA2   0170               STRB     R1,[R0, #+0]
   1409                        return;          	
   \   00001CA4   EFE3               B.N      ??UART_proNew_4
   1410                      }  
   \                     ??UART_proNew_228:
   \   00001CA6   641C               ADDS     R4,R4,#+1
   \   00001CA8   E1E7               B.N      ??UART_proNew_225
   1411                    tmp =  (gWRecBuff[ip+10]-'0' )*10 + gWRecBuff[ip+11]-'0';//
   \                     ??UART_proNew_226:
   \   00001CAA   1448               LDR.N    R0,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001CAC   2818               ADDS     R0,R5,R0
   \   00001CAE   807A               LDRB     R0,[R0, #+10]
   \   00001CB0   0A21               MOVS     R1,#+10
   \   00001CB2   124A               LDR.N    R2,??UART_proNew_127+0x4  ;; gWRecBuff
   \   00001CB4   AA18               ADDS     R2,R5,R2
   \   00001CB6   D27A               LDRB     R2,[R2, #+11]
   \   00001CB8   00FB0120           MLA      R0,R0,R1,R2
   \   00001CBC   1038               SUBS     R0,R0,#+16
   \   00001CBE   8346               MOV      R11,R0
   1412                    if ( tmp != 1 && tmp != 24 ){
   \   00001CC0   5FFA8BFB           UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00001CC4   BBF1010F           CMP      R11,#+1
   \   00001CC8   0BD0               BEQ.N    ??UART_proNew_229
   \   00001CCA   5FFA8BFB           UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00001CCE   BBF1180F           CMP      R11,#+24
   \   00001CD2   06D0               BEQ.N    ??UART_proNew_229
   1413                      RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   00001CD4   0C48               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001CD6   0321               MOVS     R1,#+3
   \   00001CD8   0170               STRB     R1,[R0, #+0]
   1414                      Disp_status = 0x2A ; // display error
   \   00001CDA   1048               LDR.N    R0,??UART_proNew_127+0x24  ;; Disp_status
   \   00001CDC   2A21               MOVS     R1,#+42
   \   00001CDE   0170               STRB     R1,[R0, #+0]
   1415                      return;          	
   \   00001CE0   D1E3               B.N      ??UART_proNew_4
   1416                    }	            
   1417                    mgc_flag = tmp;//
   \                     ??UART_proNew_229:
   \   00001CE2   DFF80808           LDR.W    R0,??UART_proNew_185+0x60  ;; mgc_flag
   \   00001CE6   80F800B0           STRB     R11,[R0, #+0]
   1418                    UartDelFlg = 2;//Delete All
   \   00001CEA   0648               LDR.N    R0,??UART_proNew_127+0xC  ;; UartDelFlg
   \   00001CEC   0221               MOVS     R1,#+2
   \   00001CEE   0170               STRB     R1,[R0, #+0]
   1419                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001CF0   0548               LDR.N    R0,??UART_proNew_127+0x10  ;; RecProcessing
   \   00001CF2   0221               MOVS     R1,#+2
   \   00001CF4   0170               STRB     R1,[R0, #+0]
   1420                	  return;
   \   00001CF6   C6E3               B.N      ??UART_proNew_4
   \                     ??UART_proNew_127:
   \   00001CF8   ........           DC32     LedDly
   \   00001CFC   ........           DC32     gWRecBuff
   \   00001D00   ........           DC32     Line2_Dly
   \   00001D04   ........           DC32     UartDelFlg
   \   00001D08   ........           DC32     RecProcessing
   \   00001D0C   ........           DC32     GAGStr
   \   00001D10   ........           DC32     DftMsg
   \   00001D14   ........           DC32     GAEStr
   \   00001D18   ........           DC32     RTC_flag
   \   00001D1C   ........           DC32     Disp_status
   \   00001D20   ........           DC32     MonthStr
   \   00001D24   ........           DC32     GATME
   \   00001D28   ........           DC32     GADELALL
   \   00001D2C   ........           DC32     GARSTVALUE
   \   00001D30   ........           DC32     GADTMON
   \   00001D34   ........           DC32     dtm_flag
   \   00001D38   ........           DC32     GADTMOFF
   \   00001D3C   ........           DC32     GASCMON
   \   00001D40   ........           DC32     crc_flag
   \   00001D44   ........           DC32     GASCMOFF
   \   00001D48   ........           DC32     GASTEON
   \   00001D4C   ........           DC32     te_flag
   \   00001D50   ........           DC32     GASTEOFF
   \   00001D54   ........           DC32     GATMD1
   \   00001D58   ........           DC32     tmd_flag
   \   00001D5C   ........           DC32     GATMD2
   \   00001D60   ........           DC32     GAHTM
   \   00001D64   30EBFFFF           DC32     0xffffeb30
   \   00001D68   ........           DC32     tdy_flag
   \   00001D6C   ........           DC32     GAGTM
   \   00001D70   ........           DC32     nst_flag
   \   00001D74   ........           DC32     GARDY
   1421                  }else if (strcmp((char *)&gWRecBuff[ip],GADBZOFF)==0){//"GALEDBZ=OFF"
   \                     ??UART_proNew_224:
   \   00001D78   DFF87C17           LDR.W    R1,??UART_proNew_185+0x6C  ;; GADBZOFF
   \   00001D7C   DFF87C07           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001D80   2818               ADDS     R0,R5,R0
   \   00001D82   ........           BL       strcmp
   \   00001D86   0028               CMP      R0,#+0
   \   00001D88   0CD1               BNE.N    ??UART_proNew_230
   1422                    dbz_flag =0;
   \   00001D8A   DFF87407           LDR.W    R0,??UART_proNew_185+0x74  ;; dbz_flag
   \   00001D8E   0021               MOVS     R1,#+0
   \   00001D90   0170               STRB     R1,[R0, #+0]
   1423                    UartDelFlg = 3;//do nothing
   \   00001D92   DFF87007           LDR.W    R0,??UART_proNew_185+0x78  ;; UartDelFlg
   \   00001D96   0321               MOVS     R1,#+3
   \   00001D98   0170               STRB     R1,[R0, #+0]
   1424                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001D9A   DFF86C07           LDR.W    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   00001D9E   0221               MOVS     R1,#+2
   \   00001DA0   0170               STRB     R1,[R0, #+0]
   1425                	  return; 
   \   00001DA2   70E3               B.N      ??UART_proNew_4
   1426                  }else if (strcmp((char *)&gWRecBuff[ip],GADBZON)==0){//"GALEDBZ=ON"
   \                     ??UART_proNew_230:
   \   00001DA4   DFF86417           LDR.W    R1,??UART_proNew_185+0x80  ;; GADBZON
   \   00001DA8   DFF85007           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001DAC   2818               ADDS     R0,R5,R0
   \   00001DAE   ........           BL       strcmp
   \   00001DB2   0028               CMP      R0,#+0
   \   00001DB4   0CD1               BNE.N    ??UART_proNew_231
   1427                    dbz_flag =1;
   \   00001DB6   DFF84807           LDR.W    R0,??UART_proNew_185+0x74  ;; dbz_flag
   \   00001DBA   0121               MOVS     R1,#+1
   \   00001DBC   0170               STRB     R1,[R0, #+0]
   1428                    UartDelFlg = 3;//do nothing
   \   00001DBE   DFF84407           LDR.W    R0,??UART_proNew_185+0x78  ;; UartDelFlg
   \   00001DC2   0321               MOVS     R1,#+3
   \   00001DC4   0170               STRB     R1,[R0, #+0]
   1429                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001DC6   DFF84007           LDR.W    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   00001DCA   0221               MOVS     R1,#+2
   \   00001DCC   0170               STRB     R1,[R0, #+0]
   1430                	  return;
   \   00001DCE   5AE3               B.N      ??UART_proNew_4
   1431                  }else if (memcmp(&gWRecBuff[ip],GAZTM,10)==0){//"GALEDBZTM="
   \                     ??UART_proNew_231:
   \   00001DD0   0A22               MOVS     R2,#+10
   \   00001DD2   DFF83C17           LDR.W    R1,??UART_proNew_185+0x84  ;; GAZTM
   \   00001DD6   DFF82407           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001DDA   2818               ADDS     R0,R5,R0
   \   00001DDC   ........           BL       memcmp
   \   00001DE0   0028               CMP      R0,#+0
   \   00001DE2   46D1               BNE.N    ??UART_proNew_232
   1432                    for(i=0;i<3;i++)
   \   00001DE4   0020               MOVS     R0,#+0
   \   00001DE6   0400               MOVS     R4,R0
   \                     ??UART_proNew_233:
   \   00001DE8   032C               CMP      R4,#+3
   \   00001DEA   20DA               BGE.N    ??UART_proNew_234
   1433                      if ( ( gWRecBuff[ip+10+i] > '9' ) || ( gWRecBuff[ip+10+i] < '0' ) || strlen((char *)&gWRecBuff[ip+10]) != 3 ){
   \   00001DEC   6019               ADDS     R0,R4,R5
   \   00001DEE   DFF80C17           LDR.W    R1,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001DF2   4018               ADDS     R0,R0,R1
   \   00001DF4   807A               LDRB     R0,[R0, #+10]
   \   00001DF6   3A28               CMP      R0,#+58
   \   00001DF8   0ED2               BCS.N    ??UART_proNew_235
   \   00001DFA   6019               ADDS     R0,R4,R5
   \   00001DFC   DFF8FC16           LDR.W    R1,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001E00   4018               ADDS     R0,R0,R1
   \   00001E02   807A               LDRB     R0,[R0, #+10]
   \   00001E04   3028               CMP      R0,#+48
   \   00001E06   07D3               BCC.N    ??UART_proNew_235
   \   00001E08   DFF8F006           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001E0C   2818               ADDS     R0,R5,R0
   \   00001E0E   0A30               ADDS     R0,R0,#+10
   \   00001E10   ........           BL       strlen
   \   00001E14   0328               CMP      R0,#+3
   \   00001E16   08D0               BEQ.N    ??UART_proNew_236
   1434                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_235:
   \   00001E18   DFF8EC06           LDR.W    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   00001E1C   0321               MOVS     R1,#+3
   \   00001E1E   0170               STRB     R1,[R0, #+0]
   1435                        Disp_status = 0x2A ; // display error
   \   00001E20   DFF8F006           LDR.W    R0,??UART_proNew_185+0x88  ;; Disp_status
   \   00001E24   2A21               MOVS     R1,#+42
   \   00001E26   0170               STRB     R1,[R0, #+0]
   1436                        return;
   \   00001E28   2DE3               B.N      ??UART_proNew_4
   1437                      } 
   \                     ??UART_proNew_236:
   \   00001E2A   641C               ADDS     R4,R4,#+1
   \   00001E2C   DCE7               B.N      ??UART_proNew_233
   1438                    ztm_flag=(gWRecBuff[ip+10]-'0')*100+(gWRecBuff[ip+11]-'0')*10+gWRecBuff[ip+12]-'0';
   \                     ??UART_proNew_234:
   \   00001E2E   DFF8CC06           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001E32   2818               ADDS     R0,R5,R0
   \   00001E34   807A               LDRB     R0,[R0, #+10]
   \   00001E36   6421               MOVS     R1,#+100
   \   00001E38   DFF8C026           LDR.W    R2,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001E3C   AA18               ADDS     R2,R5,R2
   \   00001E3E   D27A               LDRB     R2,[R2, #+11]
   \   00001E40   0A23               MOVS     R3,#+10
   \   00001E42   02FB03F2           MUL      R2,R2,R3
   \   00001E46   00FB0120           MLA      R0,R0,R1,R2
   \   00001E4A   DFF8B016           LDR.W    R1,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001E4E   6918               ADDS     R1,R5,R1
   \   00001E50   097B               LDRB     R1,[R1, #+12]
   \   00001E52   0818               ADDS     R0,R1,R0
   \   00001E54   DFF8C016           LDR.W    R1,??UART_proNew_185+0x8C  ;; 0xffffeb30
   \   00001E58   0818               ADDS     R0,R1,R0
   \   00001E5A   DFF8C016           LDR.W    R1,??UART_proNew_185+0x90  ;; ztm_flag
   \   00001E5E   0860               STR      R0,[R1, #+0]
   1439                    UartDelFlg = 3;//do nothing
   \   00001E60   DFF8A006           LDR.W    R0,??UART_proNew_185+0x78  ;; UartDelFlg
   \   00001E64   0321               MOVS     R1,#+3
   \   00001E66   0170               STRB     R1,[R0, #+0]
   1440                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001E68   DFF89C06           LDR.W    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   00001E6C   0221               MOVS     R1,#+2
   \   00001E6E   0170               STRB     R1,[R0, #+0]
   1441                	  return; 
   \   00001E70   09E3               B.N      ??UART_proNew_4
   1442                  }else if (memcmp(&gWRecBuff[ip],GAZTY,10)==0){//"GALEDBZTY="
   \                     ??UART_proNew_232:
   \   00001E72   0A22               MOVS     R2,#+10
   \   00001E74   DFF8A816           LDR.W    R1,??UART_proNew_185+0x94  ;; GAZTY
   \   00001E78   DFF88006           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001E7C   2818               ADDS     R0,R5,R0
   \   00001E7E   ........           BL       memcmp
   \   00001E82   0028               CMP      R0,#+0
   \   00001E84   2DD1               BNE.N    ??UART_proNew_237
   1443                    if ( ( gWRecBuff[ip+10] > '9' ) || ( gWRecBuff[ip+10] < '0' ) || strlen((char *)&gWRecBuff[ip+10]) != 1){
   \   00001E86   DFF87406           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001E8A   2818               ADDS     R0,R5,R0
   \   00001E8C   807A               LDRB     R0,[R0, #+10]
   \   00001E8E   3A28               CMP      R0,#+58
   \   00001E90   0DD2               BCS.N    ??UART_proNew_238
   \   00001E92   DFF86806           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001E96   2818               ADDS     R0,R5,R0
   \   00001E98   807A               LDRB     R0,[R0, #+10]
   \   00001E9A   3028               CMP      R0,#+48
   \   00001E9C   07D3               BCC.N    ??UART_proNew_238
   \   00001E9E   DFF85C06           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001EA2   2818               ADDS     R0,R5,R0
   \   00001EA4   0A30               ADDS     R0,R0,#+10
   \   00001EA6   ........           BL       strlen
   \   00001EAA   0128               CMP      R0,#+1
   \   00001EAC   08D0               BEQ.N    ??UART_proNew_239
   1444                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_238:
   \   00001EAE   DFF85806           LDR.W    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   00001EB2   0321               MOVS     R1,#+3
   \   00001EB4   0170               STRB     R1,[R0, #+0]
   1445                        Disp_status = 0x2A ; // display error
   \   00001EB6   DFF85C06           LDR.W    R0,??UART_proNew_185+0x88  ;; Disp_status
   \   00001EBA   2A21               MOVS     R1,#+42
   \   00001EBC   0170               STRB     R1,[R0, #+0]
   1446                        return;
   \   00001EBE   E2E2               B.N      ??UART_proNew_4
   1447                    } 
   1448                    zty_flag =gWRecBuff[ip+10]-'0';
   \                     ??UART_proNew_239:
   \   00001EC0   DFF83806           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001EC4   2818               ADDS     R0,R5,R0
   \   00001EC6   807A               LDRB     R0,[R0, #+10]
   \   00001EC8   3038               SUBS     R0,R0,#+48
   \   00001ECA   DFF85816           LDR.W    R1,??UART_proNew_185+0x98  ;; zty_flag
   \   00001ECE   0870               STRB     R0,[R1, #+0]
   1449                    UartDelFlg = 3;//do nothing
   \   00001ED0   DFF83006           LDR.W    R0,??UART_proNew_185+0x78  ;; UartDelFlg
   \   00001ED4   0321               MOVS     R1,#+3
   \   00001ED6   0170               STRB     R1,[R0, #+0]
   1450                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   00001ED8   DFF82C06           LDR.W    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   00001EDC   0221               MOVS     R1,#+2
   \   00001EDE   0170               STRB     R1,[R0, #+0]
   1451                	  return;
   \   00001EE0   D1E2               B.N      ??UART_proNew_4
   1452                  }else if ( ( pri_flag != 0 && ( len >= 3 && memcmp(&gWRecBuff[ip],GA911,3) == 0 ) ) || get_bit(pri_bits,UartID) == 1  ){//"911" or priority Capcode
   \                     ??UART_proNew_237:
   \   00001EE2   DFF84406           LDR.W    R0,??UART_proNew_185+0x9C  ;; pri_flag
   \   00001EE6   0078               LDRB     R0,[R0, #+0]
   \   00001EE8   0028               CMP      R0,#+0
   \   00001EEA   0ED0               BEQ.N    ??UART_proNew_240
   \   00001EEC   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00001EF0   B9F1030F           CMP      R9,#+3
   \   00001EF4   09D3               BCC.N    ??UART_proNew_240
   \   00001EF6   0322               MOVS     R2,#+3
   \   00001EF8   DFF83016           LDR.W    R1,??UART_proNew_185+0xA0  ;; GA911
   \   00001EFC   DFF8FC05           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001F00   2818               ADDS     R0,R5,R0
   \   00001F02   ........           BL       memcmp
   \   00001F06   0028               CMP      R0,#+0
   \   00001F08   09D0               BEQ.N    ??UART_proNew_241
   \                     ??UART_proNew_240:
   \   00001F0A   DFF82406           LDR.W    R0,??UART_proNew_185+0xA4  ;; UartID
   \   00001F0E   0178               LDRB     R1,[R0, #+0]
   \   00001F10   DFF82006           LDR.W    R0,??UART_proNew_185+0xA8  ;; pri_bits
   \   00001F14   0068               LDR      R0,[R0, #+0]
   \   00001F16   ........           BL       get_bit
   \   00001F1A   0128               CMP      R0,#+1
   \   00001F1C   5ED1               BNE.N    ??UART_proNew_242
   1453                   	primsg_flag=1; 
   \                     ??UART_proNew_241:
   \   00001F1E   DFF81806           LDR.W    R0,??UART_proNew_185+0xAC  ;; primsg_flag
   \   00001F22   0121               MOVS     R1,#+1
   \   00001F24   0170               STRB     R1,[R0, #+0]
   1454                    if ( pri_flag == 4 || ( pri_flag == 2 && memcmp(&gWRecBuff[ip],GA911,3) == 0) || ( pri_flag == 3  && get_bit(pri_bits,UartID) == 1 ) ){
   \   00001F26   DFF80006           LDR.W    R0,??UART_proNew_185+0x9C  ;; pri_flag
   \   00001F2A   0078               LDRB     R0,[R0, #+0]
   \   00001F2C   0428               CMP      R0,#+4
   \   00001F2E   1DD0               BEQ.N    ??UART_proNew_243
   \   00001F30   DFF8F405           LDR.W    R0,??UART_proNew_185+0x9C  ;; pri_flag
   \   00001F34   0078               LDRB     R0,[R0, #+0]
   \   00001F36   0228               CMP      R0,#+2
   \   00001F38   09D1               BNE.N    ??UART_proNew_244
   \   00001F3A   0322               MOVS     R2,#+3
   \   00001F3C   DFF8EC15           LDR.W    R1,??UART_proNew_185+0xA0  ;; GA911
   \   00001F40   DFF8B805           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001F44   2818               ADDS     R0,R5,R0
   \   00001F46   ........           BL       memcmp
   \   00001F4A   0028               CMP      R0,#+0
   \   00001F4C   0ED0               BEQ.N    ??UART_proNew_243
   \                     ??UART_proNew_244:
   \   00001F4E   DFF8D805           LDR.W    R0,??UART_proNew_185+0x9C  ;; pri_flag
   \   00001F52   0078               LDRB     R0,[R0, #+0]
   \   00001F54   0328               CMP      R0,#+3
   \   00001F56   14D1               BNE.N    ??UART_proNew_245
   \   00001F58   DFF8D405           LDR.W    R0,??UART_proNew_185+0xA4  ;; UartID
   \   00001F5C   0178               LDRB     R1,[R0, #+0]
   \   00001F5E   DFF8D405           LDR.W    R0,??UART_proNew_185+0xA8  ;; pri_bits
   \   00001F62   0068               LDR      R0,[R0, #+0]
   \   00001F64   ........           BL       get_bit
   \   00001F68   0128               CMP      R0,#+1
   \   00001F6A   0AD1               BNE.N    ??UART_proNew_245
   1455                        Relay(clRed);
   \                     ??UART_proNew_243:
   \   00001F6C   DFF8CC05           LDR.W    R0,??UART_proNew_185+0xB0  ;; clRed
   \   00001F70   0068               LDR      R0,[R0, #+0]
   \   00001F72   ........           BL       Relay
   1456                      rly_counter = rlytm_flag;
   \   00001F76   DFF8C805           LDR.W    R0,??UART_proNew_185+0xB4  ;; rly_counter
   \   00001F7A   DFF8C815           LDR.W    R1,??UART_proNew_185+0xB8  ;; rlytm_flag
   \   00001F7E   0978               LDRB     R1,[R1, #+0]
   \   00001F80   0170               STRB     R1,[R0, #+0]
   1457                    }
   1458                    UartID = get_next_priid(pricnt_flag);
   \                     ??UART_proNew_245:
   \   00001F82   DFF8C405           LDR.W    R0,??UART_proNew_185+0xBC  ;; pricnt_flag
   \   00001F86   0078               LDRB     R0,[R0, #+0]
   \   00001F88   ........           BL       get_next_priid
   \   00001F8C   DFF8A015           LDR.W    R1,??UART_proNew_185+0xA4  ;; UartID
   \   00001F90   0870               STRB     R0,[R1, #+0]
   1459                    strcpy((char *)TxtPage[UartID].data,(char *)&gWRecBuff[ip]);
   \   00001F92   DFF86805           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001F96   2918               ADDS     R1,R5,R0
   \   00001F98   DFF89405           LDR.W    R0,??UART_proNew_185+0xA4  ;; UartID
   \   00001F9C   0078               LDRB     R0,[R0, #+0]
   \   00001F9E   40F6BC72           MOVW     R2,#+4028
   \   00001FA2   DFF8A835           LDR.W    R3,??UART_proNew_185+0xC0  ;; TxtPage
   \   00001FA6   00FB0230           MLA      R0,R0,R2,R3
   \   00001FAA   0C30               ADDS     R0,R0,#+12
   \   00001FAC   ........           BL       strcpy
   1460                    TxtPage[UartID].len = len;        
   \   00001FB0   DFF87C05           LDR.W    R0,??UART_proNew_185+0xA4  ;; UartID
   \   00001FB4   0078               LDRB     R0,[R0, #+0]
   \   00001FB6   40F6BC71           MOVW     R1,#+4028
   \   00001FBA   DFF89025           LDR.W    R2,??UART_proNew_185+0xC0  ;; TxtPage
   \   00001FBE   00FB0120           MLA      R0,R0,R1,R2
   \   00001FC2   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00001FC6   C0F80890           STR      R9,[R0, #+8]
   1461                    UartDelFlg=0;//insert node
   \   00001FCA   DFF83805           LDR.W    R0,??UART_proNew_185+0x78  ;; UartDelFlg
   \   00001FCE   0021               MOVS     R1,#+0
   \   00001FD0   0170               STRB     R1,[R0, #+0]
   1462                    RecProcessing=2;//Inform self_test_1 ------- AP006            
   \   00001FD2   DFF83405           LDR.W    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   00001FD6   0221               MOVS     R1,#+2
   \   00001FD8   0170               STRB     R1,[R0, #+0]
   1463                    return; 
   \   00001FDA   54E2               B.N      ??UART_proNew_4
   1464                  }else if (memcmp(&gWRecBuff[ip],GAPCAPCL,10)==0 && gWRecBuff[ip+11] == '='){//"GALEDCAPCL?="  
   \                     ??UART_proNew_242:
   \   00001FDC   0A22               MOVS     R2,#+10
   \   00001FDE   DFF87015           LDR.W    R1,??UART_proNew_185+0xC4  ;; GAPCAPCL
   \   00001FE2   DFF81805           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001FE6   2818               ADDS     R0,R5,R0
   \   00001FE8   ........           BL       memcmp
   \   00001FEC   0028               CMP      R0,#+0
   \   00001FEE   63D1               BNE.N    ??UART_proNew_246
   \   00001FF0   DFF80805           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00001FF4   2818               ADDS     R0,R5,R0
   \   00001FF6   C07A               LDRB     R0,[R0, #+11]
   \   00001FF8   3D28               CMP      R0,#+61
   \   00001FFA   5DD1               BNE.N    ??UART_proNew_246
   1465                    if ( ( ( gWRecBuff[ip+10] > 'F' ) || ( gWRecBuff[ip+10] < 'A' ) )  || strlen((char *)&gWRecBuff[ip+12]) != 4 ){
   \   00001FFC   DFF8FC04           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002000   2818               ADDS     R0,R5,R0
   \   00002002   807A               LDRB     R0,[R0, #+10]
   \   00002004   4728               CMP      R0,#+71
   \   00002006   0DD2               BCS.N    ??UART_proNew_247
   \   00002008   DFF8F004           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   0000200C   2818               ADDS     R0,R5,R0
   \   0000200E   807A               LDRB     R0,[R0, #+10]
   \   00002010   4128               CMP      R0,#+65
   \   00002012   07D3               BCC.N    ??UART_proNew_247
   \   00002014   DFF8E404           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002018   2818               ADDS     R0,R5,R0
   \   0000201A   0C30               ADDS     R0,R0,#+12
   \   0000201C   ........           BL       strlen
   \   00002020   0428               CMP      R0,#+4
   \   00002022   08D0               BEQ.N    ??UART_proNew_248
   1466                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_247:
   \   00002024   DFF8E004           LDR.W    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   00002028   0321               MOVS     R1,#+3
   \   0000202A   0170               STRB     R1,[R0, #+0]
   1467                        Disp_status = 0x2A ; // display error
   \   0000202C   DFF8E404           LDR.W    R0,??UART_proNew_185+0x88  ;; Disp_status
   \   00002030   2A21               MOVS     R1,#+42
   \   00002032   0170               STRB     R1,[R0, #+0]
   1468                        return;
   \   00002034   27E2               B.N      ??UART_proNew_4
   1469                    } 
   1470                    for(i=0;i<4;i++){
   \                     ??UART_proNew_248:
   \   00002036   0020               MOVS     R0,#+0
   \   00002038   0400               MOVS     R4,R0
   \                     ??UART_proNew_249:
   \   0000203A   042C               CMP      R4,#+4
   \   0000203C   18DA               BGE.N    ??UART_proNew_250
   1471                      if ( ( gWRecBuff[ip+12+i] > '3' ) || ( gWRecBuff[ip+12+i] < '0' ) ){
   \   0000203E   6019               ADDS     R0,R4,R5
   \   00002040   DFF8B814           LDR.W    R1,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002044   4018               ADDS     R0,R0,R1
   \   00002046   007B               LDRB     R0,[R0, #+12]
   \   00002048   3428               CMP      R0,#+52
   \   0000204A   06D2               BCS.N    ??UART_proNew_251
   \   0000204C   6019               ADDS     R0,R4,R5
   \   0000204E   DFF8AC14           LDR.W    R1,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002052   4018               ADDS     R0,R0,R1
   \   00002054   007B               LDRB     R0,[R0, #+12]
   \   00002056   3028               CMP      R0,#+48
   \   00002058   08D2               BCS.N    ??UART_proNew_252
   1472                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_251:
   \   0000205A   DFF8AC04           LDR.W    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   0000205E   0321               MOVS     R1,#+3
   \   00002060   0170               STRB     R1,[R0, #+0]
   1473                        Disp_status = 0x2A ; // display error
   \   00002062   DFF8B004           LDR.W    R0,??UART_proNew_185+0x88  ;; Disp_status
   \   00002066   2A21               MOVS     R1,#+42
   \   00002068   0170               STRB     R1,[R0, #+0]
   1474                        return;
   \   0000206A   0CE2               B.N      ??UART_proNew_4
   1475                      }
   1476                    }  
   \                     ??UART_proNew_252:
   \   0000206C   641C               ADDS     R4,R4,#+1
   \   0000206E   E4E7               B.N      ??UART_proNew_249
   1477                    tmp = (gWRecBuff[ip+10]-'A')*4;
   \                     ??UART_proNew_250:
   \   00002070   DFF88804           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002074   2818               ADDS     R0,R5,R0
   \   00002076   807A               LDRB     R0,[R0, #+10]
   \   00002078   4138               SUBS     R0,R0,#+65
   \   0000207A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000207C   8000               LSLS     R0,R0,#+2
   \   0000207E   8346               MOV      R11,R0
   1478                    for(i=0;i<4;i++)
   \   00002080   0020               MOVS     R0,#+0
   \   00002082   0400               MOVS     R4,R0
   \                     ??UART_proNew_253:
   \   00002084   042C               CMP      R4,#+4
   \   00002086   0EDA               BGE.N    ??UART_proNew_254
   1479                      capcl_flag[tmp+i]=gWRecBuff[ip+12+i]-'0';  
   \   00002088   6019               ADDS     R0,R4,R5
   \   0000208A   DFF87014           LDR.W    R1,??UART_proNew_185+0x70  ;; gWRecBuff
   \   0000208E   4018               ADDS     R0,R0,R1
   \   00002090   007B               LDRB     R0,[R0, #+12]
   \   00002092   3038               SUBS     R0,R0,#+48
   \   00002094   5FFA8BFB           UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00002098   14EB0B01           ADDS     R1,R4,R11
   \   0000209C   DFF8B424           LDR.W    R2,??UART_proNew_185+0xC8  ;; capcl_flag
   \   000020A0   8854               STRB     R0,[R1, R2]
   \   000020A2   641C               ADDS     R4,R4,#+1
   \   000020A4   EEE7               B.N      ??UART_proNew_253
   1480                    UartDelFlg = 3;
   \                     ??UART_proNew_254:
   \   000020A6   DFF85C04           LDR.W    R0,??UART_proNew_185+0x78  ;; UartDelFlg
   \   000020AA   0321               MOVS     R1,#+3
   \   000020AC   0170               STRB     R1,[R0, #+0]
   1481                    RecProcessing = 2;//Inform self_test_1 ------- AP006
   \   000020AE   DFF85804           LDR.W    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   000020B2   0221               MOVS     R1,#+2
   \   000020B4   0170               STRB     R1,[R0, #+0]
   1482                	  return;            
   \   000020B6   E6E1               B.N      ??UART_proNew_4
   1483                  }else{
   1484                    if ( mgc_flag == 25 ){//AU
   \                     ??UART_proNew_246:
   \   000020B8   DFF83004           LDR.W    R0,??UART_proNew_185+0x60  ;; mgc_flag
   \   000020BC   0078               LDRB     R0,[R0, #+0]
   \   000020BE   1928               CMP      R0,#+25
   \   000020C0   16D1               BNE.N    ??UART_proNew_255
   1485                    	color = capcl_flag[UartID];//此時UartID為Real ID , 取出 Real ID 的GALEDCAPCL命令的顏色 , 使用在Auto
   \   000020C2   DFF86C04           LDR.W    R0,??UART_proNew_185+0xA4  ;; UartID
   \   000020C6   0078               LDRB     R0,[R0, #+0]
   \   000020C8   DFF88814           LDR.W    R1,??UART_proNew_185+0xC8  ;; capcl_flag
   \   000020CC   405C               LDRB     R0,[R0, R1]
   \   000020CE   0B90               STR      R0,[SP, #+44]
   1486                	    UartID = get_next_id(autoct_flag);//此時UartID為系統分配的
   \   000020D0   DFF88404           LDR.W    R0,??UART_proNew_185+0xCC  ;; autoct_flag
   \   000020D4   0078               LDRB     R0,[R0, #+0]
   \   000020D6   ........           BL       get_next_id
   \   000020DA   DFF85414           LDR.W    R1,??UART_proNew_185+0xA4  ;; UartID
   \   000020DE   0870               STRB     R0,[R1, #+0]
   1487                	    autocl[UartID] = color;
   \   000020E0   DFF84C04           LDR.W    R0,??UART_proNew_185+0xA4  ;; UartID
   \   000020E4   0078               LDRB     R0,[R0, #+0]
   \   000020E6   DFF87414           LDR.W    R1,??UART_proNew_185+0xD0  ;; autocl
   \   000020EA   0B9A               LDR      R2,[SP, #+44]
   \   000020EC   4254               STRB     R2,[R0, R1]
   \   000020EE   3DE0               B.N      ??UART_proNew_256
   1488                    }else if( mgc_flag == 24 ){
   \                     ??UART_proNew_255:
   \   000020F0   DFF8F803           LDR.W    R0,??UART_proNew_185+0x60  ;; mgc_flag
   \   000020F4   0078               LDRB     R0,[R0, #+0]
   \   000020F6   1828               CMP      R0,#+24
   \   000020F8   32D1               BNE.N    ??UART_proNew_257
   1489                      if ( get_bit(mail_bits,UartID) != 1 ){//24
   \   000020FA   DFF83404           LDR.W    R0,??UART_proNew_185+0xA4  ;; UartID
   \   000020FE   0178               LDRB     R1,[R0, #+0]
   \   00002100   DFF85C04           LDR.W    R0,??UART_proNew_185+0xD4  ;; mail_bits
   \   00002104   0068               LDR      R0,[R0, #+0]
   \   00002106   ........           BL       get_bit
   \   0000210A   0128               CMP      R0,#+1
   \   0000210C   2ED0               BEQ.N    ??UART_proNew_256
   1490                      	if ( msgcount() == 1 && UartID == TopIndex ){//只有一通,又發同一通,則序號不增加
   \   0000210E   ........           BL       msgcount
   \   00002112   0128               CMP      R0,#+1
   \   00002114   13D1               BNE.N    ??UART_proNew_258
   \   00002116   DFF81804           LDR.W    R0,??UART_proNew_185+0xA4  ;; UartID
   \   0000211A   0078               LDRB     R0,[R0, #+0]
   \   0000211C   DFF84414           LDR.W    R1,??UART_proNew_185+0xD8  ;; TopIndex
   \   00002120   0968               LDR      R1,[R1, #+0]
   \   00002122   8842               CMP      R0,R1
   \   00002124   0BD1               BNE.N    ??UART_proNew_258
   1491                      		msgno[UartID]=1;
   \   00002126   DFF80804           LDR.W    R0,??UART_proNew_185+0xA4  ;; UartID
   \   0000212A   0078               LDRB     R0,[R0, #+0]
   \   0000212C   DFF83814           LDR.W    R1,??UART_proNew_185+0xDC  ;; msgno
   \   00002130   0122               MOVS     R2,#+1
   \   00002132   4254               STRB     R2,[R0, R1]
   1492                      		mau_flag=1;
   \   00002134   DFF8B803           LDR.W    R0,??UART_proNew_185+0x64  ;; mau_flag
   \   00002138   0121               MOVS     R1,#+1
   \   0000213A   0170               STRB     R1,[R0, #+0]
   \   0000213C   16E0               B.N      ??UART_proNew_256
   1493                        }else{		
   1494                          tmp = 24-maildrop_count(mail_bits);
   \                     ??UART_proNew_258:
   \   0000213E   DFF82004           LDR.W    R0,??UART_proNew_185+0xD4  ;; mail_bits
   \   00002142   0068               LDR      R0,[R0, #+0]
   \   00002144   ........           BL       maildrop_count
   \   00002148   D0F11800           RSBS     R0,R0,#+24
   \   0000214C   8346               MOV      R11,R0
   1495                          add_indexno(UartID,tmp);//考慮Maildrop
   \   0000214E   5FFA8BFB           UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00002152   5946               MOV      R1,R11
   \   00002154   DFF8D803           LDR.W    R0,??UART_proNew_185+0xA4  ;; UartID
   \   00002158   0078               LDRB     R0,[R0, #+0]
   \   0000215A   ........           BL       add_indexno
   \   0000215E   05E0               B.N      ??UART_proNew_256
   1496                        }  
   1497                      }  
   1498                    }else//1
   1499                      add_indexno(UartID,1);//考慮Maildrop 
   \                     ??UART_proNew_257:
   \   00002160   0121               MOVS     R1,#+1
   \   00002162   DFF8CC03           LDR.W    R0,??UART_proNew_185+0xA4  ;; UartID
   \   00002166   0078               LDRB     R0,[R0, #+0]
   \   00002168   ........           BL       add_indexno
   1500                    strcpy((char *)TxtPage[UartID].data,(char *)&gWRecBuff[ip]);
   \                     ??UART_proNew_256:
   \   0000216C   DFF88C03           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002170   2918               ADDS     R1,R5,R0
   \   00002172   DFF8BC03           LDR.W    R0,??UART_proNew_185+0xA4  ;; UartID
   \   00002176   0078               LDRB     R0,[R0, #+0]
   \   00002178   40F6BC72           MOVW     R2,#+4028
   \   0000217C   DFF8CC33           LDR.W    R3,??UART_proNew_185+0xC0  ;; TxtPage
   \   00002180   00FB0230           MLA      R0,R0,R2,R3
   \   00002184   0C30               ADDS     R0,R0,#+12
   \   00002186   ........           BL       strcpy
   1501                    TxtPage[UartID].len = len;
   \   0000218A   DFF8A403           LDR.W    R0,??UART_proNew_185+0xA4  ;; UartID
   \   0000218E   0078               LDRB     R0,[R0, #+0]
   \   00002190   40F6BC71           MOVW     R1,#+4028
   \   00002194   DFF8B423           LDR.W    R2,??UART_proNew_185+0xC0  ;; TxtPage
   \   00002198   00FB0120           MLA      R0,R0,R1,R2
   \   0000219C   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000021A0   C0F80890           STR      R9,[R0, #+8]
   1502                    UartDelFlg=0;//insert node
   \   000021A4   DFF85C03           LDR.W    R0,??UART_proNew_185+0x78  ;; UartDelFlg
   \   000021A8   0021               MOVS     R1,#+0
   \   000021AA   0170               STRB     R1,[R0, #+0]
   1503                    RecProcessing=2;//Inform self_test_1 ------- AP006
   \   000021AC   DFF85803           LDR.W    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   000021B0   0221               MOVS     R1,#+2
   \   000021B2   0170               STRB     R1,[R0, #+0]
   1504                	  return;
   \   000021B4   67E1               B.N      ??UART_proNew_4
   1505                  }  
   1506                }
   1507          // Apha_Mode:Proc End      
   1508                
   1509          // Bin Mod      
   1510                Command=gWRecBuff[ip++];//Get Level 2 Command 
   \                     ??UART_proNew_15:
   \   000021B6   DFF84403           LDR.W    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   000021BA   285C               LDRB     R0,[R5, R0]
   \   000021BC   0C90               STR      R0,[SP, #+48]
   \   000021BE   6D1C               ADDS     R5,R5,#+1
   1511                switch (Command){
   \   000021C0   0C98               LDR      R0,[SP, #+48]
   \   000021C2   0228               CMP      R0,#+2
   \   000021C4   21D0               BEQ.N    ??UART_proNew_259
   \   000021C6   0528               CMP      R0,#+5
   \   000021C8   00F0AD80           BEQ.W    ??UART_proNew_260
   \   000021CC   0628               CMP      R0,#+6
   \   000021CE   40F05A81           BNE.W    ??UART_proNew_4
   1512                  case LVL2Cmd3:
   1513                    if (gWRecBuff[ip++]==(NotLVL2Cmd3)){ // Command 反相
   \                     ??UART_proNew_261:
   \   000021D2   2800               MOVS     R0,R5
   \   000021D4   451C               ADDS     R5,R0,#+1
   \   000021D6   C949               LDR.N    R1,??UART_proNew_185+0x70  ;; gWRecBuff
   \   000021D8   405C               LDRB     R0,[R0, R1]
   \   000021DA   F928               CMP      R0,#+249
   \   000021DC   40F05381           BNE.W    ??UART_proNew_4
   1514                    	ip++;//StartFrm
   \   000021E0   6D1C               ADDS     R5,R5,#+1
   1515                    	ip++;//EndFrm            
   \   000021E2   6D1C               ADDS     R5,R5,#+1
   1516                      RevBuffIndex -= 2; //減掉兩個bytes CS
   \   000021E4   DFF88403           LDR.W    R0,??UART_proNew_185+0xE0  ;; RevBuffIndex
   \   000021E8   0068               LDR      R0,[R0, #+0]
   \   000021EA   801E               SUBS     R0,R0,#+2
   \   000021EC   DFF87C13           LDR.W    R1,??UART_proNew_185+0xE0  ;; RevBuffIndex
   \   000021F0   0860               STR      R0,[R1, #+0]
   1517                      RecProcessing=1 ; //----- AP006
   \   000021F2   C548               LDR.N    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   000021F4   0121               MOVS     R1,#+1
   \   000021F6   0170               STRB     R1,[R0, #+0]
   1518                      //Message_Receiving_disp() ; //----- AP006
   1519                      Disp_status = 0x18 ; // ----------- AP007
   \   000021F8   C648               LDR.N    R0,??UART_proNew_185+0x88  ;; Disp_status
   \   000021FA   1821               MOVS     R1,#+24
   \   000021FC   0170               STRB     R1,[R0, #+0]
   1520          	    Rec_Timer_cnt = 10000 ; 
   \   000021FE   DFF87003           LDR.W    R0,??UART_proNew_185+0xE4  ;; Rec_Timer_cnt
   \   00002202   42F21071           MOVW     R1,#+10000
   \   00002206   0160               STR      R1,[R0, #+0]
   \   00002208   3DE1               B.N      ??UART_proNew_4
   1521                    }
   1522                    break;
   1523                  case LVL2Cmd1:
   1524                    if (gWRecBuff[ip++]==(NotLVL2Cmd1)){ // Command 反相
   \                     ??UART_proNew_259:
   \   0000220A   2800               MOVS     R0,R5
   \   0000220C   451C               ADDS     R5,R0,#+1
   \   0000220E   BB49               LDR.N    R1,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002210   405C               LDRB     R0,[R0, R1]
   \   00002212   FD28               CMP      R0,#+253
   \   00002214   40F03781           BNE.W    ??UART_proNew_4
   1525                      Cmd1BufLen = gWRecBuff[ip++];         
   \   00002218   B848               LDR.N    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   0000221A   285C               LDRB     R0,[R5, R0]
   \   0000221C   8DF80500           STRB     R0,[SP, #+5]
   \   00002220   6D1C               ADDS     R5,R5,#+1
   1526                      UARTFRM.Start = gWRecBuff[ip++];
   \   00002222   B648               LDR.N    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002224   285C               LDRB     R0,[R5, R0]
   \   00002226   DFF84C13           LDR.W    R1,??UART_proNew_185+0xE8  ;; UARTFRM
   \   0000222A   0870               STRB     R0,[R1, #+0]
   \   0000222C   6D1C               ADDS     R5,R5,#+1
   1527                      UARTFRM.End = gWRecBuff[ip++]; 
   \   0000222E   B348               LDR.N    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002230   285C               LDRB     R0,[R5, R0]
   \   00002232   D049               LDR.N    R1,??UART_proNew_185+0xE8  ;; UARTFRM
   \   00002234   4870               STRB     R0,[R1, #+1]
   \   00002236   6D1C               ADDS     R5,R5,#+1
   1528                      complete=gWRecBuff[ip++];
   \   00002238   B048               LDR.N    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   0000223A   285C               LDRB     R0,[R5, R0]
   \   0000223C   0890               STR      R0,[SP, #+32]
   \   0000223E   6D1C               ADDS     R5,R5,#+1
   1529                      TestMode=gWRecBuff[ip++];
   \   00002240   AE48               LDR.N    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002242   285C               LDRB     R0,[R5, R0]
   \   00002244   CC49               LDR.N    R1,??UART_proNew_185+0xEC  ;; TestMode
   \   00002246   0870               STRB     R0,[R1, #+0]
   \   00002248   6D1C               ADDS     R5,R5,#+1
   1530                      //if (TestMode==2){
   1531                      //  UartDispMode=0;
   1532                      //  TestMode=1;
   1533                      //}else{
   1534                      //  UartDispMode=TestMode;
   1535                      //  TestMode=0;
   1536                      //}  
   1537                      //UartDispMode=gWRecBuff[ip++]; //0:Normal   1:Pager Text
   1538                      //Cmd1Length=sizeof(LEDPage[0]) * (UARTFRM.End-UARTFRM.Start);
   1539                      Status=gWRecBuff[ip]; 
   \   0000224A   AC48               LDR.N    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   0000224C   285C               LDRB     R0,[R5, R0]
   \   0000224E   8DF80000           STRB     R0,[SP, #+0]
   1540                      if ( Status >= 0x82 && Status <= 0x85 ){
   \   00002252   9DF80000           LDRB     R0,[SP, #+0]
   \   00002256   8228               CMP      R0,#+130
   \   00002258   11D3               BCC.N    ??UART_proNew_262
   \   0000225A   9DF80000           LDRB     R0,[SP, #+0]
   \   0000225E   8628               CMP      R0,#+134
   \   00002260   0DD2               BCS.N    ??UART_proNew_262
   1541                      	LRCM_flag=1;
   \   00002262   C648               LDR.N    R0,??UART_proNew_185+0xF0  ;; LRCM_flag
   \   00002264   0121               MOVS     R1,#+1
   \   00002266   0170               STRB     R1,[R0, #+0]
   1542                      	LRCM_value=Status;
   \   00002268   C548               LDR.N    R0,??UART_proNew_185+0xF4  ;; LRCM_value
   \   0000226A   9DF80010           LDRB     R1,[SP, #+0]
   \   0000226E   0170               STRB     R1,[R0, #+0]
   1543                      	CommandMode=5;   
   \   00002270   C448               LDR.N    R0,??UART_proNew_185+0xF8  ;; CommandMode
   \   00002272   0521               MOVS     R1,#+5
   \   00002274   0170               STRB     R1,[R0, #+0]
   1544                      	RecProcessing=2;//Inform self_test_1 received error ------- AP006 
   \   00002276   A448               LDR.N    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   00002278   0221               MOVS     R1,#+2
   \   0000227A   0170               STRB     R1,[R0, #+0]
   1545                      	return;
   \   0000227C   03E1               B.N      ??UART_proNew_4
   1546                      }   
   1547                      Cmd3Length=RevBuffIndex-6; //!!!!!!           
   \                     ??UART_proNew_262:
   \   0000227E   BB48               LDR.N    R0,??UART_proNew_185+0xE0  ;; RevBuffIndex
   \   00002280   0068               LDR      R0,[R0, #+0]
   \   00002282   801F               SUBS     R0,R0,#+6
   \   00002284   C049               LDR.N    R1,??UART_proNew_185+0xFC  ;; Cmd3Length
   \   00002286   0860               STR      R0,[R1, #+0]
   1548                      if((complete == 0x09) || (UARTFRM.Start >= UARTFRM.End ) || (Cmd1BufLen !=0x05) )
   \   00002288   0898               LDR      R0,[SP, #+32]
   \   0000228A   0928               CMP      R0,#+9
   \   0000228C   09D0               BEQ.N    ??UART_proNew_263
   \   0000228E   B948               LDR.N    R0,??UART_proNew_185+0xE8  ;; UARTFRM
   \   00002290   0078               LDRB     R0,[R0, #+0]
   \   00002292   B849               LDR.N    R1,??UART_proNew_185+0xE8  ;; UARTFRM
   \   00002294   4978               LDRB     R1,[R1, #+1]
   \   00002296   8842               CMP      R0,R1
   \   00002298   03D2               BCS.N    ??UART_proNew_263
   \   0000229A   9DF80500           LDRB     R0,[SP, #+5]
   \   0000229E   0528               CMP      R0,#+5
   \   000022A0   06D0               BEQ.N    ??UART_proNew_264
   1549                      {
   1550                        RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_263:
   \   000022A2   9948               LDR.N    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   000022A4   0321               MOVS     R1,#+3
   \   000022A6   0170               STRB     R1,[R0, #+0]
   1551                        Disp_status = 0x5 ; // display error
   \   000022A8   9A48               LDR.N    R0,??UART_proNew_185+0x88  ;; Disp_status
   \   000022AA   0521               MOVS     R1,#+5
   \   000022AC   0170               STRB     R1,[R0, #+0]
   \   000022AE   EAE0               B.N      ??UART_proNew_4
   1552                      }
   1553                      else if ( complete == 0x05 ){ 
   \                     ??UART_proNew_264:
   \   000022B0   0898               LDR      R0,[SP, #+32]
   \   000022B2   0528               CMP      R0,#+5
   \   000022B4   0AD1               BNE.N    ??UART_proNew_265
   1554                        RecProcessing=2;//firmware upgrade
   \   000022B6   9448               LDR.N    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   000022B8   0221               MOVS     R1,#+2
   \   000022BA   0170               STRB     R1,[R0, #+0]
   1555                        UpgradeMode = 1;
   \   000022BC   B348               LDR.N    R0,??UART_proNew_185+0x100  ;; UpgradeMode
   \   000022BE   0121               MOVS     R1,#+1
   \   000022C0   0170               STRB     R1,[R0, #+0]
   1556                        Cmd1Length = 65536;
   \   000022C2   B348               LDR.N    R0,??UART_proNew_185+0x104  ;; Cmd1Length
   \   000022C4   5FF48031           MOVS     R1,#+65536
   \   000022C8   0160               STR      R1,[R0, #+0]
   \   000022CA   DCE0               B.N      ??UART_proNew_4
   1557                      } 
   1558                      else if ( complete != 0x0A )
   \                     ??UART_proNew_265:
   \   000022CC   0898               LDR      R0,[SP, #+32]
   \   000022CE   0A28               CMP      R0,#+10
   \   000022D0   21D0               BEQ.N    ??UART_proNew_266
   1559                      {
   1560                        //if ( Cmd1Length == Cmd3Length )
   1561                          RecProcessing=2;//Inform self_test_1 received complete ------- AP006
   \   000022D2   8D48               LDR.N    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   000022D4   0221               MOVS     R1,#+2
   \   000022D6   0170               STRB     R1,[R0, #+0]
   1562                          UpgradeMode = 0;
   \   000022D8   AC48               LDR.N    R0,??UART_proNew_185+0x100  ;; UpgradeMode
   \   000022DA   0021               MOVS     R1,#+0
   \   000022DC   0170               STRB     R1,[R0, #+0]
   1563                          if ( BinMix == 1 )
   \   000022DE   AD48               LDR.N    R0,??UART_proNew_185+0x108  ;; BinMix
   \   000022E0   0078               LDRB     R0,[R0, #+0]
   \   000022E2   0128               CMP      R0,#+1
   \   000022E4   0BD1               BNE.N    ??UART_proNew_267
   1564                            Cmd1Length=sizeof(LEDPage1[0]) * (UARTFRM.End-UARTFRM.Start);
   \   000022E6   A348               LDR.N    R0,??UART_proNew_185+0xE8  ;; UARTFRM
   \   000022E8   4078               LDRB     R0,[R0, #+1]
   \   000022EA   A249               LDR.N    R1,??UART_proNew_185+0xE8  ;; UARTFRM
   \   000022EC   0978               LDRB     R1,[R1, #+0]
   \   000022EE   401A               SUBS     R0,R0,R1
   \   000022F0   40F6C801           MOVW     R1,#+2248
   \   000022F4   00FB01F0           MUL      R0,R0,R1
   \   000022F8   A549               LDR.N    R1,??UART_proNew_185+0x104  ;; Cmd1Length
   \   000022FA   0860               STR      R0,[R1, #+0]
   \   000022FC   C3E0               B.N      ??UART_proNew_4
   1565                          else
   1566                            Cmd1Length=sizeof(LEDPage[0]) * (UARTFRM.End-UARTFRM.Start);                  
   \                     ??UART_proNew_267:
   \   000022FE   9D48               LDR.N    R0,??UART_proNew_185+0xE8  ;; UARTFRM
   \   00002300   4078               LDRB     R0,[R0, #+1]
   \   00002302   9C49               LDR.N    R1,??UART_proNew_185+0xE8  ;; UARTFRM
   \   00002304   0978               LDRB     R1,[R1, #+0]
   \   00002306   401A               SUBS     R0,R0,R1
   \   00002308   4FF4CB71           MOV      R1,#+406
   \   0000230C   00FB01F0           MUL      R0,R0,R1
   \   00002310   9F49               LDR.N    R1,??UART_proNew_185+0x104  ;; Cmd1Length
   \   00002312   0860               STR      R0,[R1, #+0]
   \   00002314   B7E0               B.N      ??UART_proNew_4
   1567                        //else{
   1568                        // RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   1569                        // Disp_status = 0x5 ; // display error               
   1570                        //}  
   1571                      }  
   1572                      else
   1573                      {
   1574                          RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \                     ??UART_proNew_266:
   \   00002316   7C48               LDR.N    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   00002318   0321               MOVS     R1,#+3
   \   0000231A   0170               STRB     R1,[R0, #+0]
   1575                          Disp_status = Status ; // display Air error or complete
   \   0000231C   7D48               LDR.N    R0,??UART_proNew_185+0x88  ;; Disp_status
   \   0000231E   9DF80010           LDRB     R1,[SP, #+0]
   \   00002322   0170               STRB     R1,[R0, #+0]
   \   00002324   AFE0               B.N      ??UART_proNew_4
   1576                      } 
   1577                    }
   1578                    break;
   1579                  case LVL2Cmd2:
   1580                    if (gWRecBuff[ip++]==(NotLVL2Cmd2)){ // Command 反相
   \                     ??UART_proNew_260:
   \   00002326   2800               MOVS     R0,R5
   \   00002328   451C               ADDS     R5,R0,#+1
   \   0000232A   7449               LDR.N    R1,??UART_proNew_185+0x70  ;; gWRecBuff
   \   0000232C   405C               LDRB     R0,[R0, R1]
   \   0000232E   FA28               CMP      R0,#+250
   \   00002330   40F0A980           BNE.W    ??UART_proNew_4
   1581                      buflen=gWRecBuff[ip++];
   \   00002334   7148               LDR.N    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002336   285C               LDRB     R0,[R5, R0]
   \   00002338   0990               STR      R0,[SP, #+36]
   \   0000233A   6D1C               ADDS     R5,R5,#+1
   1582          	    if ( (gWRecLen-14) != buflen )
   \   0000233C   9648               LDR.N    R0,??UART_proNew_185+0x10C  ;; gWRecLen
   \   0000233E   0068               LDR      R0,[R0, #+0]
   \   00002340   0E38               SUBS     R0,R0,#+14
   \   00002342   0999               LDR      R1,[SP, #+36]
   \   00002344   8842               CMP      R0,R1
   \   00002346   06D0               BEQ.N    ??UART_proNew_268
   1583          	    {
   1584          		RecProcessing=3;//Inform self_test_1 received error ------- AP006 
   \   00002348   6F48               LDR.N    R0,??UART_proNew_185+0x7C  ;; RecProcessing
   \   0000234A   0321               MOVS     R1,#+3
   \   0000234C   0170               STRB     R1,[R0, #+0]
   1585                          Disp_status = 0x5 ; // display error
   \   0000234E   7148               LDR.N    R0,??UART_proNew_185+0x88  ;; Disp_status
   \   00002350   0521               MOVS     R1,#+5
   \   00002352   0170               STRB     R1,[R0, #+0]
   \   00002354   0BE0               B.N      ??UART_proNew_269
   1586                      }
   1587          	    else
   1588          	    {
   1589                        for(i=0;i<buflen;i++)
   \                     ??UART_proNew_268:
   \   00002356   0020               MOVS     R0,#+0
   \   00002358   0400               MOVS     R4,R0
   \                     ??UART_proNew_270:
   \   0000235A   0998               LDR      R0,[SP, #+36]
   \   0000235C   8442               CMP      R4,R0
   \   0000235E   06D2               BCS.N    ??UART_proNew_269
   1590                           UartPreFrmTbl[i]=gWRecBuff[ip++];
   \   00002360   8E48               LDR.N    R0,??UART_proNew_185+0x110  ;; UartPreFrmTbl
   \   00002362   6649               LDR.N    R1,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002364   695C               LDRB     R1,[R5, R1]
   \   00002366   2154               STRB     R1,[R4, R0]
   \   00002368   6D1C               ADDS     R5,R5,#+1
   \   0000236A   641C               ADDS     R4,R4,#+1
   \   0000236C   F5E7               B.N      ??UART_proNew_270
   1591          	    }	
   1592                      RevBuffIndex=0;//!!!!!!  
   \                     ??UART_proNew_269:
   \   0000236E   7F48               LDR.N    R0,??UART_proNew_185+0xE0  ;; RevBuffIndex
   \   00002370   0021               MOVS     R1,#+0
   \   00002372   0160               STR      R1,[R0, #+0]
   \   00002374   87E0               B.N      ??UART_proNew_4
   1593          
   1594                    }  
   1595                    break;
   1596                }
   1597                break;
   1598              case SUB:
   1599                Dtag=gWRecBuff[1];
   \                     ??UART_proNew_3:
   \   00002376   6148               LDR.N    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002378   4078               LDRB     R0,[R0, #+1]
   \   0000237A   8949               LDR.N    R1,??UART_proNew_185+0x114  ;; Dtag
   \   0000237C   0870               STRB     R0,[R1, #+0]
   1600                ChkSum1 = ( SUB + Dtag + gWRecBuff[2] + gWRecBuff[3] ) & 0xFF;      
   \   0000237E   8848               LDR.N    R0,??UART_proNew_185+0x114  ;; Dtag
   \   00002380   0078               LDRB     R0,[R0, #+0]
   \   00002382   5E49               LDR.N    R1,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002384   8978               LDRB     R1,[R1, #+2]
   \   00002386   0818               ADDS     R0,R1,R0
   \   00002388   5C49               LDR.N    R1,??UART_proNew_185+0x70  ;; gWRecBuff
   \   0000238A   C978               LDRB     R1,[R1, #+3]
   \   0000238C   0818               ADDS     R0,R1,R0
   \   0000238E   1A30               ADDS     R0,R0,#+26
   \   00002390   8DF80300           STRB     R0,[SP, #+3]
   1601                if ( ChkSum1 == gWRecBuff[4] ){
   \   00002394   9DF80300           LDRB     R0,[SP, #+3]
   \   00002398   5849               LDR.N    R1,??UART_proNew_185+0x70  ;; gWRecBuff
   \   0000239A   0979               LDRB     R1,[R1, #+4]
   \   0000239C   8842               CMP      R0,R1
   \   0000239E   32D1               BNE.N    ??UART_proNew_271
   1602                  value[0]=ACK;
   \   000023A0   0620               MOVS     R0,#+6
   \   000023A2   8DF80C00           STRB     R0,[SP, #+12]
   1603                  value[1]=Dtag;
   \   000023A6   7E48               LDR.N    R0,??UART_proNew_185+0x114  ;; Dtag
   \   000023A8   0078               LDRB     R0,[R0, #+0]
   \   000023AA   8DF80D00           STRB     R0,[SP, #+13]
   1604                  value[2]=ETX;
   \   000023AE   0320               MOVS     R0,#+3
   \   000023B0   8DF80E00           STRB     R0,[SP, #+14]
   1605                  Host_SendNext(value,3) ;      
   \   000023B4   0321               MOVS     R1,#+3
   \   000023B6   03A8               ADD      R0,SP,#+12
   \   000023B8   ........           BL       Host_SendNext
   1606                  if ((gWRecBuff[2] & 0x08)!= 0){
   \   000023BC   4F48               LDR.N    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   000023BE   8078               LDRB     R0,[R0, #+2]
   \   000023C0   10F0080F           TST      R0,#0x8
   \   000023C4   5FD0               BEQ.N    ??UART_proNew_4
   1607                    if (++Htag >= 0x80) Htag=0x20;
   \   000023C6   7748               LDR.N    R0,??UART_proNew_185+0x118  ;; Htag
   \   000023C8   0078               LDRB     R0,[R0, #+0]
   \   000023CA   401C               ADDS     R0,R0,#+1
   \   000023CC   7549               LDR.N    R1,??UART_proNew_185+0x118  ;; Htag
   \   000023CE   0870               STRB     R0,[R1, #+0]
   \   000023D0   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000023D2   8028               CMP      R0,#+128
   \   000023D4   02D3               BCC.N    ??UART_proNew_272
   \   000023D6   7348               LDR.N    R0,??UART_proNew_185+0x118  ;; Htag
   \   000023D8   2021               MOVS     R1,#+32
   \   000023DA   0170               STRB     R1,[R0, #+0]
   1608                    value[0]=ETX;
   \                     ??UART_proNew_272:
   \   000023DC   0320               MOVS     R0,#+3
   \   000023DE   8DF80C00           STRB     R0,[SP, #+12]
   1609                    value[1]=ETX;
   \   000023E2   0320               MOVS     R0,#+3
   \   000023E4   8DF80D00           STRB     R0,[SP, #+13]
   1610                    value[2]=RS;
   \   000023E8   1E20               MOVS     R0,#+30
   \   000023EA   8DF80E00           STRB     R0,[SP, #+14]
   1611                    value[3]=Htag;          
   \   000023EE   6D48               LDR.N    R0,??UART_proNew_185+0x118  ;; Htag
   \   000023F0   0078               LDRB     R0,[R0, #+0]
   \   000023F2   8DF80F00           STRB     R0,[SP, #+15]
   1612                    value[4]=ETX;
   \   000023F6   0320               MOVS     R0,#+3
   \   000023F8   8DF81000           STRB     R0,[SP, #+16]
   1613                    Host_SendNext(value,5) ;          
   \   000023FC   0521               MOVS     R1,#+5
   \   000023FE   03A8               ADD      R0,SP,#+12
   \   00002400   ........           BL       Host_SendNext
   \   00002404   3FE0               B.N      ??UART_proNew_4
   1614                  }
   1615                }else{
   1616                  value[0]=NAK;
   \                     ??UART_proNew_271:
   \   00002406   1520               MOVS     R0,#+21
   \   00002408   8DF80C00           STRB     R0,[SP, #+12]
   1617                  value[1]=Dtag;
   \   0000240C   6448               LDR.N    R0,??UART_proNew_185+0x114  ;; Dtag
   \   0000240E   0078               LDRB     R0,[R0, #+0]
   \   00002410   8DF80D00           STRB     R0,[SP, #+13]
   1618                  value[2]=ETX;
   \   00002414   0320               MOVS     R0,#+3
   \   00002416   8DF80E00           STRB     R0,[SP, #+14]
   1619                  Host_SendNext(value,3) ;
   \   0000241A   0321               MOVS     R1,#+3
   \   0000241C   03A8               ADD      R0,SP,#+12
   \   0000241E   ........           BL       Host_SendNext
   \   00002422   30E0               B.N      ??UART_proNew_4
   1620                }
   1621                break;
   1622              case SYN:
   1623                Dtag=gWRecBuff[1];
   \                     ??UART_proNew_2:
   \   00002424   3548               LDR.N    R0,??UART_proNew_185+0x70  ;; gWRecBuff
   \   00002426   4078               LDRB     R0,[R0, #+1]
   \   00002428   5D49               LDR.N    R1,??UART_proNew_185+0x114  ;; Dtag
   \   0000242A   0870               STRB     R0,[R1, #+0]
   1624                value[0]=SUB;
   \   0000242C   1A20               MOVS     R0,#+26
   \   0000242E   8DF80C00           STRB     R0,[SP, #+12]
   1625                value[1]=Dtag;
   \   00002432   5B48               LDR.N    R0,??UART_proNew_185+0x114  ;; Dtag
   \   00002434   0078               LDRB     R0,[R0, #+0]
   \   00002436   8DF80D00           STRB     R0,[SP, #+13]
   1626                value[2]=QueryVer;
   \   0000243A   3220               MOVS     R0,#+50
   \   0000243C   8DF80E00           STRB     R0,[SP, #+14]
   1627                value[3]=LED_byte_Length; 
   \   00002440   0A20               MOVS     R0,#+10
   \   00002442   8DF80F00           STRB     R0,[SP, #+15]
   1628                value[4]=0;
   \   00002446   0020               MOVS     R0,#+0
   \   00002448   8DF81000           STRB     R0,[SP, #+16]
   1629                value[5]=0;
   \   0000244C   0020               MOVS     R0,#+0
   \   0000244E   8DF81100           STRB     R0,[SP, #+17]
   1630                value[6] = ( value[0] + value[1] + value[2] + value[3] + value[4] + value[5] ) & 0x00FF;//Check Sum
   \   00002452   9DF80C00           LDRB     R0,[SP, #+12]
   \   00002456   9DF80D10           LDRB     R1,[SP, #+13]
   \   0000245A   0818               ADDS     R0,R1,R0
   \   0000245C   9DF80E10           LDRB     R1,[SP, #+14]
   \   00002460   0818               ADDS     R0,R1,R0
   \   00002462   9DF80F10           LDRB     R1,[SP, #+15]
   \   00002466   0818               ADDS     R0,R1,R0
   \   00002468   9DF81010           LDRB     R1,[SP, #+16]
   \   0000246C   0818               ADDS     R0,R1,R0
   \   0000246E   9DF81110           LDRB     R1,[SP, #+17]
   \   00002472   0818               ADDS     R0,R1,R0
   \   00002474   8DF81200           STRB     R0,[SP, #+18]
   1631                value[7]=ETX;
   \   00002478   0320               MOVS     R0,#+3
   \   0000247A   8DF81300           STRB     R0,[SP, #+19]
   1632                Host_SendNext(value,8) ;      
   \   0000247E   0821               MOVS     R1,#+8
   \   00002480   03A8               ADD      R0,SP,#+12
   \   00002482   ........           BL       Host_SendNext
   \                     ??UART_proNew_4:
   \   00002486   0DB0               ADD      SP,SP,#+52
   \   00002488   BDE8F08F           POP      {R4-R11,PC}      ;; return
   \                     ??UART_proNew_185:
   \   0000248C   ........           DC32     act_flag
   \   00002490   ........           DC32     GARCT
   \   00002494   ........           DC32     acc_flag
   \   00002498   ........           DC32     GAENG
   \   0000249C   ........           DC32     lng_flag
   \   000024A0   ........           DC32     GAFRA
   \   000024A4   ........           DC32     GATMHR24
   \   000024A8   ........           DC32     tmhr_flag
   \   000024AC   ........           DC32     tm_strt
   \   000024B0   ........           DC32     GATMHR12
   \   000024B4   ........           DC32     GADTMD
   \   000024B8   ........           DC32     tfm_flag
   \   000024BC   ........           DC32     GAMSM
   \   000024C0   ........           DC32     tsm_flag
   \   000024C4   ........           DC32     GASEQU
   \   000024C8   ........           DC32     seq_flag
   \   000024CC   ........           DC32     GACOLOR
   \   000024D0   ........           DC32     color_flag
   \   000024D4   ........           DC32     GAPCOLOR
   \   000024D8   ........           DC32     pcolor_flag
   \   000024DC   ........           DC32     GADDTON
   \   000024E0   ........           DC32     ddt_flag
   \   000024E4   ........           DC32     GADDTOFF
   \   000024E8   ........           DC32     GAGCTAU
   \   000024EC   ........           DC32     mgc_flag
   \   000024F0   ........           DC32     mau_flag
   \   000024F4   ........           DC32     GAGCT
   \   000024F8   ........           DC32     GADBZOFF
   \   000024FC   ........           DC32     gWRecBuff
   \   00002500   ........           DC32     dbz_flag
   \   00002504   ........           DC32     UartDelFlg
   \   00002508   ........           DC32     RecProcessing
   \   0000250C   ........           DC32     GADBZON
   \   00002510   ........           DC32     GAZTM
   \   00002514   ........           DC32     Disp_status
   \   00002518   30EBFFFF           DC32     0xffffeb30
   \   0000251C   ........           DC32     ztm_flag
   \   00002520   ........           DC32     GAZTY
   \   00002524   ........           DC32     zty_flag
   \   00002528   ........           DC32     pri_flag
   \   0000252C   ........           DC32     GA911
   \   00002530   ........           DC32     UartID
   \   00002534   ........           DC32     pri_bits
   \   00002538   ........           DC32     primsg_flag
   \   0000253C   ........           DC32     clRed
   \   00002540   ........           DC32     rly_counter
   \   00002544   ........           DC32     rlytm_flag
   \   00002548   ........           DC32     pricnt_flag
   \   0000254C   ........           DC32     TxtPage
   \   00002550   ........           DC32     GAPCAPCL
   \   00002554   ........           DC32     capcl_flag
   \   00002558   ........           DC32     autoct_flag
   \   0000255C   ........           DC32     autocl
   \   00002560   ........           DC32     mail_bits
   \   00002564   ........           DC32     TopIndex
   \   00002568   ........           DC32     msgno
   \   0000256C   ........           DC32     RevBuffIndex
   \   00002570   ........           DC32     Rec_Timer_cnt
   \   00002574   ........           DC32     UARTFRM
   \   00002578   ........           DC32     TestMode
   \   0000257C   ........           DC32     LRCM_flag
   \   00002580   ........           DC32     LRCM_value
   \   00002584   ........           DC32     CommandMode
   \   00002588   ........           DC32     Cmd3Length
   \   0000258C   ........           DC32     UpgradeMode
   \   00002590   ........           DC32     Cmd1Length
   \   00002594   ........           DC32     BinMix
   \   00002598   ........           DC32     gWRecLen
   \   0000259C   ........           DC32     UartPreFrmTbl
   \   000025A0   ........           DC32     Dtag
   \   000025A4   ........           DC32     Htag
   1633                break;
   1634            }
   1635          }

   \                                 In section UpgradeROM, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     zty_flag

   \                                 In section UpgradeROM, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     UpgradeMode

   \                                 In section UpgradeROM, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     BinMix

   \                                 In section UpgradeROM, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     UARTFRM

   \                                 In section UpgradeROM, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     UartPreFrmTbl

   \                                 In section UpgradeROM, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     TmpTxtBuff

   \                                 In section UpgradeROM, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     UartDelFlg

   \                                 In section UpgradeROM, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     UartID

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\001\\001\\002\\003\\004\\005\\006\\a\\b\\t`:
   \   00000000   010102030405       DC8 "\001\001\002\003\004\005\006\007\010\011"
   \              0607080900  
   \   0000000B   00                 DC8 0
   1636          

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     SelfTestNew          0
     UART_proNew          0
     UART_pro_entry       0
     memcpy               0
     memset               0
     self_test_entry      0
     time_entry           0


   Section sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     memcpy                                           22
     memset                                           22
     VerStr1                                          12
     self_test_entry                                   8
     UART_pro_entry                                    8
     time_entry                                        2
     SelfTestNew                                    4088
     UART_proNew                                    9640
     ??DataTable0                                      4
     ??DataTable3                                      4
     ??DataTable9                                      4
     ??DataTable13                                     4
     ??DataTable15                                     4
     ??DataTable20                                     4
     ??DataTable21                                     4
     ??DataTable27                                     4
     ?<Constant "\001\001\002\003\004\005\006\a\b\t   12

 
     12 bytes in section .rodata
     12 bytes in section UpgradeData
 13 822 bytes in section UpgradeROM
 
 13 778 bytes of CODE  memory (+ 44 bytes shared)
     24 bytes of CONST memory

Errors: none
Warnings: 1
