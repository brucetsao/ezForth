###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.20.0.50892/W32 for ARM     07/Oct/2009  13:03:56 #
# Copyright 1999-2008 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\library\src\stm32f #
#                    10x_gpio.c                                               #
#    Command line =  F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\library\src\stm32f #
#                    10x_gpio.c -D VECT_TAB_FLASH -lC                         #
#                    F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\STM3210E-EVAL\List #
#                    \ -o F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\STM3210E-EVAL #
#                    \Obj\ --debug --endian=little --cpu=Cortex-M3 -e         #
#                    --char_is_signed --require_prototypes --fpu=None         #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.0\ARM\INC\DLib_Config_Full.h" -I             #
#                    F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\ -I                #
#                    F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\library\inc\ -I    #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.0\ARM\INC\" -Ohz                                       #
#    List file    =  F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\STM3210E-EVAL\List #
#                    \stm32f10x_gpio.lst                                      #
#    Object file  =  F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\STM3210E-EVAL\Obj\ #
#                    stm32f10x_gpio.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\library\src\stm32f10x_gpio.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : stm32f10x_gpio.c
      3          * Author             : MCD Application Team
      4          * Version            : V2.0.3
      5          * Date               : 09/22/2008
      6          * Description        : This file provides all the GPIO firmware functions.
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          
     16          /* Includes ------------------------------------------------------------------*/
     17          #include "stm32f10x_gpio.h"
     18          #include "stm32f10x_rcc.h"
     19          
     20          /* Private typedef -----------------------------------------------------------*/
     21          /* Private define ------------------------------------------------------------*/
     22          /* ------------ RCC registers bit address in the alias region ----------- */
     23          #define AFIO_OFFSET                 (AFIO_BASE - PERIPH_BASE)
     24          
     25          /* --- EVENTCR Register ---*/
     26          /* Alias word address of EVOE bit */
     27          #define EVCR_OFFSET                 (AFIO_OFFSET + 0x00)
     28          #define EVOE_BitNumber              ((u8)0x07)
     29          #define EVCR_EVOE_BB                (PERIPH_BB_BASE + (EVCR_OFFSET * 32) + (EVOE_BitNumber * 4))
     30          
     31          #define EVCR_PORTPINCONFIG_MASK     ((u16)0xFF80)
     32          #define LSB_MASK                    ((u16)0xFFFF)
     33          #define DBGAFR_POSITION_MASK        ((u32)0x000F0000)
     34          #define DBGAFR_SWJCFG_MASK          ((u32)0xF0FFFFFF)
     35          #define DBGAFR_LOCATION_MASK        ((u32)0x00200000)
     36          #define DBGAFR_NUMBITS_MASK         ((u32)0x00100000)
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* Private variables ---------------------------------------------------------*/
     40          /* Private function prototypes -----------------------------------------------*/
     41          /* Private functions ---------------------------------------------------------*/
     42          
     43          /*******************************************************************************
     44          * Function Name  : GPIO_DeInit
     45          * Description    : Deinitializes the GPIOx peripheral registers to their default
     46          *                  reset values.
     47          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
     48          * Output         : None
     49          * Return         : None
     50          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     51          void GPIO_DeInit(GPIO_TypeDef* GPIOx)
     52          {
   \                     GPIO_DeInit:
   \   00000000   80B5               PUSH     {R7,LR}
     53            /* Check the parameters */
     54            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
     55            
     56            switch (*(u32*)&GPIOx)
   \   00000002   2349               LDR.N    R1,??GPIO_DeInit_0  ;; 0x40010800
   \   00000004   401A               SUBS     R0,R0,R1
   \   00000006   0ED0               BEQ.N    ??GPIO_DeInit_1
   \   00000008   4FF48061           MOV      R1,#+1024
   \   0000000C   401A               SUBS     R0,R0,R1
   \   0000000E   11D0               BEQ.N    ??GPIO_DeInit_2
   \   00000010   401A               SUBS     R0,R0,R1
   \   00000012   16D0               BEQ.N    ??GPIO_DeInit_3
   \   00000014   401A               SUBS     R0,R0,R1
   \   00000016   1BD0               BEQ.N    ??GPIO_DeInit_4
   \   00000018   401A               SUBS     R0,R0,R1
   \   0000001A   20D0               BEQ.N    ??GPIO_DeInit_5
   \   0000001C   401A               SUBS     R0,R0,R1
   \   0000001E   25D0               BEQ.N    ??GPIO_DeInit_6
   \   00000020   401A               SUBS     R0,R0,R1
   \   00000022   2AD0               BEQ.N    ??GPIO_DeInit_7
   \   00000024   01BD               POP      {R0,PC}
     57            {
     58              case GPIOA_BASE:
     59                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \                     ??GPIO_DeInit_1:
   \   00000026   0121               MOVS     R1,#+1
   \   00000028   0420               MOVS     R0,#+4
   \   0000002A   ........           BL       RCC_APB2PeriphResetCmd
     60                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
   \   0000002E   0021               MOVS     R1,#+0
   \   00000030   0420               MOVS     R0,#+4
   \   00000032   2AE0               B.N      ??GPIO_DeInit_8
     61                break;
     62          
     63              case GPIOB_BASE:
     64                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \                     ??GPIO_DeInit_2:
   \   00000034   0121               MOVS     R1,#+1
   \   00000036   0820               MOVS     R0,#+8
   \   00000038   ........           BL       RCC_APB2PeriphResetCmd
     65                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
   \   0000003C   0021               MOVS     R1,#+0
   \   0000003E   0820               MOVS     R0,#+8
   \   00000040   23E0               B.N      ??GPIO_DeInit_8
     66                break;
     67          
     68              case GPIOC_BASE:
     69                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
   \                     ??GPIO_DeInit_3:
   \   00000042   0121               MOVS     R1,#+1
   \   00000044   1020               MOVS     R0,#+16
   \   00000046   ........           BL       RCC_APB2PeriphResetCmd
     70                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
   \   0000004A   0021               MOVS     R1,#+0
   \   0000004C   1020               MOVS     R0,#+16
   \   0000004E   1CE0               B.N      ??GPIO_DeInit_8
     71                break;
     72          
     73              case GPIOD_BASE:
     74                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
   \                     ??GPIO_DeInit_4:
   \   00000050   0121               MOVS     R1,#+1
   \   00000052   2020               MOVS     R0,#+32
   \   00000054   ........           BL       RCC_APB2PeriphResetCmd
     75                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
   \   00000058   0021               MOVS     R1,#+0
   \   0000005A   2020               MOVS     R0,#+32
   \   0000005C   15E0               B.N      ??GPIO_DeInit_8
     76                break;
     77                
     78              case GPIOE_BASE:
     79                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
   \                     ??GPIO_DeInit_5:
   \   0000005E   0121               MOVS     R1,#+1
   \   00000060   4020               MOVS     R0,#+64
   \   00000062   ........           BL       RCC_APB2PeriphResetCmd
     80                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
   \   00000066   0021               MOVS     R1,#+0
   \   00000068   4020               MOVS     R0,#+64
   \   0000006A   0EE0               B.N      ??GPIO_DeInit_8
     81                break; 
     82          
     83              case GPIOF_BASE:
     84                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
   \                     ??GPIO_DeInit_6:
   \   0000006C   0121               MOVS     R1,#+1
   \   0000006E   8020               MOVS     R0,#+128
   \   00000070   ........           BL       RCC_APB2PeriphResetCmd
     85                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
   \   00000074   0021               MOVS     R1,#+0
   \   00000076   8020               MOVS     R0,#+128
   \   00000078   07E0               B.N      ??GPIO_DeInit_8
     86                break;
     87          
     88              case GPIOG_BASE:
     89                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
   \                     ??GPIO_DeInit_7:
   \   0000007A   0121               MOVS     R1,#+1
   \   0000007C   4FF48070           MOV      R0,#+256
   \   00000080   ........           BL       RCC_APB2PeriphResetCmd
     90                RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
   \   00000084   0021               MOVS     R1,#+0
   \   00000086   4FF48070           MOV      R0,#+256
   \                     ??GPIO_DeInit_8:
   \   0000008A   ........           BL       RCC_APB2PeriphResetCmd
     91                break;                       
     92          
     93              default:
     94                break;
     95            }
     96          }
   \                     ??GPIO_DeInit_9:
   \   0000008E   01BD               POP      {R0,PC}          ;; return
   \                     ??GPIO_DeInit_0:
   \   00000090   00080140           DC32     0x40010800
     97          
     98          /*******************************************************************************
     99          * Function Name  : GPIO_AFIODeInit
    100          * Description    : Deinitializes the Alternate Functions (remap, event control
    101          *                  and EXTI configuration) registers to their default reset
    102          *                  values.
    103          * Input          : None
    104          * Output         : None
    105          * Return         : None
    106          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    107          void GPIO_AFIODeInit(void)
    108          {
   \                     GPIO_AFIODeInit:
   \   00000000   80B5               PUSH     {R7,LR}
    109            RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   00000002   0121               MOVS     R1,#+1
   \   00000004   0120               MOVS     R0,#+1
   \   00000006   ........           BL       RCC_APB2PeriphResetCmd
    110            RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   0120               MOVS     R0,#+1
   \   0000000E   BDE80440           POP      {R2,LR}
   \   00000012   ........           B.W      RCC_APB2PeriphResetCmd
    111          }
    112          
    113          /*******************************************************************************
    114          * Function Name  : GPIO_Init
    115          * Description    : Initializes the GPIOx peripheral according to the specified
    116          *                  parameters in the GPIO_InitStruct.
    117          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
    118          *                  - GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
    119          *                    contains the configuration information for the specified GPIO
    120          *                    peripheral.
    121          * Output         : None
    122          * Return         : None
    123          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    124          void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
    125          {
   \                     GPIO_Init:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    126            u32 currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    127            u32 tmpreg = 0x00, pinmask = 0x00;
    128          
    129            /* Check the parameters */
    130            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    131            assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
    132            assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
    133            
    134          /*---------------------------- GPIO Mode Configuration -----------------------*/
    135            currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
   \   00000002   91F90330           LDRSB    R3,[R1, #+3]
   \   00000006   03F00F02           AND      R2,R3,#0xF
    136          
    137            if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
   \   0000000A   13F0100F           TST      R3,#0x10
   \   0000000E   1CBF               ITT      NE 
    138            { 
    139              /* Check the parameters */
    140              assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    141              /* Output mode */
    142              currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
   \   00000010   91F90230           LDRSBNE  R3,[R1, #+2]
   \   00000014   1A43               ORRNE    R2,R3,R2
    143            }
    144          
    145          /*---------------------------- GPIO CRL Configuration ------------------------*/
    146            /* Configure the eight low port pins */
    147            if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
   \   00000016   0B88               LDRH     R3,[R1, #+0]
   \   00000018   5FFA83FC           UXTB     R12,R3
   \   0000001C   BCF1000F           CMP      R12,#+0
   \   00000020   25D0               BEQ.N    ??GPIO_Init_0
    148            {
    149              tmpreg = GPIOx->CRL;
   \   00000022   D0F800E0           LDR      LR,[R0, #+0]
    150          
    151              for (pinpos = 0x00; pinpos < 0x08; pinpos++)
   \   00000026   4FF0000C           MOV      R12,#+0
    152              {
    153                pos = ((u32)0x01) << pinpos;
   \                     ??GPIO_Init_1:
   \   0000002A   0125               MOVS     R5,#+1
   \   0000002C   05FA0CF5           LSL      R5,R5,R12
    154                /* Get the port pins position */
    155                currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    156          
    157                if (currentpin == pos)
   \   00000030   05EA0306           AND      R6,R5,R3
   \   00000034   AE42               CMP      R6,R5
   \   00000036   13D1               BNE.N    ??GPIO_Init_2
    158                {
    159                  pos = pinpos << 2;
   \   00000038   4FEA8C04           LSL      R4,R12,#+2
    160                  /* Clear the corresponding low control register bits */
    161                  pinmask = ((u32)0x0F) << pos;
    162                  tmpreg &= ~pinmask;
    163          
    164                  /* Write the mode configuration in the corresponding bits */
    165                  tmpreg |= (currentmode << pos);
   \   0000003C   0F26               MOVS     R6,#+15
   \   0000003E   A640               LSLS     R6,R6,R4
   \   00000040   F643               MVNS     R6,R6
   \   00000042   06EA0E0E           AND      LR,R6,LR
   \   00000046   02FA04F4           LSL      R4,R2,R4
   \   0000004A   44EA0E0E           ORR      LR,R4,LR
    166          
    167                  /* Reset the corresponding ODR bit */
    168                  if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
   \   0000004E   91F90340           LDRSB    R4,[R1, #+3]
   \   00000052   282C               CMP      R4,#+40
   \   00000054   01D1               BNE.N    ??GPIO_Init_3
    169                  {
    170                    GPIOx->BRR = (((u32)0x01) << pinpos);
   \   00000056   4561               STR      R5,[R0, #+20]
   \   00000058   02E0               B.N      ??GPIO_Init_2
    171                  }
    172                  else
    173                  {
    174                    /* Set the corresponding ODR bit */
    175                    if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
   \                     ??GPIO_Init_3:
   \   0000005A   482C               CMP      R4,#+72
   \   0000005C   08BF               IT       EQ 
    176                    {
    177                      GPIOx->BSRR = (((u32)0x01) << pinpos);
   \   0000005E   0561               STREQ    R5,[R0, #+16]
    178                    }
    179                  }
    180                }
    181              }
   \                     ??GPIO_Init_2:
   \   00000060   0CF1010C           ADD      R12,R12,#+1
   \   00000064   BCF1080F           CMP      R12,#+8
   \   00000068   DFD3               BCC.N    ??GPIO_Init_1
    182              GPIOx->CRL = tmpreg;
   \   0000006A   C0F800E0           STR      LR,[R0, #+0]
    183            }
    184          
    185          /*---------------------------- GPIO CRH Configuration ------------------------*/
    186            /* Configure the eight high port pins */
    187            if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
   \                     ??GPIO_Init_0:
   \   0000006E   4FF4807C           MOV      R12,#+256
   \   00000072   6345               CMP      R3,R12
   \   00000074   28D3               BCC.N    ??GPIO_Init_4
    188            {
    189              tmpreg = GPIOx->CRH;
   \   00000076   D0F804E0           LDR      LR,[R0, #+4]
    190              for (pinpos = 0x00; pinpos < 0x08; pinpos++)
   \   0000007A   4FF0000C           MOV      R12,#+0
    191              {
    192                pos = (((u32)0x01) << (pinpos + 0x08));
   \                     ??GPIO_Init_5:
   \   0000007E   0124               MOVS     R4,#+1
   \   00000080   6546               MOV      R5,R12
   \   00000082   0835               ADDS     R5,R5,#+8
   \   00000084   04FA05F5           LSL      R5,R4,R5
    193                /* Get the port pins position */
    194                currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    195                if (currentpin == pos)
   \   00000088   05EA0306           AND      R6,R5,R3
   \   0000008C   AE42               CMP      R6,R5
   \   0000008E   14D1               BNE.N    ??GPIO_Init_6
    196                {
    197                  pos = pinpos << 2;
   \   00000090   4FEA8C04           LSL      R4,R12,#+2
    198                  /* Clear the corresponding high control register bits */
    199                  pinmask = ((u32)0x0F) << pos;
    200                  tmpreg &= ~pinmask;
    201          
    202                  /* Write the mode configuration in the corresponding bits */
    203                  tmpreg |= (currentmode << pos);
   \   00000094   0F26               MOVS     R6,#+15
   \   00000096   A640               LSLS     R6,R6,R4
   \   00000098   F643               MVNS     R6,R6
   \   0000009A   06EA0E0E           AND      LR,R6,LR
   \   0000009E   02FA04F4           LSL      R4,R2,R4
   \   000000A2   44EA0E0E           ORR      LR,R4,LR
    204          
    205                  /* Reset the corresponding ODR bit */
    206                  if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
   \   000000A6   91F90340           LDRSB    R4,[R1, #+3]
   \   000000AA   282C               CMP      R4,#+40
   \   000000AC   08BF               IT       EQ 
    207                  {
    208                    GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
   \   000000AE   4561               STREQ    R5,[R0, #+20]
    209                  }
    210                  /* Set the corresponding ODR bit */
    211                  if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
   \   000000B0   91F90340           LDRSB    R4,[R1, #+3]
   \   000000B4   482C               CMP      R4,#+72
   \   000000B6   08BF               IT       EQ 
    212                  {
    213                    GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
   \   000000B8   0561               STREQ    R5,[R0, #+16]
    214                  }
    215                }
    216              }
   \                     ??GPIO_Init_6:
   \   000000BA   0CF1010C           ADD      R12,R12,#+1
   \   000000BE   BCF1080F           CMP      R12,#+8
   \   000000C2   DCD3               BCC.N    ??GPIO_Init_5
    217              GPIOx->CRH = tmpreg;
   \   000000C4   C0F804E0           STR      LR,[R0, #+4]
    218            }
    219          }
   \                     ??GPIO_Init_4:
   \   000000C8   70BD               POP      {R4-R6,PC}       ;; return
    220          
    221          /*******************************************************************************
    222          * Function Name  : GPIO_StructInit
    223          * Description    : Fills each GPIO_InitStruct member with its default value.
    224          * Input          : - GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure
    225          *                    which will be initialized.
    226          * Output         : None
    227          * Return         : None
    228          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    229          void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
    230          {
    231            /* Reset GPIO init structure parameters values */
    232            GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
   \                     GPIO_StructInit:
   \   00000000   4FF6FF71           MOVW     R1,#+65535
   \   00000004   0180               STRH     R1,[R0, #+0]
    233            GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
   \   00000006   0221               MOVS     R1,#+2
   \   00000008   8170               STRB     R1,[R0, #+2]
    234            GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
   \   0000000A   0421               MOVS     R1,#+4
   \   0000000C   C170               STRB     R1,[R0, #+3]
    235          }
   \   0000000E   7047               BX       LR               ;; return
    236          
    237          /*******************************************************************************
    238          * Function Name  : GPIO_ReadInputDataBit
    239          * Description    : Reads the specified input port pin.
    240          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
    241          *                : - GPIO_Pin:  specifies the port bit to read.
    242          *                    This parameter can be GPIO_Pin_x where x can be (0..15).
    243          * Output         : None
    244          * Return         : The input port pin value.
    245          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    246          u8 GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
    247          {
    248            u8 bitstatus = 0x00;
    249            
    250            /* Check the parameters */
    251            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    252            assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
    253            
    254            if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
   \                     GPIO_ReadInputDataBit:
   \   00000000   8068               LDR      R0,[R0, #+8]
   \   00000002   0140               ANDS     R1,R1,R0
   \   00000004   0800               MOVS     R0,R1
   \   00000006   18BF               IT       NE 
   \   00000008   0120               MOVNE    R0,#+1
    255            {
    256              bitstatus = (u8)Bit_SET;
    257            }
    258            else
    259            {
    260              bitstatus = (u8)Bit_RESET;
    261            }
    262            return bitstatus;
   \   0000000A   C0B2               UXTB     R0,R0
   \   0000000C   7047               BX       LR               ;; return
    263          }
    264          
    265          /*******************************************************************************
    266          * Function Name  : GPIO_ReadInputData
    267          * Description    : Reads the specified GPIO input data port.
    268          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
    269          * Output         : None
    270          * Return         : GPIO input data port value.
    271          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    272          u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
    273          {
    274            /* Check the parameters */
    275            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    276            
    277            return ((u16)GPIOx->IDR);
   \                     GPIO_ReadInputData:
   \   00000000   8068               LDR      R0,[R0, #+8]
   \   00000002   80B2               UXTH     R0,R0
   \   00000004   7047               BX       LR               ;; return
    278          }
    279          
    280          /*******************************************************************************
    281          * Function Name  : GPIO_ReadOutputDataBit
    282          * Description    : Reads the specified output data port bit.
    283          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
    284          *                : - GPIO_Pin:  specifies the port bit to read.
    285          *                    This parameter can be GPIO_Pin_x where x can be (0..15).
    286          * Output         : None
    287          * Return         : The output port pin value.
    288          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    289          u8 GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
    290          {
    291            u8 bitstatus = 0x00;
    292          
    293            /* Check the parameters */
    294            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    295            assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
    296            
    297            if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
   \                     GPIO_ReadOutputDataBit:
   \   00000000   C068               LDR      R0,[R0, #+12]
   \   00000002   0140               ANDS     R1,R1,R0
   \   00000004   0800               MOVS     R0,R1
   \   00000006   18BF               IT       NE 
   \   00000008   0120               MOVNE    R0,#+1
    298            {
    299              bitstatus = (u8)Bit_SET;
    300            }
    301            else
    302            {
    303              bitstatus = (u8)Bit_RESET;
    304            }
    305            return bitstatus;
   \   0000000A   C0B2               UXTB     R0,R0
   \   0000000C   7047               BX       LR               ;; return
    306          }
    307          
    308          /*******************************************************************************
    309          * Function Name  : GPIO_ReadOutputData
    310          * Description    : Reads the specified GPIO output data port.
    311          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
    312          * Output         : None
    313          * Return         : GPIO output data port value.
    314          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    315          u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
    316          {
    317            /* Check the parameters */
    318            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    319              
    320            return ((u16)GPIOx->ODR);
   \                     GPIO_ReadOutputData:
   \   00000000   C068               LDR      R0,[R0, #+12]
   \   00000002   80B2               UXTH     R0,R0
   \   00000004   7047               BX       LR               ;; return
    321          }
    322          
    323          /*******************************************************************************
    324          * Function Name  : GPIO_SetBits
    325          * Description    : Sets the selected data port bits.
    326          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
    327          *                  - GPIO_Pin: specifies the port bits to be written.
    328          *                    This parameter can be any combination of GPIO_Pin_x where 
    329          *                    x can be (0..15).
    330          * Output         : None
    331          * Return         : None
    332          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    333          void GPIO_SetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
    334          {
    335            /* Check the parameters */
    336            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    337            assert_param(IS_GPIO_PIN(GPIO_Pin));
    338            
    339            GPIOx->BSRR = GPIO_Pin;
   \                     GPIO_SetBits:
   \   00000000   0161               STR      R1,[R0, #+16]
    340          }
   \   00000002   7047               BX       LR               ;; return
    341          
    342          /*******************************************************************************
    343          * Function Name  : GPIO_ResetBits
    344          * Description    : Clears the selected data port bits.
    345          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
    346          *                  - GPIO_Pin: specifies the port bits to be written.
    347          *                    This parameter can be any combination of GPIO_Pin_x where 
    348          *                    x can be (0..15).
    349          * Output         : None
    350          * Return         : None
    351          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    352          void GPIO_ResetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
    353          {
    354            /* Check the parameters */
    355            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    356            assert_param(IS_GPIO_PIN(GPIO_Pin));
    357            
    358            GPIOx->BRR = GPIO_Pin;
   \                     GPIO_ResetBits:
   \   00000000   4161               STR      R1,[R0, #+20]
    359          }
   \   00000002   7047               BX       LR               ;; return
    360          
    361          /*******************************************************************************
    362          * Function Name  : GPIO_WriteBit
    363          * Description    : Sets or clears the selected data port bit.
    364          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
    365          *                  - GPIO_Pin: specifies the port bit to be written.
    366          *                    This parameter can be one of GPIO_Pin_x where x can be (0..15).
    367          *                  - BitVal: specifies the value to be written to the selected bit.
    368          *                    This parameter can be one of the BitAction enum values:
    369          *                       - Bit_RESET: to clear the port pin
    370          *                       - Bit_SET: to set the port pin
    371          * Output         : None
    372          * Return         : None
    373          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    374          void GPIO_WriteBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin, BitAction BitVal)
    375          {
    376            /* Check the parameters */
    377            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    378            assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
    379            assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
    380            
    381            if (BitVal != Bit_RESET)
   \                     GPIO_WriteBit:
   \   00000000   002A               CMP      R2,#+0
   \   00000002   0CBF               ITE      EQ 
   \   00000004   4161               STREQ    R1,[R0, #+20]
    382            {
    383              GPIOx->BSRR = GPIO_Pin;
   \   00000006   0161               STRNE    R1,[R0, #+16]
    384            }
    385            else
    386            {
    387              GPIOx->BRR = GPIO_Pin;
    388            }
    389          }
   \   00000008   7047               BX       LR               ;; return
    390          
    391          /*******************************************************************************
    392          * Function Name  : GPIO_Write
    393          * Description    : Writes data to the specified GPIO data port.
    394          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
    395          *                  - PortVal: specifies the value to be written to the port output
    396          *                    data register.
    397          * Output         : None
    398          * Return         : None
    399          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    400          void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
    401          {
    402            /* Check the parameters */
    403            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    404            
    405            GPIOx->ODR = PortVal;
   \                     GPIO_Write:
   \   00000000   C160               STR      R1,[R0, #+12]
    406          }
   \   00000002   7047               BX       LR               ;; return
    407          
    408          /*******************************************************************************
    409          * Function Name  : GPIO_PinLockConfig
    410          * Description    : Locks GPIO Pins configuration registers.
    411          * Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
    412          *                  - GPIO_Pin: specifies the port bit to be written.
    413          *                    This parameter can be any combination of GPIO_Pin_x where 
    414          *                    x can be (0..15).
    415          * Output         : None
    416          * Return         : None
    417          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    418          void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
    419          {
    420            u32 tmp = 0x00010000;
    421            
    422            /* Check the parameters */
    423            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    424            assert_param(IS_GPIO_PIN(GPIO_Pin));
    425            
    426            tmp |= GPIO_Pin;
   \                     GPIO_PinLockConfig:
   \   00000000   41F48032           ORR      R2,R1,#0x10000
    427            /* Set LCKK bit */
    428            GPIOx->LCKR = tmp;
   \   00000004   8261               STR      R2,[R0, #+24]
    429            /* Reset LCKK bit */
    430            GPIOx->LCKR =  GPIO_Pin;
   \   00000006   8161               STR      R1,[R0, #+24]
    431            /* Set LCKK bit */
    432            GPIOx->LCKR = tmp;
   \   00000008   8261               STR      R2,[R0, #+24]
    433            /* Read LCKK bit*/
    434            tmp = GPIOx->LCKR;
   \   0000000A   8169               LDR      R1,[R0, #+24]
    435            /* Read LCKK bit*/
    436            tmp = GPIOx->LCKR;
   \   0000000C   8069               LDR      R0,[R0, #+24]
    437          }
   \   0000000E   7047               BX       LR               ;; return
    438          
    439          /*******************************************************************************
    440          * Function Name  : GPIO_EventOutputConfig
    441          * Description    : Selects the GPIO pin used as Event output.
    442          * Input          : - GPIO_PortSource: selects the GPIO port to be used as source
    443          *                    for Event output.
    444          *                    This parameter can be GPIO_PortSourceGPIOx where x can be
    445          *                    (A..E).
    446          *                  - GPIO_PinSource: specifies the pin for the Event output.
    447          *                    This parameter can be GPIO_PinSourcex where x can be (0..15).
    448          * Output         : None
    449          * Return         : None
    450          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    451          void GPIO_EventOutputConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
    452          {
    453            u32 tmpreg = 0x00;
    454          
    455            /* Check the parameters */
    456            assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
    457            assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    458              
    459            tmpreg = AFIO->EVCR;
   \                     GPIO_EventOutputConfig:
   \   00000000   054A               LDR.N    R2,??GPIO_EventOutputConfig_0  ;; 0x40010000
   \   00000002   1368               LDR      R3,[R2, #+0]
    460            /* Clear the PORT[6:4] and PIN[3:0] bits */
    461            tmpreg &= EVCR_PORTPINCONFIG_MASK;
    462            tmpreg |= (u32)GPIO_PortSource << 0x04;
    463            tmpreg |= GPIO_PinSource;
    464          
    465            AFIO->EVCR = tmpreg;
   \   00000004   4FF6807C           MOVW     R12,#+65408
   \   00000008   0CEA0303           AND      R3,R12,R3
   \   0000000C   43EA0010           ORR      R0,R3,R0, LSL #+4
   \   00000010   0843               ORRS     R0,R1,R0
   \   00000012   1060               STR      R0,[R2, #+0]
    466          }
   \   00000014   7047               BX       LR               ;; return
   \   00000016   00BF               Nop      
   \                     ??GPIO_EventOutputConfig_0:
   \   00000018   00000140           DC32     0x40010000
    467          
    468          /*******************************************************************************
    469          * Function Name  : GPIO_EventOutputCmd
    470          * Description    : Enables or disables the Event Output.
    471          * Input          : - NewState: new state of the Event output.
    472          *                    This parameter can be: ENABLE or DISABLE.
    473          * Output         : None
    474          * Return         : None
    475          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    476          void GPIO_EventOutputCmd(FunctionalState NewState)
    477          {
    478            /* Check the parameters */
    479            assert_param(IS_FUNCTIONAL_STATE(NewState));
    480            
    481            *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
   \                     GPIO_EventOutputCmd:
   \   00000000   0149               LDR.N    R1,??GPIO_EventOutputCmd_0  ;; 0x4220001c
   \   00000002   0860               STR      R0,[R1, #+0]
    482          }
   \   00000004   7047               BX       LR               ;; return
   \   00000006   00BF               Nop      
   \                     ??GPIO_EventOutputCmd_0:
   \   00000008   1C002042           DC32     0x4220001c
    483          
    484          /*******************************************************************************
    485          * Function Name  : GPIO_PinRemapConfig
    486          * Description    : Changes the mapping of the specified pin.
    487          * Input          : - GPIO_Remap: selects the pin to remap.
    488          *                    This parameter can be one of the following values:
    489          *                       - GPIO_Remap_SPI1
    490          *                       - GPIO_Remap_I2C1
    491          *                       - GPIO_Remap_USART1
    492          *                       - GPIO_Remap_USART2
    493          *                       - GPIO_PartialRemap_USART3
    494          *                       - GPIO_FullRemap_USART3
    495          *                       - GPIO_PartialRemap_TIM1
    496          *                       - GPIO_FullRemap_TIM1
    497          *                       - GPIO_PartialRemap1_TIM2
    498          *                       - GPIO_PartialRemap2_TIM2
    499          *                       - GPIO_FullRemap_TIM2
    500          *                       - GPIO_PartialRemap_TIM3
    501          *                       - GPIO_FullRemap_TIM3
    502          *                       - GPIO_Remap_TIM4
    503          *                       - GPIO_Remap1_CAN
    504          *                       - GPIO_Remap2_CAN
    505          *                       - GPIO_Remap_PD01
    506          *                       - GPIO_Remap_TIM5CH4_LSI
    507          *                       - GPIO_Remap_ADC1_ETRGINJ
    508          *                       - GPIO_Remap_ADC1_ETRGREG
    509          *                       - GPIO_Remap_ADC2_ETRGINJ
    510          *                       - GPIO_Remap_ADC2_ETRGREG
    511          *                       - GPIO_Remap_SWJ_NoJTRST
    512          *                       - GPIO_Remap_SWJ_JTAGDisable
    513          *                       - GPIO_Remap_SWJ_Disable
    514          *                  - NewState: new state of the port pin remapping.
    515          *                    This parameter can be: ENABLE or DISABLE.
    516          * Output         : None
    517          * Return         : None
    518          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    519          void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
    520          {
   \                     GPIO_PinRemapConfig:
   \   00000000   10B5               PUSH     {R4,LR}
    521            u32 tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    522          
    523            /* Check the parameters */
    524            assert_param(IS_GPIO_REMAP(GPIO_Remap));
    525            assert_param(IS_FUNCTIONAL_STATE(NewState));  
    526            
    527            tmpreg = AFIO->MAPR;
   \   00000002   184A               LDR.N    R2,??GPIO_PinRemapConfig_0  ;; 0x40010004
   \   00000004   1368               LDR      R3,[R2, #+0]
    528          
    529            tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
   \   00000006   00F4702C           AND      R12,R0,#0xF0000
   \   0000000A   4FEA1C4E           LSR      LR,R12,#+16
    530            tmp = GPIO_Remap & LSB_MASK;
   \   0000000E   1FFA80FC           UXTH     R12,R0
    531          
    532            if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
   \   00000012   440D               LSRS     R4,R0,#+21
   \   00000014   2406               LSLS     R4,R4,#+24
   \   00000016   240D               LSRS     R4,R4,#+20
   \   00000018   0CFA04FC           LSL      R12,R12,R4
   \   0000001C   00F44014           AND      R4,R0,#0x300000
   \   00000020   B4F5401F           CMP      R4,#+3145728
   \   00000024   08D1               BNE.N    ??GPIO_PinRemapConfig_1
    533            {
    534              tmpreg &= DBGAFR_SWJCFG_MASK;
   \   00000026   6FF07060           MVN      R0,#+251658240
   \   0000002A   0340               ANDS     R3,R0,R3
    535              AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
   \   0000002C   D2F800E0           LDR      LR,[R2, #+0]
   \   00000030   00EA0E00           AND      R0,R0,LR
   \   00000034   1060               STR      R0,[R2, #+0]
   \   00000036   0FE0               B.N      ??GPIO_PinRemapConfig_2
    536            }
    537            else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
   \                     ??GPIO_PinRemapConfig_1:
   \   00000038   10F4801F           TST      R0,#0x100000
   \   0000003C   07D0               BEQ.N    ??GPIO_PinRemapConfig_3
    538            {
    539              tmp1 = ((u32)0x03) << tmpmask;
    540              tmpreg &= ~tmp1;
    541              tmpreg |= ~DBGAFR_SWJCFG_MASK;
   \   0000003E   0320               MOVS     R0,#+3
   \   00000040   00FA0EF0           LSL      R0,R0,LR
   \   00000044   C043               MVNS     R0,R0
   \   00000046   1840               ANDS     R0,R0,R3
   \   00000048   40F07063           ORR      R3,R0,#0xF000000
   \   0000004C   04E0               B.N      ??GPIO_PinRemapConfig_2
    542            }
    543            else
    544            {
    545              tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    546              tmpreg |= ~DBGAFR_SWJCFG_MASK;
   \                     ??GPIO_PinRemapConfig_3:
   \   0000004E   6FEA0C00           MVN      R0,R12
   \   00000052   1840               ANDS     R0,R0,R3
   \   00000054   40F07063           ORR      R3,R0,#0xF000000
    547            }
    548          
    549            if (NewState != DISABLE)
   \                     ??GPIO_PinRemapConfig_2:
   \   00000058   09B1               CBZ      R1,??GPIO_PinRemapConfig_4
    550            {
    551              tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
   \   0000005A   4CEA0303           ORR      R3,R12,R3
    552            }
    553          
    554            AFIO->MAPR = tmpreg;
   \                     ??GPIO_PinRemapConfig_4:
   \   0000005E   1360               STR      R3,[R2, #+0]
    555          }
   \   00000060   10BD               POP      {R4,PC}          ;; return
   \   00000062   00BF               Nop      
   \                     ??GPIO_PinRemapConfig_0:
   \   00000064   04000140           DC32     0x40010004
    556          
    557          /*******************************************************************************
    558          * Function Name  : GPIO_EXTILineConfig
    559          * Description    : Selects the GPIO pin used as EXTI Line.
    560          * Input          : - GPIO_PortSource: selects the GPIO port to be used as
    561          *                    source for EXTI lines.
    562          *                    This parameter can be GPIO_PortSourceGPIOx where x can be
    563          *                    (A..G).
    564          *                  - GPIO_PinSource: specifies the EXTI line to be configured.
    565          *                   This parameter can be GPIO_PinSourcex where x can be (0..15).
    566          * Output         : None
    567          * Return         : None
    568          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    569          void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
    570          {
    571            u32 tmp = 0x00;
    572          
    573            /* Check the parameters */
    574            assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
    575            assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    576            
    577            tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
    578          
    579            AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
   \                     GPIO_EXTILineConfig:
   \   00000000   01F00302           AND      R2,R1,#0x3
   \   00000004   9200               LSLS     R2,R2,#+2
   \   00000006   8910               ASRS     R1,R1,#+2
   \   00000008   0A4B               LDR.N    R3,??GPIO_EXTILineConfig_0  ;; 0x40010008
   \   0000000A   53F82130           LDR      R3,[R3, R1, LSL #+2]
   \   0000000E   4FF00F0C           MOV      R12,#+15
   \   00000012   0CFA02FC           LSL      R12,R12,R2
   \   00000016   6FEA0C0C           MVN      R12,R12
   \   0000001A   0CEA0303           AND      R3,R12,R3
   \   0000001E   DFF814C0           LDR.W    R12,??GPIO_EXTILineConfig_0  ;; 0x40010008
   \   00000022   4CF82130           STR      R3,[R12, R1, LSL #+2]
    580            AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
   \   00000026   5CF82130           LDR      R3,[R12, R1, LSL #+2]
   \   0000002A   9040               LSLS     R0,R0,R2
   \   0000002C   1843               ORRS     R0,R0,R3
   \   0000002E   4CF82100           STR      R0,[R12, R1, LSL #+2]
    581          }
   \   00000032   7047               BX       LR               ;; return
   \                     ??GPIO_EXTILineConfig_0:
   \   00000034   08000140           DC32     0x40010008
    582          
    583          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     GPIO_AFIODeInit             0
     GPIO_DeInit                 0
     GPIO_EXTILineConfig         0
     GPIO_EventOutputCmd         0
     GPIO_EventOutputConfig      0
     GPIO_Init                   0
     GPIO_PinLockConfig          0
     GPIO_PinRemapConfig         0
     GPIO_ReadInputData          0
     GPIO_ReadInputDataBit       0
     GPIO_ReadOutputData         0
     GPIO_ReadOutputDataBit      0
     GPIO_ResetBits              0
     GPIO_SetBits                0
     GPIO_StructInit             0
     GPIO_Write                  0
     GPIO_WriteBit               0


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     GPIO_DeInit             148
     GPIO_AFIODeInit          22
     GPIO_Init               202
     GPIO_StructInit          16
     GPIO_ReadInputDataBit    14
     GPIO_ReadInputData        6
     GPIO_ReadOutputDataBit   14
     GPIO_ReadOutputData       6
     GPIO_SetBits              4
     GPIO_ResetBits            4
     GPIO_WriteBit            10
     GPIO_Write                4
     GPIO_PinLockConfig       16
     GPIO_EventOutputConfig   28
     GPIO_EventOutputCmd      12
     GPIO_PinRemapConfig     104
     GPIO_EXTILineConfig      56

 
 666 bytes in section .text
 
 666 bytes of CODE memory

Errors: none
Warnings: none
