###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.20.0.50892/W32 for ARM     05/May/2009  18:27:53 #
# Copyright 1999-2008 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wesley\AS210R_ST\led_effect.cpp                       #
#    Command line =  D:\wesley\AS210R_ST\led_effect.cpp -D VECT_TAB_FLASH     #
#                    -lC D:\wesley\AS210R_ST\STM3210E-EVAL\List\ -o           #
#                    D:\wesley\AS210R_ST\STM3210E-EVAL\Obj\ --no_cse          #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --char_is_signed                      #
#                    --require_prototypes --fpu=None --dlib_config            #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.0\ARM\INC\DLib_Config_Full.h" -I D:\wesley\AS210R_ST\  #
#                    -I D:\wesley\AS210R_ST\library\inc\ -I "C:\Program       #
#                    Files\IAR Systems\Embedded Workbench 5.0\ARM\INC\" -On   #
#    List file    =  D:\wesley\AS210R_ST\STM3210E-EVAL\List\led_effect.lst    #
#    Object file  =  D:\wesley\AS210R_ST\STM3210E-EVAL\Obj\led_effect.o       #
#                                                                             #
#                                                                             #
###############################################################################

D:\wesley\AS210R_ST\led_effect.cpp
      1          #include "BCorHardWare.h"
      2          
      3          #include "typedef.h"
      4          
      5          #include <string.h>

   \                                 In section .text, align 4
   \   __??Code16?? __intrinsic __code __interwork void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   3200               MOVS     R2,R6
   \   0000000A   2900               MOVS     R1,R5
   \   0000000C   2000               MOVS     R0,R4
   \   0000000E   ........           BL       __aeabi_memcpy
   \   00000012   2000               MOVS     R0,R4
   \   00000014   70BD               POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4
   \   __??Code16?? __intrinsic __code __interwork void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   2A00               MOVS     R2,R5
   \   0000000A   3100               MOVS     R1,R6
   \   0000000C   2000               MOVS     R0,R4
   \   0000000E   ........           BL       __aeabi_memset
   \   00000012   2000               MOVS     R0,R4
   \   00000014   70BD               POP      {R4-R6,PC}       ;; return
      6          #include <stdlib.h>

   \                                 In section .text, align 4
   \   __??Code16?? __intrinsic __code __interwork int abs(int)
   \                     abs:
   \   00000000   0028               CMP      R0,#+0
   \   00000002   00D5               BPL.N    ??abs_0
   \   00000004   4042               RSBS     R0,R0,#+0
   \                     ??abs_0:
   \   00000006   7047               BX       LR               ;; return
      7          #include "ioReFlex.h"
      8          #include "LED_Effect.h"
      9          
     10          
     11          //************************引用的外部資料結構***********************
     12          
     13          extern unsigned char *Dest_Adr,*Sour_Adr;
     14          extern volatile unsigned char RecProcessing;
     15          extern volatile unsigned char LED_change;
     16          extern unsigned char color_flag;
     17          extern unsigned char pcolor_flag;
     18          extern int PTopIndex;
     19          
     20          
     21          extern unsigned char color_flag;
     22          extern int RTS_flg,RTS_flg1;
     23          
     24          
     25          
     26          extern struct LED{
     27                       unsigned char COM[16][LED_byte_Length];
     28                    }LED_display,LED_buffer,LED_bufferG,Backup,BackupG;
     29          extern unsigned char udf[LED_byte_Length],udfG[LED_byte_Length];
     30          extern unsigned char animate_img[4][16][2];
     31          
     32          extern unsigned char rndnum[256];  
     33          
     34          extern unsigned int Data_Len,Dest_data; 
     35          
     36          
     37          
     38          extern int LedDly;
     39          extern unsigned char last_str_width;
     40          extern unsigned char BinMix; // 0 = Binary , 1 = Mix
     41          extern struct {
     42            short          Str_Width;           //每一幕的pixels總數
     43            unsigned char  CharWidth[80];      //每一個字的pixels寬度
     44            unsigned char  buf[16][LED_byte_Length];//每一幕的pixels Image
     45            unsigned char  bufG[16][LED_byte_Length];//每一幕的Green pixels Image    
     46            unsigned char  mode;                //前功能選項
     47            unsigned char  outmode;             //後功能選項
     48            short          delay;
     49          }LEDPage[255];
     50          
     51          extern struct {
     52            short          Str_Width;           //每一幕的pixels總數
     53            unsigned char  CharWidth[80];      //每一個字的pixels寬度
     54            unsigned char  buf[16][LED_byte_Length];//每一幕的Red pixels Image
     55            unsigned char  bufG[16][LED_byte_Length];//每一幕的Green pixels Image  
     56            unsigned char data[2001];
     57            unsigned char  mode;                //前功能選項
     58            unsigned char  outmode;             //後功能選項
     59            short          delay;
     60          }LEDPage1[24];
     61          //***************************************************************** 
     62          extern unsigned char SpdTm[5];
     63          extern unsigned char SpdCn[5]; 
     64          //************************引用的外部函數***************************         
     65          extern void Shift_data_left(void);
     66          extern void Shift_data_leftX(void);
     67          extern void Shift_data_leftXG(void);
     68          extern void data_copyF(void);
     69          extern void data_copyB(void);
     70          extern void data_set(void);
     71          extern void Shift_data_right(void);
     72          extern void dly_ms(unsigned long ms_time);
     73          void LED_ascii2buffer(unsigned char *ASC_Buf,int n);// led read ascii code transfer to LED buffer
     74          void LED_ascii2bufferC(unsigned char *ASC_Buf,unsigned char *Color_Buf,int n);
     75          //*****************************************************************
     76          
     77          //************************區域函數*********************************        
     78          static void shift_up(unsigned char buf[16][LED_byte_Length],unsigned char ud[LED_byte_Length]);
     79          static void shift_down(unsigned char buf[16][LED_byte_Length],unsigned char ud[LED_byte_Length]);
     80          static unsigned short Get_ImgBits(unsigned char buf[16][LED_byte_Length],int V_Lines,int H_Bits,int TotalBits);
     81          static void Put_ImgBits(unsigned char buf[16][LED_byte_Length],int V_Lines,int H_Bits,unsigned short value,int TotalBits);
     82          static void Get_ImgBitsPage(unsigned char buf[16][LED_byte_Length],unsigned short value[16],int H_Bits,unsigned int TotalBits);
     83          static void Put_ImgBitsPage(unsigned char buf[16][LED_byte_Length],unsigned short value[16],int H_Bits,unsigned int TotalBits);
     84          static void shiftBits_down(int VBits_Pos,unsigned char buf[16][LED_byte_Length],unsigned char ud[LED_byte_Length]);
     85          static void shiftBits_up(int VBits_Pos,unsigned char buf[16][LED_byte_Length],unsigned char ud[LED_byte_Length]);
     86          static void inverse_buf(unsigned char buf[16][LED_byte_Length]);
     87          //********************************************************************************
     88          
     89          //************************ BCB ******************************************************
     90          extern void scroll_leftBack(int bits); //Backup_buf 向左移入
     91          void rcr(unsigned char *ch);
     92          void shift_right(unsigned char buf[16][LED_byte_Length]);
     93          extern unsigned char cfA[16],cf,cfAG[16],cfG;
     94          extern void shift_left(int pos,unsigned char buf[16][LED_byte_Length]);
     95          extern void shift_leftG(int pos,unsigned char buf[16][LED_byte_Length]);
     96          
     97          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
     98          void scroll_leftB(void) //向左移入
     99          {
   \                     scroll_leftB:
   \   00000000   10B5               PUSH     {R4,LR}
    100            int j;
    101            for( j = 0 ; j < LED_bit_Length ; j ++ ){
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0400               MOVS     R4,R0
   \                     ??scroll_leftB_0:
   \   00000006   502C               CMP      R4,#+80
   \   00000008   11DA               BGE.N    ??scroll_leftB_1
    102              while( LED_change == 1 );
   \                     ??scroll_leftB_2:
   \   0000000A   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   0000000E   0078               LDRB     R0,[R0, #+0]
   \   00000010   0128               CMP      R0,#+1
   \   00000012   FAD0               BEQ.N    ??scroll_leftB_2
    103              
    104              if (RecProcessing != 0 )
   \   00000014   ........           LDR.W    R0,??DataTable168  ;; RecProcessing
   \   00000018   0078               LDRB     R0,[R0, #+0]
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   07D1               BNE.N    ??scroll_leftB_1
    105                 return ;  
    106              Shift_data_left();  // do data shift left with assembler
   \   0000001E   ........           BL       Shift_data_left
    107              LED_change = 1 ;
   \   00000022   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   00000026   0121               MOVS     R1,#+1
   \   00000028   0170               STRB     R1,[R0, #+0]
    108            }
   \   0000002A   641C               ADDS     R4,R4,#+1
   \   0000002C   EBE7               B.N      ??scroll_leftB_0
   \                     ??scroll_leftB_1:
   \   0000002E   10BD               POP      {R4,PC}          ;; return
    109          }
    110          
    111          /*
    112          void scroll_left(void) //向左移入
    113          {
    114            int i,k;
    115            int dly;
    116            dly=LedDly;
    117            for( i = 0 ; i < LED_bit_Length ; i +=SpdTm[LedDly] ){    
    118              if (RecProcessing != 0 )
    119                 return ;
    120              for( k = i ; k < (i+SpdTm[dly]) ; k++ ){
    121                Shift_data_left();  // do data shift left with assembler
    122              }
    123              for(k=0;k<SpdCn[dly];k++){             
    124          
    125                LED_change = 1 ;
    126                while( LED_change != 0 );
    127              }    
    128            }
    129          }
    130          */
    131          
    132          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    133          void scroll_left(void) //向左移入
    134          {
   \                     scroll_left:
   \   00000000   80B5               PUSH     {R7,LR}
    135            scroll_leftX(LED_bit_Length);
   \   00000002   5020               MOVS     R0,#+80
   \   00000004   ........           BL       scroll_leftX
    136          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
    137          
    138          
    139          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    140          void scroll_leftX(int len) //向左移入1
    141          {
   \                     scroll_leftX:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0400               MOVS     R4,R0
    142            int i,j,k;
    143            int dly;
    144            dly=LedDly;
   \   00000006   4948               LDR.N    R0,??scroll_leftX_0  ;; LedDly
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   8046               MOV      R8,R0
    145            for( i = 0 ; i < len ; i +=SpdTm[LedDly] ){    
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   0500               MOVS     R5,R0
   \                     ??scroll_leftX_1:
   \   00000010   A542               CMP      R5,R4
   \   00000012   80F28980           BGE.W    ??scroll_leftX_2
    146              if (RecProcessing != 0 )
   \   00000016   ........           LDR.W    R0,??DataTable168  ;; RecProcessing
   \   0000001A   0078               LDRB     R0,[R0, #+0]
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   40F08380           BNE.W    ??scroll_leftX_2
    147                 return ;
    148              for( k = i ; k < (i+SpdTm[dly]) ; k++ ){
   \   00000022   2F00               MOVS     R7,R5
   \                     ??scroll_leftX_3:
   \   00000024   4248               LDR.N    R0,??scroll_leftX_0+0x4  ;; SpdTm
   \   00000026   18F80000           LDRB     R0,[R8, R0]
   \   0000002A   4019               ADDS     R0,R0,R5
   \   0000002C   8742               CMP      R7,R0
   \   0000002E   63DA               BGE.N    ??scroll_leftX_4
    149                Shift_data_leftX();  // do data shift left with assembler
   \   00000030   ........           BL       Shift_data_leftX
    150                Shift_data_leftXG();  // do data shift left with assembler
   \   00000034   ........           BL       Shift_data_leftXG
    151                if ( i < LED_bit_Length )
   \   00000038   502D               CMP      R5,#+80
   \   0000003A   5BDA               BGE.N    ??scroll_leftX_5
    152                  for(j=0;j < 16;j++){
   \   0000003C   0020               MOVS     R0,#+0
   \   0000003E   0600               MOVS     R6,R0
   \                     ??scroll_leftX_6:
   \   00000040   102E               CMP      R6,#+16
   \   00000042   57DA               BGE.N    ??scroll_leftX_5
    153                    if ( (Backup.COM[j][ k >> 3 ] & ( 0x80 >> ( k & 0x07 ) )) != 0 )
   \   00000044   F810               ASRS     R0,R7,#+3
   \   00000046   0A21               MOVS     R1,#+10
   \   00000048   ........           LDR.W    R2,??DataTable154  ;; Backup
   \   0000004C   06FB0121           MLA      R1,R6,R1,R2
   \   00000050   405C               LDRB     R0,[R0, R1]
   \   00000052   8021               MOVS     R1,#+128
   \   00000054   3A00               MOVS     R2,R7
   \   00000056   12F00702           ANDS     R2,R2,#0x7
   \   0000005A   1141               ASRS     R1,R1,R2
   \   0000005C   0842               TST      R0,R1
   \   0000005E   0ED0               BEQ.N    ??scroll_leftX_7
    154                      LED_buffer.COM[j][LED_byte_Length-1] |= 0x01;
   \   00000060   0A20               MOVS     R0,#+10
   \   00000062   ........           LDR.W    R1,??DataTable163  ;; LED_buffer
   \   00000066   06FB0010           MLA      R0,R6,R0,R1
   \   0000006A   407A               LDRB     R0,[R0, #+9]
   \   0000006C   50F00100           ORRS     R0,R0,#0x1
   \   00000070   0A21               MOVS     R1,#+10
   \   00000072   ........           LDR.W    R2,??DataTable163  ;; LED_buffer
   \   00000076   06FB0121           MLA      R1,R6,R1,R2
   \   0000007A   4872               STRB     R0,[R1, #+9]
   \   0000007C   0DE0               B.N      ??scroll_leftX_8
    155                    else
    156                      LED_buffer.COM[j][LED_byte_Length-1] &= 0xFE;
   \                     ??scroll_leftX_7:
   \   0000007E   0A20               MOVS     R0,#+10
   \   00000080   ........           LDR.W    R1,??DataTable163  ;; LED_buffer
   \   00000084   06FB0010           MLA      R0,R6,R0,R1
   \   00000088   407A               LDRB     R0,[R0, #+9]
   \   0000008A   10F0FE00           ANDS     R0,R0,#0xFE
   \   0000008E   0A21               MOVS     R1,#+10
   \   00000090   ........           LDR.W    R2,??DataTable163  ;; LED_buffer
   \   00000094   06FB0121           MLA      R1,R6,R1,R2
   \   00000098   4872               STRB     R0,[R1, #+9]
    157                    if ( (BackupG.COM[j][ k >> 3 ] & ( 0x80 >> ( k & 0x07 ) )) != 0 )
   \                     ??scroll_leftX_8:
   \   0000009A   F810               ASRS     R0,R7,#+3
   \   0000009C   0A21               MOVS     R1,#+10
   \   0000009E   ........           LDR.W    R2,??DataTable159  ;; BackupG
   \   000000A2   06FB0121           MLA      R1,R6,R1,R2
   \   000000A6   405C               LDRB     R0,[R0, R1]
   \   000000A8   8021               MOVS     R1,#+128
   \   000000AA   3A00               MOVS     R2,R7
   \   000000AC   12F00702           ANDS     R2,R2,#0x7
   \   000000B0   1141               ASRS     R1,R1,R2
   \   000000B2   0842               TST      R0,R1
   \   000000B4   0ED0               BEQ.N    ??scroll_leftX_9
    158                      LED_bufferG.COM[j][LED_byte_Length-1] |= 0x01;
   \   000000B6   0A20               MOVS     R0,#+10
   \   000000B8   ........           LDR.W    R1,??DataTable165  ;; LED_bufferG
   \   000000BC   06FB0010           MLA      R0,R6,R0,R1
   \   000000C0   407A               LDRB     R0,[R0, #+9]
   \   000000C2   50F00100           ORRS     R0,R0,#0x1
   \   000000C6   0A21               MOVS     R1,#+10
   \   000000C8   ........           LDR.W    R2,??DataTable165  ;; LED_bufferG
   \   000000CC   06FB0121           MLA      R1,R6,R1,R2
   \   000000D0   4872               STRB     R0,[R1, #+9]
   \   000000D2   0DE0               B.N      ??scroll_leftX_10
    159                    else
    160                      LED_bufferG.COM[j][LED_byte_Length-1] &= 0xFE;
   \                     ??scroll_leftX_9:
   \   000000D4   0A20               MOVS     R0,#+10
   \   000000D6   ........           LDR.W    R1,??DataTable165  ;; LED_bufferG
   \   000000DA   06FB0010           MLA      R0,R6,R0,R1
   \   000000DE   407A               LDRB     R0,[R0, #+9]
   \   000000E0   10F0FE00           ANDS     R0,R0,#0xFE
   \   000000E4   0A21               MOVS     R1,#+10
   \   000000E6   ........           LDR.W    R2,??DataTable165  ;; LED_bufferG
   \   000000EA   06FB0121           MLA      R1,R6,R1,R2
   \   000000EE   4872               STRB     R0,[R1, #+9]
    161                  }          
   \                     ??scroll_leftX_10:
   \   000000F0   761C               ADDS     R6,R6,#+1
   \   000000F2   A5E7               B.N      ??scroll_leftX_6
    162              }
   \                     ??scroll_leftX_5:
   \   000000F4   7F1C               ADDS     R7,R7,#+1
   \   000000F6   95E7               B.N      ??scroll_leftX_3
    163              for(k=0;k<SpdCn[dly];k++){
   \                     ??scroll_leftX_4:
   \   000000F8   0020               MOVS     R0,#+0
   \   000000FA   0700               MOVS     R7,R0
   \                     ??scroll_leftX_11:
   \   000000FC   0D48               LDR.N    R0,??scroll_leftX_0+0x8  ;; SpdCn
   \   000000FE   18F80000           LDRB     R0,[R8, R0]
   \   00000102   8742               CMP      R7,R0
   \   00000104   0ADA               BGE.N    ??scroll_leftX_12
    164                LED_change = 1 ;
   \   00000106   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   0000010A   0121               MOVS     R1,#+1
   \   0000010C   0170               STRB     R1,[R0, #+0]
    165                while( LED_change != 0 );
   \                     ??scroll_leftX_13:
   \   0000010E   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   00000112   0078               LDRB     R0,[R0, #+0]
   \   00000114   0028               CMP      R0,#+0
   \   00000116   FAD1               BNE.N    ??scroll_leftX_13
    166              }    
   \   00000118   7F1C               ADDS     R7,R7,#+1
   \   0000011A   EFE7               B.N      ??scroll_leftX_11
    167            }
   \                     ??scroll_leftX_12:
   \   0000011C   0348               LDR.N    R0,??scroll_leftX_0  ;; LedDly
   \   0000011E   0068               LDR      R0,[R0, #+0]
   \   00000120   0349               LDR.N    R1,??scroll_leftX_0+0x4  ;; SpdTm
   \   00000122   405C               LDRB     R0,[R0, R1]
   \   00000124   4519               ADDS     R5,R0,R5
   \   00000126   73E7               B.N      ??scroll_leftX_1
   \                     ??scroll_leftX_2:
   \   00000128   BDE8F081           POP      {R4-R8,PC}       ;; return
   \                     ??scroll_leftX_0:
   \   0000012C   ........           DC32     LedDly
   \   00000130   ........           DC32     SpdTm
   \   00000134   ........           DC32     SpdCn
    168          }
    169          
    170          
    171          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    172          void scroll_left_Out(void) //向左移出
    173          {
   \                     scroll_left_Out:
   \   00000000   10B5               PUSH     {R4,LR}
    174            int i;
    175            memset(Backup.COM,'\0',sizeof(LED_buffer.COM));
   \   00000002   A022               MOVS     R2,#+160
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   ........           LDR.W    R0,??DataTable154  ;; Backup
   \   0000000A   ........           BL       memset
    176            for( i = 0 ; i < LED_bit_Length ; i ++ ){
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   0400               MOVS     R4,R0
   \                     ??scroll_left_Out_0:
   \   00000012   502C               CMP      R4,#+80
   \   00000014   11DA               BGE.N    ??scroll_left_Out_1
    177              while( LED_change == 1 );
   \                     ??scroll_left_Out_2:
   \   00000016   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   0000001A   0078               LDRB     R0,[R0, #+0]
   \   0000001C   0128               CMP      R0,#+1
   \   0000001E   FAD0               BEQ.N    ??scroll_left_Out_2
    178              if (RecProcessing != 0 ) return ;
   \   00000020   ........           LDR.W    R0,??DataTable168  ;; RecProcessing
   \   00000024   0078               LDRB     R0,[R0, #+0]
   \   00000026   0028               CMP      R0,#+0
   \   00000028   07D1               BNE.N    ??scroll_left_Out_1
    179              Shift_data_left();  // do data shift left with assembler
   \   0000002A   ........           BL       Shift_data_left
    180              LED_change = 1 ;
   \   0000002E   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   00000032   0121               MOVS     R1,#+1
   \   00000034   0170               STRB     R1,[R0, #+0]
    181            }
   \   00000036   641C               ADDS     R4,R4,#+1
   \   00000038   EBE7               B.N      ??scroll_left_Out_0
   \                     ??scroll_left_Out_1:
   \   0000003A   10BD               POP      {R4,PC}          ;; return
    182          }
    183          
    184          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    185          void scroll_right(void) //向右移入
    186          {
   \                     scroll_right:
   \   00000000   10B5               PUSH     {R4,LR}
    187            int j;
    188            for( j = 0 ; j < LED_bit_Length ; j ++ ){
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0400               MOVS     R4,R0
   \                     ??scroll_right_0:
   \   00000006   502C               CMP      R4,#+80
   \   00000008   11DA               BGE.N    ??scroll_right_1
    189              while( LED_change == 1 ); 
   \                     ??scroll_right_2:
   \   0000000A   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   0000000E   0078               LDRB     R0,[R0, #+0]
   \   00000010   0128               CMP      R0,#+1
   \   00000012   FAD0               BEQ.N    ??scroll_right_2
    190              if (RecProcessing != 0 ) return ;
   \   00000014   ........           LDR.W    R0,??DataTable168  ;; RecProcessing
   \   00000018   0078               LDRB     R0,[R0, #+0]
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   07D1               BNE.N    ??scroll_right_1
    191              Shift_data_right();  // do data shift right with assembler  
   \   0000001E   ........           BL       Shift_data_right
    192              LED_change = 1 ;    
   \   00000022   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   00000026   0121               MOVS     R1,#+1
   \   00000028   0170               STRB     R1,[R0, #+0]
    193            }
   \   0000002A   641C               ADDS     R4,R4,#+1
   \   0000002C   EBE7               B.N      ??scroll_right_0
   \                     ??scroll_right_1:
   \   0000002E   10BD               POP      {R4,PC}          ;; return
    194          }
    195          
    196          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    197          void scroll_right_Out(void) //向右移出
    198          {
   \                     scroll_right_Out:
   \   00000000   10B5               PUSH     {R4,LR}
    199            int i;
    200            memset(Backup.COM,'\0',sizeof(LED_buffer.COM));
   \   00000002   A022               MOVS     R2,#+160
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   ........           LDR.W    R0,??DataTable154  ;; Backup
   \   0000000A   ........           BL       memset
    201            for( i = 0 ; i < LED_bit_Length ; i ++ ){
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   0400               MOVS     R4,R0
   \                     ??scroll_right_Out_0:
   \   00000012   502C               CMP      R4,#+80
   \   00000014   11DA               BGE.N    ??scroll_right_Out_1
    202              while( LED_change == 1 );
   \                     ??scroll_right_Out_2:
   \   00000016   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   0000001A   0078               LDRB     R0,[R0, #+0]
   \   0000001C   0128               CMP      R0,#+1
   \   0000001E   FAD0               BEQ.N    ??scroll_right_Out_2
    203              if (RecProcessing != 0 ) return ;
   \   00000020   ........           LDR.W    R0,??DataTable168  ;; RecProcessing
   \   00000024   0078               LDRB     R0,[R0, #+0]
   \   00000026   0028               CMP      R0,#+0
   \   00000028   07D1               BNE.N    ??scroll_right_Out_1
    204              Shift_data_right();  // do data shift right with assembler 
   \   0000002A   ........           BL       Shift_data_right
    205              LED_change = 1 ;    
   \   0000002E   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   00000032   0121               MOVS     R1,#+1
   \   00000034   0170               STRB     R1,[R0, #+0]
    206            }
   \   00000036   641C               ADDS     R4,R4,#+1
   \   00000038   EBE7               B.N      ??scroll_right_Out_0
   \                     ??scroll_right_Out_1:
   \   0000003A   10BD               POP      {R4,PC}          ;; return
    207          }
    208          
    209          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    210          static void shift_up(unsigned char buf[16][LED_byte_Length],unsigned char ud[LED_byte_Length])
    211          {
   \                     shift_up:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0C00               MOVS     R4,R1
    212            Dest_Adr=buf[0];
   \   00000006   ........           LDR.W    R0,??DataTable157  ;; Dest_Adr
   \   0000000A   0560               STR      R5,[R0, #+0]
    213            Sour_Adr=buf[1];
   \   0000000C   15F10A00           ADDS     R0,R5,#+10
   \   00000010   ........           LDR.W    R1,??DataTable160  ;; Sour_Adr
   \   00000014   0860               STR      R0,[R1, #+0]
    214            Data_Len=LED_byte_Length*15;
   \   00000016   ........           LDR.W    R0,??DataTable161  ;; Data_Len
   \   0000001A   9621               MOVS     R1,#+150
   \   0000001C   0160               STR      R1,[R0, #+0]
    215            data_copyF(); 
   \   0000001E   ........           BL       data_copyF
    216            Dest_Adr=buf[15];
   \   00000022   15F19600           ADDS     R0,R5,#+150
   \   00000026   ........           LDR.W    R1,??DataTable157  ;; Dest_Adr
   \   0000002A   0860               STR      R0,[R1, #+0]
    217            Sour_Adr=ud;
   \   0000002C   ........           LDR.W    R0,??DataTable160  ;; Sour_Adr
   \   00000030   0460               STR      R4,[R0, #+0]
    218            Data_Len=LED_byte_Length;
   \   00000032   ........           LDR.W    R0,??DataTable161  ;; Data_Len
   \   00000036   0A21               MOVS     R1,#+10
   \   00000038   0160               STR      R1,[R0, #+0]
    219            data_copyF();
   \   0000003A   ........           BL       data_copyF
    220          }
   \   0000003E   31BD               POP      {R0,R4,R5,PC}    ;; return
    221          
    222          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    223          static void shift_down(unsigned char buf[16][LED_byte_Length],unsigned char ud[LED_byte_Length])
    224          {
   \                     shift_down:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0C00               MOVS     R4,R1
    225            Dest_Adr=&buf[15][LED_byte_Length-1];
   \   00000006   15F19F00           ADDS     R0,R5,#+159
   \   0000000A   ........           LDR.W    R1,??DataTable157  ;; Dest_Adr
   \   0000000E   0860               STR      R0,[R1, #+0]
    226            Sour_Adr=&buf[14][LED_byte_Length-1];
   \   00000010   15F19500           ADDS     R0,R5,#+149
   \   00000014   ........           LDR.W    R1,??DataTable160  ;; Sour_Adr
   \   00000018   0860               STR      R0,[R1, #+0]
    227            Data_Len=LED_byte_Length*15;
   \   0000001A   ........           LDR.W    R0,??DataTable161  ;; Data_Len
   \   0000001E   9621               MOVS     R1,#+150
   \   00000020   0160               STR      R1,[R0, #+0]
    228            data_copyB(); 
   \   00000022   ........           BL       data_copyB
    229            Dest_Adr=buf[0];
   \   00000026   ........           LDR.W    R0,??DataTable157  ;; Dest_Adr
   \   0000002A   0560               STR      R5,[R0, #+0]
    230            Sour_Adr=ud;
   \   0000002C   ........           LDR.W    R0,??DataTable160  ;; Sour_Adr
   \   00000030   0460               STR      R4,[R0, #+0]
    231            Data_Len=LED_byte_Length;
   \   00000032   ........           LDR.W    R0,??DataTable161  ;; Data_Len
   \   00000036   0A21               MOVS     R1,#+10
   \   00000038   0160               STR      R1,[R0, #+0]
    232            data_copyF(); 
   \   0000003A   ........           BL       data_copyF
    233          }
   \   0000003E   31BD               POP      {R0,R4,R5,PC}    ;; return
    234          
    235          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    236          static unsigned short Get_ImgBits(unsigned char buf[16][LED_byte_Length],int V_Lines,int H_Bits,int TotalBits)
    237          {
   \                     Get_ImgBits:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   8446               MOV      R12,R0
    238            unsigned short value,mask=0x0FFFF;
   \   00000004   4FF6FF76           MOVW     R6,#+65535
   \   00000008   3500               MOVS     R5,R6
    239            unsigned char H_Addr,Mod_Bits;
    240            H_Addr   = H_Bits / 8;
   \   0000000A   0826               MOVS     R6,#+8
   \   0000000C   92FBF6F6           SDIV     R6,R2,R6
   \   00000010   B646               MOV      LR,R6
    241            Mod_Bits = H_Bits % 8;
   \   00000012   0826               MOVS     R6,#+8
   \   00000014   92FBF6F7           SDIV     R7,R2,R6
   \   00000018   07FB1627           MLS      R7,R7,R6,R2
   \   0000001C   3C00               MOVS     R4,R7
    242            value =(buf[V_Lines][H_Addr]<<8)+(buf[V_Lines][H_Addr+1]);
   \   0000001E   5FFA8EFE           UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   00000022   0A26               MOVS     R6,#+10
   \   00000024   01FB06C6           MLA      R6,R1,R6,R12
   \   00000028   1EF80660           LDRB     R6,[LR, R6]
   \   0000002C   5FFA8EFE           UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   00000030   0A27               MOVS     R7,#+10
   \   00000032   01FB07C7           MLA      R7,R1,R7,R12
   \   00000036   1EEB0707           ADDS     R7,LR,R7
   \   0000003A   7F78               LDRB     R7,[R7, #+1]
   \   0000003C   17EB0626           ADDS     R6,R7,R6, LSL #+8
   \   00000040   3000               MOVS     R0,R6
    243            value <<= ( Mod_Bits );
   \   00000042   A040               LSLS     R0,R0,R4
    244            value= value | ( buf[V_Lines][H_Addr+2] >> (8-Mod_Bits));
   \   00000044   5FFA8EFE           UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   00000048   0A26               MOVS     R6,#+10
   \   0000004A   01FB06C6           MLA      R6,R1,R6,R12
   \   0000004E   1EEB0606           ADDS     R6,LR,R6
   \   00000052   B678               LDRB     R6,[R6, #+2]
   \   00000054   D4F10807           RSBS     R7,R4,#+8
   \   00000058   3E41               ASRS     R6,R6,R7
   \   0000005A   3043               ORRS     R0,R6,R0
    245            mask <<= (16 - TotalBits);
   \   0000005C   1E00               MOVS     R6,R3
   \   0000005E   D6F11006           RSBS     R6,R6,#+16
   \   00000062   B540               LSLS     R5,R5,R6
    246            return (value & mask);
   \   00000064   2840               ANDS     R0,R5,R0
   \   00000066   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000068   F2BD               POP      {R1,R4-R7,PC}    ;; return
    247          }
    248          
    249          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    250          static void Put_ImgBits(unsigned char buf[16][LED_byte_Length],int V_Lines,int H_Bits,unsigned short value,int TotalBits)
    251          {
   \                     Put_ImgBits:
   \   00000000   2DE9F047           PUSH     {R4-R10,LR}
   \   00000004   DDF820E0           LDR      LR,[SP, #+32]
    252            unsigned long mask,ArrayLong,ValLong,nmask;
    253            unsigned char H_Addr,Mod_Bits;
    254          //  unsigned short NeedSft=0;
    255            if ( (H_Bits+TotalBits) > LED_bit_Length )
   \   00000008   1EEB020C           ADDS     R12,LR,R2
   \   0000000C   BCF1510F           CMP      R12,#+81
   \   00000010   02DB               BLT.N    ??Put_ImgBits_0
    256              TotalBits=LED_bit_Length-H_Bits;
   \   00000012   D2F1500C           RSBS     R12,R2,#+80
   \   00000016   E646               MOV      LR,R12
    257            if (H_Bits < 0 ){
   \                     ??Put_ImgBits_0:
   \   00000018   002A               CMP      R2,#+0
   \   0000001A   09D5               BPL.N    ??Put_ImgBits_1
    258              H_Bits=-H_Bits;
   \   0000001C   9446               MOV      R12,R2
   \   0000001E   DCF10002           RSBS     R2,R12,#+0
    259              value <<= H_Bits;
   \   00000022   9340               LSLS     R3,R3,R2
    260              TotalBits=16-H_Bits;
   \   00000024   D2F1100C           RSBS     R12,R2,#+16
   \   00000028   E646               MOV      LR,R12
    261              H_Bits=0;
   \   0000002A   5FF0000C           MOVS     R12,#+0
   \   0000002E   6246               MOV      R2,R12
    262            }
    263            H_Addr  = H_Bits/8;
   \                     ??Put_ImgBits_1:
   \   00000030   5FF0080C           MOVS     R12,#+8
   \   00000034   92FBFCFC           SDIV     R12,R2,R12
   \   00000038   E046               MOV      R8,R12
    264            Mod_Bits= H_Bits % 8;
   \   0000003A   5FF0080C           MOVS     R12,#+8
   \   0000003E   92FBFCFA           SDIV     R10,R2,R12
   \   00000042   0AFB1C2A           MLS      R10,R10,R12,R2
   \   00000046   D146               MOV      R9,R10
    265            mask= ~(0xFFFFFFFF >> TotalBits);
   \   00000048   5FF0FF3C           MOVS     R12,#-1
   \   0000004C   3CFA0EFC           LSRS     R12,R12,LR
   \   00000050   7FEA0C0C           MVNS     R12,R12
   \   00000054   6446               MOV      R4,R12
    266            mask >>= Mod_Bits;
   \   00000056   34FA09F4           LSRS     R4,R4,R9
    267            nmask=~mask;
   \   0000005A   7FEA040C           MVNS     R12,R4
   \   0000005E   6746               MOV      R7,R12
    268            ArrayLong = buf[V_Lines][H_Addr];
   \   00000060   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000064   5FF00A0C           MOVS     R12,#+10
   \   00000068   01FB0C0C           MLA      R12,R1,R12,R0
   \   0000006C   18F80CC0           LDRB     R12,[R8, R12]
   \   00000070   6546               MOV      R5,R12
    269            ArrayLong = (ArrayLong << 8) | buf[V_Lines][H_Addr+1];
   \   00000072   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000076   5FF00A0C           MOVS     R12,#+10
   \   0000007A   01FB0C0C           MLA      R12,R1,R12,R0
   \   0000007E   18EB0C0C           ADDS     R12,R8,R12
   \   00000082   9CF801C0           LDRB     R12,[R12, #+1]
   \   00000086   5CEA0525           ORRS     R5,R12,R5, LSL #+8
    270            ArrayLong = (ArrayLong << 8) | buf[V_Lines][H_Addr+2];
   \   0000008A   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000008E   5FF00A0C           MOVS     R12,#+10
   \   00000092   01FB0C0C           MLA      R12,R1,R12,R0
   \   00000096   18EB0C0C           ADDS     R12,R8,R12
   \   0000009A   9CF802C0           LDRB     R12,[R12, #+2]
   \   0000009E   5CEA0525           ORRS     R5,R12,R5, LSL #+8
    271            ArrayLong = (ArrayLong << 8) ;
   \   000000A2   2D02               LSLS     R5,R5,#+8
    272            ArrayLong &= nmask;
   \   000000A4   3D40               ANDS     R5,R7,R5
    273            ValLong = value;
   \   000000A6   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000A8   1E00               MOVS     R6,R3
    274            ValLong = ValLong << (16-Mod_Bits);
   \   000000AA   D9F1100C           RSBS     R12,R9,#+16
   \   000000AE   16FA0CF6           LSLS     R6,R6,R12
    275            ValLong &= mask;
   \   000000B2   2640               ANDS     R6,R4,R6
    276            ArrayLong |= ValLong;
   \   000000B4   3543               ORRS     R5,R6,R5
    277            buf[V_Lines][H_Addr]=ArrayLong >> 24;
   \   000000B6   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000BA   5FF00A0C           MOVS     R12,#+10
   \   000000BE   01FB0C0C           MLA      R12,R1,R12,R0
   \   000000C2   5FEA156A           LSRS     R10,R5,#+24
   \   000000C6   08F80CA0           STRB     R10,[R8, R12]
    278            buf[V_Lines][H_Addr+1]=(ArrayLong & 0xFFFFFF) >> 16;
   \   000000CA   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000CE   5FF00A0C           MOVS     R12,#+10
   \   000000D2   01FB0C0C           MLA      R12,R1,R12,R0
   \   000000D6   18EB0C0C           ADDS     R12,R8,R12
   \   000000DA   5FEA154A           LSRS     R10,R5,#+16
   \   000000DE   8CF801A0           STRB     R10,[R12, #+1]
    279            buf[V_Lines][H_Addr+2]=(ArrayLong & 0xFFFF) >> 8;
   \   000000E2   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000E6   5FF00A0C           MOVS     R12,#+10
   \   000000EA   01FB0C0C           MLA      R12,R1,R12,R0
   \   000000EE   18EB0C0C           ADDS     R12,R8,R12
   \   000000F2   5FEA152A           LSRS     R10,R5,#+8
   \   000000F6   8CF802A0           STRB     R10,[R12, #+2]
    280          }
   \   000000FA   BDE8F087           POP      {R4-R10,PC}      ;; return
    281          
    282          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    283          void scroll_up(void) //向上捲入
    284          {
   \                     scroll_up:
   \   00000000   10B5               PUSH     {R4,LR}
    285            unsigned char i;
    286            for(i=0;i<16;i++){
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0400               MOVS     R4,R0
   \                     ??scroll_up_0:
   \   00000006   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   102C               CMP      R4,#+16
   \   0000000A   43D2               BCS.N    ??scroll_up_1
    287              while( LED_change == 1 );
   \                     ??scroll_up_2:
   \   0000000C   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   00000010   0078               LDRB     R0,[R0, #+0]
   \   00000012   0128               CMP      R0,#+1
   \   00000014   FAD0               BEQ.N    ??scroll_up_2
    288              if (RecProcessing != 0 ) return ;     
   \   00000016   ........           LDR.W    R0,??DataTable168  ;; RecProcessing
   \   0000001A   0078               LDRB     R0,[R0, #+0]
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   39D1               BNE.N    ??scroll_up_1
    289              Dest_Adr=udf;
   \   00000020   ........           LDR.W    R0,??DataTable157  ;; Dest_Adr
   \   00000024   ........           LDR.W    R1,??DataTable162  ;; udf
   \   00000028   0160               STR      R1,[R0, #+0]
    290              Sour_Adr=Backup.COM[i];
   \   0000002A   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   0A20               MOVS     R0,#+10
   \   0000002E   ........           LDR.W    R1,??DataTable154  ;; Backup
   \   00000032   04FB0010           MLA      R0,R4,R0,R1
   \   00000036   ........           LDR.W    R1,??DataTable160  ;; Sour_Adr
   \   0000003A   0860               STR      R0,[R1, #+0]
    291              Data_Len=LED_byte_Length;
   \   0000003C   ........           LDR.W    R0,??DataTable161  ;; Data_Len
   \   00000040   0A21               MOVS     R1,#+10
   \   00000042   0160               STR      R1,[R0, #+0]
    292              data_copyF();
   \   00000044   ........           BL       data_copyF
    293                  
    294              Dest_Adr=udfG;
   \   00000048   ........           LDR.W    R0,??DataTable157  ;; Dest_Adr
   \   0000004C   ........           LDR.W    R1,??DataTable164  ;; udfG
   \   00000050   0160               STR      R1,[R0, #+0]
    295              Sour_Adr=BackupG.COM[i];
   \   00000052   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0A20               MOVS     R0,#+10
   \   00000056   ........           LDR.W    R1,??DataTable159  ;; BackupG
   \   0000005A   04FB0010           MLA      R0,R4,R0,R1
   \   0000005E   ........           LDR.W    R1,??DataTable160  ;; Sour_Adr
   \   00000062   0860               STR      R0,[R1, #+0]
    296              Data_Len=LED_byte_Length;
   \   00000064   ........           LDR.W    R0,??DataTable161  ;; Data_Len
   \   00000068   0A21               MOVS     R1,#+10
   \   0000006A   0160               STR      R1,[R0, #+0]
    297              data_copyF();  
   \   0000006C   ........           BL       data_copyF
    298                   
    299              shift_up(LED_buffer.COM,udf);    
   \   00000070   ........           LDR.W    R1,??DataTable162  ;; udf
   \   00000074   ........           LDR.W    R0,??DataTable163  ;; LED_buffer
   \   00000078   ........           BL       shift_up
    300              shift_up(LED_bufferG.COM,udfG);  
   \   0000007C   ........           LDR.W    R1,??DataTable164  ;; udfG
   \   00000080   ........           LDR.W    R0,??DataTable165  ;; LED_bufferG
   \   00000084   ........           BL       shift_up
    301              // Use 1 mS from RTS_output = 0 to RTS_output = 1       
    302              LED_change = 1 ;  
   \   00000088   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   0000008C   0121               MOVS     R1,#+1
   \   0000008E   0170               STRB     R1,[R0, #+0]
    303            }
   \   00000090   641C               ADDS     R4,R4,#+1
   \   00000092   B8E7               B.N      ??scroll_up_0
   \                     ??scroll_up_1:
   \   00000094   10BD               POP      {R4,PC}          ;; return
    304          }
    305          
    306          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    307          void scroll_up_Out(void) //向上捲出
    308          {
   \                     scroll_up_Out:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    309            unsigned char i,j;
    310            for(i=0;i<16;i++){
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0400               MOVS     R4,R0
   \                     ??scroll_up_Out_0:
   \   00000006   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   102C               CMP      R4,#+16
   \   0000000A   2CD2               BCS.N    ??scroll_up_Out_1
    311              while( LED_change == 1 ); 
   \                     ??scroll_up_Out_2:
   \   0000000C   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   00000010   0078               LDRB     R0,[R0, #+0]
   \   00000012   0128               CMP      R0,#+1
   \   00000014   FAD0               BEQ.N    ??scroll_up_Out_2
    312              if (RecProcessing != 0 ) return ;         
   \   00000016   ........           LDR.W    R0,??DataTable168  ;; RecProcessing
   \   0000001A   0078               LDRB     R0,[R0, #+0]
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   22D1               BNE.N    ??scroll_up_Out_1
    313              for(j=0;j< LED_byte_Length;j++){    
   \   00000020   0020               MOVS     R0,#+0
   \   00000022   0500               MOVS     R5,R0
   \                     ??scroll_up_Out_3:
   \   00000024   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0A2D               CMP      R5,#+10
   \   00000028   0BD2               BCS.N    ??scroll_up_Out_4
    314                udf[j]='\0';  
   \   0000002A   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   ........           LDR.W    R0,??DataTable162  ;; udf
   \   00000030   0021               MOVS     R1,#+0
   \   00000032   2954               STRB     R1,[R5, R0]
    315                udfG[j]='\0';
   \   00000034   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   ........           LDR.W    R0,??DataTable164  ;; udfG
   \   0000003A   0021               MOVS     R1,#+0
   \   0000003C   2954               STRB     R1,[R5, R0]
    316              }     
   \   0000003E   6D1C               ADDS     R5,R5,#+1
   \   00000040   F0E7               B.N      ??scroll_up_Out_3
    317              shift_up(LED_buffer.COM,udf);
   \                     ??scroll_up_Out_4:
   \   00000042   ........           LDR.W    R1,??DataTable162  ;; udf
   \   00000046   ........           LDR.W    R0,??DataTable163  ;; LED_buffer
   \   0000004A   ........           BL       shift_up
    318              shift_up(LED_bufferG.COM,udfG);
   \   0000004E   ........           LDR.W    R1,??DataTable164  ;; udfG
   \   00000052   ........           LDR.W    R0,??DataTable165  ;; LED_bufferG
   \   00000056   ........           BL       shift_up
    319              // Use 1.26 mS from RTS_output = 0 to RTS_output = 1       
    320              LED_change = 1 ;  
   \   0000005A   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   0000005E   0121               MOVS     R1,#+1
   \   00000060   0170               STRB     R1,[R0, #+0]
    321            }
   \   00000062   641C               ADDS     R4,R4,#+1
   \   00000064   CFE7               B.N      ??scroll_up_Out_0
   \                     ??scroll_up_Out_1:
   \   00000066   31BD               POP      {R0,R4,R5,PC}    ;; return
    322          }
    323          
    324          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    325          void scroll_down(void) //向下捲入
    326          {
   \                     scroll_down:
   \   00000000   10B5               PUSH     {R4,LR}
    327            int i;
    328            for(i=0;i<16;i++){
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0400               MOVS     R4,R0
   \                     ??scroll_down_0:
   \   00000006   102C               CMP      R4,#+16
   \   00000008   45DA               BGE.N    ??scroll_down_1
    329              while( LED_change == 1 ) ;
   \                     ??scroll_down_2:
   \   0000000A   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   0000000E   0078               LDRB     R0,[R0, #+0]
   \   00000010   0128               CMP      R0,#+1
   \   00000012   FAD0               BEQ.N    ??scroll_down_2
    330              if (RecProcessing != 0 ) return ;
   \   00000014   ........           LDR.W    R0,??DataTable168  ;; RecProcessing
   \   00000018   0078               LDRB     R0,[R0, #+0]
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   3BD1               BNE.N    ??scroll_down_1
    331              Dest_Adr=udf;
   \   0000001E   ........           LDR.W    R0,??DataTable157  ;; Dest_Adr
   \   00000022   ........           LDR.W    R1,??DataTable162  ;; udf
   \   00000026   0160               STR      R1,[R0, #+0]
    332              Sour_Adr=Backup.COM[15-i];
   \   00000028   6042               RSBS     R0,R4,#+0
   \   0000002A   0A21               MOVS     R1,#+10
   \   0000002C   ........           LDR.W    R2,??DataTable154  ;; Backup
   \   00000030   00FB0120           MLA      R0,R0,R1,R2
   \   00000034   9630               ADDS     R0,R0,#+150
   \   00000036   ........           LDR.W    R1,??DataTable160  ;; Sour_Adr
   \   0000003A   0860               STR      R0,[R1, #+0]
    333              Data_Len=LED_byte_Length;
   \   0000003C   ........           LDR.W    R0,??DataTable161  ;; Data_Len
   \   00000040   0A21               MOVS     R1,#+10
   \   00000042   0160               STR      R1,[R0, #+0]
    334              data_copyF();
   \   00000044   ........           BL       data_copyF
    335              
    336              Dest_Adr=udfG;
   \   00000048   ........           LDR.W    R0,??DataTable157  ;; Dest_Adr
   \   0000004C   ........           LDR.W    R1,??DataTable164  ;; udfG
   \   00000050   0160               STR      R1,[R0, #+0]
    337              Sour_Adr=BackupG.COM[15-i];
   \   00000052   6042               RSBS     R0,R4,#+0
   \   00000054   0A21               MOVS     R1,#+10
   \   00000056   ........           LDR.W    R2,??DataTable159  ;; BackupG
   \   0000005A   00FB0120           MLA      R0,R0,R1,R2
   \   0000005E   9630               ADDS     R0,R0,#+150
   \   00000060   ........           LDR.W    R1,??DataTable160  ;; Sour_Adr
   \   00000064   0860               STR      R0,[R1, #+0]
    338              Data_Len=LED_byte_Length;
   \   00000066   ........           LDR.W    R0,??DataTable161  ;; Data_Len
   \   0000006A   0A21               MOVS     R1,#+10
   \   0000006C   0160               STR      R1,[R0, #+0]
    339              data_copyF();  
   \   0000006E   ........           BL       data_copyF
    340                              
    341              shift_down(LED_buffer.COM,udf);
   \   00000072   ........           LDR.W    R1,??DataTable162  ;; udf
   \   00000076   ........           LDR.W    R0,??DataTable163  ;; LED_buffer
   \   0000007A   ........           BL       shift_down
    342              shift_down(LED_bufferG.COM,udfG); 
   \   0000007E   ........           LDR.W    R1,??DataTable164  ;; udfG
   \   00000082   ........           LDR.W    R0,??DataTable165  ;; LED_bufferG
   \   00000086   ........           BL       shift_down
    343              // Use 1.0 mS from RTS_output = 0 to RTS_output = 1       
    344              LED_change = 1 ;      
   \   0000008A   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   0000008E   0121               MOVS     R1,#+1
   \   00000090   0170               STRB     R1,[R0, #+0]
    345            }
   \   00000092   641C               ADDS     R4,R4,#+1
   \   00000094   B7E7               B.N      ??scroll_down_0
   \                     ??scroll_down_1:
   \   00000096   10BD               POP      {R4,PC}          ;; return
    346          }
    347          
    348          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    349          void scroll_down_Out(void) //向下捲出
    350          {
   \                     scroll_down_Out:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    351            unsigned char i,j;
    352            for(i=0;i<16;i++){
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0400               MOVS     R4,R0
   \                     ??scroll_down_Out_0:
   \   00000006   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   102C               CMP      R4,#+16
   \   0000000A   2CD2               BCS.N    ??scroll_down_Out_1
    353              while( LED_change == 1 );
   \                     ??scroll_down_Out_2:
   \   0000000C   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   00000010   0078               LDRB     R0,[R0, #+0]
   \   00000012   0128               CMP      R0,#+1
   \   00000014   FAD0               BEQ.N    ??scroll_down_Out_2
    354              if (RecProcessing != 0 ) return ;        
   \   00000016   ........           LDR.W    R0,??DataTable168  ;; RecProcessing
   \   0000001A   0078               LDRB     R0,[R0, #+0]
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   22D1               BNE.N    ??scroll_down_Out_1
    355              for(j=0;j< LED_byte_Length;j++){
   \   00000020   0020               MOVS     R0,#+0
   \   00000022   0500               MOVS     R5,R0
   \                     ??scroll_down_Out_3:
   \   00000024   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0A2D               CMP      R5,#+10
   \   00000028   0BD2               BCS.N    ??scroll_down_Out_4
    356                udf[j]='\0'; 
   \   0000002A   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   ........           LDR.W    R0,??DataTable162  ;; udf
   \   00000030   0021               MOVS     R1,#+0
   \   00000032   2954               STRB     R1,[R5, R0]
    357                udfG[j]='\0';   
   \   00000034   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   ........           LDR.W    R0,??DataTable164  ;; udfG
   \   0000003A   0021               MOVS     R1,#+0
   \   0000003C   2954               STRB     R1,[R5, R0]
    358              }  
   \   0000003E   6D1C               ADDS     R5,R5,#+1
   \   00000040   F0E7               B.N      ??scroll_down_Out_3
    359              shift_down(LED_buffer.COM,udf);
   \                     ??scroll_down_Out_4:
   \   00000042   ........           LDR.W    R1,??DataTable162  ;; udf
   \   00000046   ........           LDR.W    R0,??DataTable163  ;; LED_buffer
   \   0000004A   ........           BL       shift_down
    360              shift_down(LED_bufferG.COM,udfG);
   \   0000004E   ........           LDR.W    R1,??DataTable164  ;; udfG
   \   00000052   ........           LDR.W    R0,??DataTable165  ;; LED_bufferG
   \   00000056   ........           BL       shift_down
    361              // Use 1.38 mS from RTS_output = 0 to RTS_output = 1    
    362              LED_change = 1 ;      
   \   0000005A   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   0000005E   0121               MOVS     R1,#+1
   \   00000060   0170               STRB     R1,[R0, #+0]
    363            }
   \   00000062   641C               ADDS     R4,R4,#+1
   \   00000064   CFE7               B.N      ??scroll_down_Out_0
   \                     ??scroll_down_Out_1:
   \   00000066   31BD               POP      {R0,R4,R5,PC}    ;; return
    364          }
    365          
    366          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    367          void animate(void) //動畫帶入
    368          {
   \                     animate:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
    369            int i,j,index=0;
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0600               MOVS     R6,R0
    370            unsigned short value;
    371            for(i=-16;i<LED_bit_Length;i++,index = abs((i/2) % 4)){
   \   00000006   7FF00F00           MVNS     R0,#+15
   \   0000000A   0400               MOVS     R4,R0
   \                     ??animate_0:
   \   0000000C   502C               CMP      R4,#+80
   \   0000000E   80F2A180           BGE.W    ??animate_1
    372              for(j=0;j<16;j++){
   \   00000012   0020               MOVS     R0,#+0
   \   00000014   0500               MOVS     R5,R0
   \                     ??animate_2:
   \   00000016   102D               CMP      R5,#+16
   \   00000018   36DA               BGE.N    ??animate_3
    373                value=(animate_img[index][j][0] << 8) | animate_img[index][j][1];
   \   0000001A   ....               LDR.N    R0,??DataTable109  ;; animate_img
   \   0000001C   10EB4610           ADDS     R0,R0,R6, LSL #+5
   \   00000020   10F81500           LDRB     R0,[R0, R5, LSL #+1]
   \   00000024   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   ....               LDR.N    R1,??DataTable109  ;; animate_img
   \   00000028   11EB4611           ADDS     R1,R1,R6, LSL #+5
   \   0000002C   11EB4501           ADDS     R1,R1,R5, LSL #+1
   \   00000030   4978               LDRB     R1,[R1, #+1]
   \   00000032   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   00000036   0700               MOVS     R7,R0
    374                if ( color_flag == 1 || color_flag == 3 )
   \   00000038   ....               LDR.N    R0,??DataTable114  ;; color_flag
   \   0000003A   0078               LDRB     R0,[R0, #+0]
   \   0000003C   0128               CMP      R0,#+1
   \   0000003E   03D0               BEQ.N    ??animate_4
   \   00000040   ....               LDR.N    R0,??DataTable114  ;; color_flag
   \   00000042   0078               LDRB     R0,[R0, #+0]
   \   00000044   0328               CMP      R0,#+3
   \   00000046   0AD1               BNE.N    ??animate_5
    375                  Put_ImgBits(LED_buffer.COM,j,i,value,16);
   \                     ??animate_4:
   \   00000048   1020               MOVS     R0,#+16
   \   0000004A   01B5               PUSH     {R0,LR}
   \   0000004C   3B00               MOVS     R3,R7
   \   0000004E   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000050   2200               MOVS     R2,R4
   \   00000052   2900               MOVS     R1,R5
   \   00000054   ........           LDR.W    R0,??DataTable163  ;; LED_buffer
   \   00000058   ........           BL       Put_ImgBits
   \   0000005C   02B0               ADD      SP,SP,#+8
    376                if ( color_flag == 2 || color_flag == 3 )
   \                     ??animate_5:
   \   0000005E   ....               LDR.N    R0,??DataTable114  ;; color_flag
   \   00000060   0078               LDRB     R0,[R0, #+0]
   \   00000062   0228               CMP      R0,#+2
   \   00000064   03D0               BEQ.N    ??animate_6
   \   00000066   ....               LDR.N    R0,??DataTable114  ;; color_flag
   \   00000068   0078               LDRB     R0,[R0, #+0]
   \   0000006A   0328               CMP      R0,#+3
   \   0000006C   0AD1               BNE.N    ??animate_7
    377                  Put_ImgBits(LED_bufferG.COM,j,i,value,16);
   \                     ??animate_6:
   \   0000006E   1020               MOVS     R0,#+16
   \   00000070   01B5               PUSH     {R0,LR}
   \   00000072   3B00               MOVS     R3,R7
   \   00000074   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000076   2200               MOVS     R2,R4
   \   00000078   2900               MOVS     R1,R5
   \   0000007A   ........           LDR.W    R0,??DataTable165  ;; LED_bufferG
   \   0000007E   ........           BL       Put_ImgBits
   \   00000082   02B0               ADD      SP,SP,#+8
    378              }
   \                     ??animate_7:
   \   00000084   6D1C               ADDS     R5,R5,#+1
   \   00000086   C6E7               B.N      ??animate_2
    379              
    380              // Use 0.5 mS from RTS_output = 0 to RTS_output = 1    
    381              LED_change = 1 ;
   \                     ??animate_3:
   \   00000088   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   0000008C   0121               MOVS     R1,#+1
   \   0000008E   0170               STRB     R1,[R0, #+0]
    382              
    383              while( LED_change == 1 );
   \                     ??animate_8:
   \   00000090   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   00000094   0078               LDRB     R0,[R0, #+0]
   \   00000096   0128               CMP      R0,#+1
   \   00000098   FAD0               BEQ.N    ??animate_8
    384              if (RecProcessing != 0 ) return ;
   \   0000009A   ........           LDR.W    R0,??DataTable168  ;; RecProcessing
   \   0000009E   0078               LDRB     R0,[R0, #+0]
   \   000000A0   0028               CMP      R0,#+0
   \   000000A2   57D1               BNE.N    ??animate_1
    385            
    386              dly_ms(20);                                
   \   000000A4   1420               MOVS     R0,#+20
   \   000000A6   ........           BL       dly_ms
    387              for(j=0;j<16;j++){
   \   000000AA   0020               MOVS     R0,#+0
   \   000000AC   0500               MOVS     R5,R0
   \                     ??animate_9:
   \   000000AE   102D               CMP      R5,#+16
   \   000000B0   15DA               BGE.N    ??animate_10
    388                Put_ImgBits(LED_buffer.COM,j,i,0,16);
   \   000000B2   1020               MOVS     R0,#+16
   \   000000B4   01B5               PUSH     {R0,LR}
   \   000000B6   0023               MOVS     R3,#+0
   \   000000B8   2200               MOVS     R2,R4
   \   000000BA   2900               MOVS     R1,R5
   \   000000BC   ........           LDR.W    R0,??DataTable163  ;; LED_buffer
   \   000000C0   ........           BL       Put_ImgBits
   \   000000C4   02B0               ADD      SP,SP,#+8
    389                Put_ImgBits(LED_bufferG.COM,j,i,0,16);
   \   000000C6   1020               MOVS     R0,#+16
   \   000000C8   01B5               PUSH     {R0,LR}
   \   000000CA   0023               MOVS     R3,#+0
   \   000000CC   2200               MOVS     R2,R4
   \   000000CE   2900               MOVS     R1,R5
   \   000000D0   ........           LDR.W    R0,??DataTable165  ;; LED_bufferG
   \   000000D4   ........           BL       Put_ImgBits
   \   000000D8   02B0               ADD      SP,SP,#+8
    390              }  
   \   000000DA   6D1C               ADDS     R5,R5,#+1
   \   000000DC   E7E7               B.N      ??animate_9
    391              if ( i >= 0 )
   \                     ??animate_10:
   \   000000DE   002C               CMP      R4,#+0
   \   000000E0   2BD4               BMI.N    ??animate_11
    392                for(j=0;j<16;j++){
   \   000000E2   0020               MOVS     R0,#+0
   \   000000E4   0500               MOVS     R5,R0
   \                     ??animate_12:
   \   000000E6   102D               CMP      R5,#+16
   \   000000E8   27DA               BGE.N    ??animate_11
    393                  value=Get_ImgBits(Backup.COM,j,i,1);
   \   000000EA   0123               MOVS     R3,#+1
   \   000000EC   2200               MOVS     R2,R4
   \   000000EE   2900               MOVS     R1,R5
   \   000000F0   ........           LDR.W    R0,??DataTable154  ;; Backup
   \   000000F4   ........           BL       Get_ImgBits
   \   000000F8   0700               MOVS     R7,R0
    394                  Put_ImgBits(LED_buffer.COM,j,i,value,1);
   \   000000FA   0120               MOVS     R0,#+1
   \   000000FC   01B5               PUSH     {R0,LR}
   \   000000FE   3B00               MOVS     R3,R7
   \   00000100   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000102   2200               MOVS     R2,R4
   \   00000104   2900               MOVS     R1,R5
   \   00000106   ........           LDR.W    R0,??DataTable163  ;; LED_buffer
   \   0000010A   ........           BL       Put_ImgBits
   \   0000010E   02B0               ADD      SP,SP,#+8
    395                  value=Get_ImgBits(BackupG.COM,j,i,1);
   \   00000110   0123               MOVS     R3,#+1
   \   00000112   2200               MOVS     R2,R4
   \   00000114   2900               MOVS     R1,R5
   \   00000116   ........           LDR.W    R0,??DataTable159  ;; BackupG
   \   0000011A   ........           BL       Get_ImgBits
   \   0000011E   0700               MOVS     R7,R0
    396                  Put_ImgBits(LED_bufferG.COM,j,i,value,1);
   \   00000120   0120               MOVS     R0,#+1
   \   00000122   01B5               PUSH     {R0,LR}
   \   00000124   3B00               MOVS     R3,R7
   \   00000126   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000128   2200               MOVS     R2,R4
   \   0000012A   2900               MOVS     R1,R5
   \   0000012C   ........           LDR.W    R0,??DataTable165  ;; LED_bufferG
   \   00000130   ........           BL       Put_ImgBits
   \   00000134   02B0               ADD      SP,SP,#+8
    397                }     
   \   00000136   6D1C               ADDS     R5,R5,#+1
   \   00000138   D5E7               B.N      ??animate_12
    398            }               
   \                     ??animate_11:
   \   0000013A   641C               ADDS     R4,R4,#+1
   \   0000013C   0220               MOVS     R0,#+2
   \   0000013E   94FBF0F1           SDIV     R1,R4,R0
   \   00000142   0422               MOVS     R2,#+4
   \   00000144   91FBF2F0           SDIV     R0,R1,R2
   \   00000148   00FB1210           MLS      R0,R0,R2,R1
   \   0000014C   ........           BL       abs
   \   00000150   0600               MOVS     R6,R0
   \   00000152   5BE7               B.N      ??animate_0
   \                     ??animate_1:
   \   00000154   F1BD               POP      {R0,R4-R7,PC}    ;; return
    399          }
    400          
    401          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    402          void animate_Out(void) //動畫帶出
    403          {
   \                     animate_Out:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
    404            int i,j,index=0;
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0600               MOVS     R6,R0
    405            unsigned short value;
    406            for(i=-16;i<LED_bit_Length;i++,index = abs((i/2) % 4)){
   \   00000006   7FF00F00           MVNS     R0,#+15
   \   0000000A   0400               MOVS     R4,R0
   \                     ??animate_Out_0:
   \   0000000C   502C               CMP      R4,#+80
   \   0000000E   70DA               BGE.N    ??animate_Out_1
    407              for(j=0;j<16;j++){
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   0500               MOVS     R5,R0
   \                     ??animate_Out_2:
   \   00000014   102D               CMP      R5,#+16
   \   00000016   36DA               BGE.N    ??animate_Out_3
    408                value=(animate_img[index][j][0] << 8) | animate_img[index][j][1];
   \   00000018   ....               LDR.N    R0,??DataTable109  ;; animate_img
   \   0000001A   10EB4610           ADDS     R0,R0,R6, LSL #+5
   \   0000001E   10F81500           LDRB     R0,[R0, R5, LSL #+1]
   \   00000022   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000024   ....               LDR.N    R1,??DataTable109  ;; animate_img
   \   00000026   11EB4611           ADDS     R1,R1,R6, LSL #+5
   \   0000002A   11EB4501           ADDS     R1,R1,R5, LSL #+1
   \   0000002E   4978               LDRB     R1,[R1, #+1]
   \   00000030   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   00000034   0700               MOVS     R7,R0
    409                if ( color_flag == 1 || color_flag == 3 )
   \   00000036   ....               LDR.N    R0,??DataTable114  ;; color_flag
   \   00000038   0078               LDRB     R0,[R0, #+0]
   \   0000003A   0128               CMP      R0,#+1
   \   0000003C   03D0               BEQ.N    ??animate_Out_4
   \   0000003E   ....               LDR.N    R0,??DataTable114  ;; color_flag
   \   00000040   0078               LDRB     R0,[R0, #+0]
   \   00000042   0328               CMP      R0,#+3
   \   00000044   0AD1               BNE.N    ??animate_Out_5
    410                  Put_ImgBits(LED_buffer.COM,j,i,value,16);
   \                     ??animate_Out_4:
   \   00000046   1020               MOVS     R0,#+16
   \   00000048   01B5               PUSH     {R0,LR}
   \   0000004A   3B00               MOVS     R3,R7
   \   0000004C   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000004E   2200               MOVS     R2,R4
   \   00000050   2900               MOVS     R1,R5
   \   00000052   ........           LDR.W    R0,??DataTable163  ;; LED_buffer
   \   00000056   ........           BL       Put_ImgBits
   \   0000005A   02B0               ADD      SP,SP,#+8
    411                if ( color_flag == 2 || color_flag == 3 )
   \                     ??animate_Out_5:
   \   0000005C   ....               LDR.N    R0,??DataTable114  ;; color_flag
   \   0000005E   0078               LDRB     R0,[R0, #+0]
   \   00000060   0228               CMP      R0,#+2
   \   00000062   03D0               BEQ.N    ??animate_Out_6
   \   00000064   ....               LDR.N    R0,??DataTable114  ;; color_flag
   \   00000066   0078               LDRB     R0,[R0, #+0]
   \   00000068   0328               CMP      R0,#+3
   \   0000006A   0AD1               BNE.N    ??animate_Out_7
    412                  Put_ImgBits(LED_bufferG.COM,j,i,value,16);
   \                     ??animate_Out_6:
   \   0000006C   1020               MOVS     R0,#+16
   \   0000006E   01B5               PUSH     {R0,LR}
   \   00000070   3B00               MOVS     R3,R7
   \   00000072   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000074   2200               MOVS     R2,R4
   \   00000076   2900               MOVS     R1,R5
   \   00000078   ........           LDR.W    R0,??DataTable165  ;; LED_bufferG
   \   0000007C   ........           BL       Put_ImgBits
   \   00000080   02B0               ADD      SP,SP,#+8
    413              }
   \                     ??animate_Out_7:
   \   00000082   6D1C               ADDS     R5,R5,#+1
   \   00000084   C6E7               B.N      ??animate_Out_2
    414              // Use 0.5 mS from RTS_output = 0 to RTS_output = 1   
    415              LED_change = 1 ;
   \                     ??animate_Out_3:
   \   00000086   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   0000008A   0121               MOVS     R1,#+1
   \   0000008C   0170               STRB     R1,[R0, #+0]
    416              while( LED_change == 1 );
   \                     ??animate_Out_8:
   \   0000008E   ........           LDR.W    R0,??DataTable167  ;; LED_change
   \   00000092   0078               LDRB     R0,[R0, #+0]
   \   00000094   0128               CMP      R0,#+1
   \   00000096   FAD0               BEQ.N    ??animate_Out_8
    417              if (RecProcessing != 0 ) return ;
   \   00000098   ........           LDR.W    R0,??DataTable168  ;; RecProcessing
   \   0000009C   0078               LDRB     R0,[R0, #+0]
   \   0000009E   0028               CMP      R0,#+0
   \   000000A0   27D1               BNE.N    ??animate_Out_1
    418                   
    419              dly_ms(20);                                
   \   000000A2   1420               MOVS     R0,#+20
   \   000000A4   ........           BL       dly_ms
    420              for(j=0;j<16;j++){
   \   000000A8   0020               MOVS     R0,#+0
   \   000000AA   0500               MOVS     R5,R0
   \                     ??animate_Out_9:
   \   000000AC   102D               CMP      R5,#+16
   \   000000AE   13DA               BGE.N    ??animate_Out_10
    421                Put_ImgBits(LED_buffer.COM,j,i,0,16);
   \   000000B0   1020               MOVS     R0,#+16
   \   000000B2   01B5               PUSH     {R0,LR}
   \   000000B4   0023               MOVS     R3,#+0
   \   000000B6   2200               MOVS     R2,R4
   \   000000B8   2900               MOVS     R1,R5
   \   000000BA   ....               LDR.N    R0,??DataTable163  ;; LED_buffer
   \   000000BC   ........           BL       Put_ImgBits
   \   000000C0   02B0               ADD      SP,SP,#+8
    422                Put_ImgBits(LED_bufferG.COM,j,i,0,16);
   \   000000C2   1020               MOVS     R0,#+16
   \   000000C4   01B5               PUSH     {R0,LR}
   \   000000C6   0023               MOVS     R3,#+0
   \   000000C8   2200               MOVS     R2,R4
   \   000000CA   2900               MOVS     R1,R5
   \   000000CC   ....               LDR.N    R0,??DataTable165  ;; LED_bufferG
   \   000000CE   ........           BL       Put_ImgBits
   \   000000D2   02B0               ADD      SP,SP,#+8
    423              }  
   \   000000D4   6D1C               ADDS     R5,R5,#+1
   \   000000D6   E9E7               B.N      ??animate_Out_9
    424            }               
   \                     ??animate_Out_10:
   \   000000D8   641C               ADDS     R4,R4,#+1
   \   000000DA   0220               MOVS     R0,#+2
   \   000000DC   94FBF0F1           SDIV     R1,R4,R0
   \   000000E0   0422               MOVS     R2,#+4
   \   000000E2   91FBF2F0           SDIV     R0,R1,R2
   \   000000E6   00FB1210           MLS      R0,R0,R2,R1
   \   000000EA   ........           BL       abs
   \   000000EE   0600               MOVS     R6,R0
   \   000000F0   8CE7               B.N      ??animate_Out_0
   \                     ??animate_Out_1:
   \   000000F2   F1BD               POP      {R0,R4-R7,PC}    ;; return
    425          }
    426          
    427          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    428          static void Get_ImgBitsPage(unsigned char buf[16][LED_byte_Length],unsigned short value[16],int H_Bits,unsigned int TotalBits)
    429          {
   \                     Get_ImgBitsPage:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
    430            unsigned short val,mask;
    431            unsigned short H_Addr,Mod_Bits,V_Lines;
    432            H_Addr  = H_Bits/8;
   \   00000004   0827               MOVS     R7,#+8
   \   00000006   92FBF7F7           SDIV     R7,R2,R7
   \   0000000A   3C00               MOVS     R4,R7
    433            Mod_Bits= H_Bits % 8;
   \   0000000C   0827               MOVS     R7,#+8
   \   0000000E   92FBF7F8           SDIV     R8,R2,R7
   \   00000012   08FB1728           MLS      R8,R8,R7,R2
   \   00000016   4546               MOV      R5,R8
    434            for(V_Lines=0;V_Lines < 16;V_Lines++){
   \   00000018   0027               MOVS     R7,#+0
   \   0000001A   3E00               MOVS     R6,R7
   \                     ??Get_ImgBitsPage_0:
   \   0000001C   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000001E   102E               CMP      R6,#+16
   \   00000020   32D2               BCS.N    ??Get_ImgBitsPage_1
    435              val =(buf[V_Lines][H_Addr]<<8)+(buf[V_Lines][H_Addr+1]);
   \   00000022   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000024   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000026   0A27               MOVS     R7,#+10
   \   00000028   06FB0707           MLA      R7,R6,R7,R0
   \   0000002C   E75D               LDRB     R7,[R4, R7]
   \   0000002E   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000030   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000032   5FF00A08           MOVS     R8,#+10
   \   00000036   06FB0808           MLA      R8,R6,R8,R0
   \   0000003A   14EB0808           ADDS     R8,R4,R8
   \   0000003E   98F80180           LDRB     R8,[R8, #+1]
   \   00000042   18EB0727           ADDS     R7,R8,R7, LSL #+8
   \   00000046   BC46               MOV      R12,R7
    436              val <<= ( Mod_Bits );
   \   00000048   2F00               MOVS     R7,R5
   \   0000004A   1CFA07FC           LSLS     R12,R12,R7
    437              val= val | ( buf[V_Lines][H_Addr+2] >> (8-Mod_Bits));
   \   0000004E   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000050   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000052   0A27               MOVS     R7,#+10
   \   00000054   06FB0707           MLA      R7,R6,R7,R0
   \   00000058   E719               ADDS     R7,R4,R7
   \   0000005A   BF78               LDRB     R7,[R7, #+2]
   \   0000005C   A846               MOV      R8,R5
   \   0000005E   D8F10808           RSBS     R8,R8,#+8
   \   00000062   57FA08F7           ASRS     R7,R7,R8
   \   00000066   57EA0C0C           ORRS     R12,R7,R12
    438              mask = 0x0FFFF << (16 - TotalBits);
   \   0000006A   4FF6FF77           MOVW     R7,#+65535
   \   0000006E   9846               MOV      R8,R3
   \   00000070   D8F11008           RSBS     R8,R8,#+16
   \   00000074   17FA08F7           LSLS     R7,R7,R8
   \   00000078   BE46               MOV      LR,R7
    439              value[V_Lines]=(val & mask);
   \   0000007A   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000007C   1EEA0C07           ANDS     R7,LR,R12
   \   00000080   21F81670           STRH     R7,[R1, R6, LSL #+1]
    440            }
   \   00000084   761C               ADDS     R6,R6,#+1
   \   00000086   C9E7               B.N      ??Get_ImgBitsPage_0
    441          }
   \                     ??Get_ImgBitsPage_1:
   \   00000088   BDE8F081           POP      {R4-R8,PC}       ;; return
    442          
    443          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    444          static void Put_ImgBitsPage(unsigned char buf[16][LED_byte_Length],unsigned short value[16],int H_Bits,unsigned int TotalBits)
    445          {
   \                     Put_ImgBitsPage:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0500               MOVS     R5,R0
   \   00000006   0E00               MOVS     R6,R1
   \   00000008   1400               MOVS     R4,R2
   \   0000000A   1F00               MOVS     R7,R3
    446            unsigned char V_Lines;
    447             for(V_Lines=0;V_Lines < 16;V_Lines++)
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   8046               MOV      R8,R0
   \                     ??Put_ImgBitsPage_0:
   \   00000010   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000014   B8F1100F           CMP      R8,#+16
   \   00000018   0FD2               BCS.N    ??Put_ImgBitsPage_1
    448               Put_ImgBits(buf,V_Lines,H_Bits,value[V_Lines],TotalBits); 
   \   0000001A   80B5               PUSH     {R7,LR}
   \   0000001C   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000020   36F81830           LDRH     R3,[R6, R8, LSL #+1]
   \   00000024   2200               MOVS     R2,R4
   \   00000026   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000002A   4146               MOV      R1,R8
   \   0000002C   2800               MOVS     R0,R5
   \   0000002E   ........           BL       Put_ImgBits
   \   00000032   02B0               ADD      SP,SP,#+8
   \   00000034   18F10108           ADDS     R8,R8,#+1
   \   00000038   EAE7               B.N      ??Put_ImgBitsPage_0
    449          }
   \                     ??Put_ImgBitsPage_1:
   \   0000003A   BDE8F081           POP      {R4-R8,PC}       ;; return
    450          
    451          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    452          void shot_left(int page_num) //射入
    453          {
   \                     shot_left:
   \   00000000   2DE9F043           PUSH     {R4-R9,LR}
   \   00000004   91B0               SUB      SP,SP,#+68
   \   00000006   0400               MOVS     R4,R0
    454            int i,j,c;
    455            unsigned char S_Bits;//一次傳送的水平位元數
    456            unsigned short value[16];
    457            unsigned short Empty[16];
    458            short Str_Width;
    459            Dest_Adr=(unsigned char *)Empty;
   \   00000008   ....               LDR.N    R0,??DataTable157  ;; Dest_Adr
   \   0000000A   08A9               ADD      R1,SP,#+32
   \   0000000C   0160               STR      R1,[R0, #+0]
    460            Data_Len=sizeof(Empty);
   \   0000000E   ....               LDR.N    R0,??DataTable161  ;; Data_Len
   \   00000010   2021               MOVS     R1,#+32
   \   00000012   0160               STR      R1,[R0, #+0]
    461            Dest_data=0;
   \   00000014   ....               LDR.N    R0,??DataTable123  ;; Dest_data
   \   00000016   0021               MOVS     R1,#+0
   \   00000018   0160               STR      R1,[R0, #+0]
    462            data_set(); 
   \   0000001A   ........           BL       data_set
    463            if ( BinMix == 1 )
   \   0000001E   ....               LDR.N    R0,??DataTable127  ;; BinMix
   \   00000020   0078               LDRB     R0,[R0, #+0]
   \   00000022   0128               CMP      R0,#+1
   \   00000024   08D1               BNE.N    ??shot_left_0
    464              Str_Width = LEDPage1[page_num].Str_Width;
   \   00000026   40F66810           MOVW     R0,#+2408
   \   0000002A   ....               LDR.N    R1,??DataTable128  ;; LEDPage1
   \   0000002C   04FB0010           MLA      R0,R4,R0,R1
   \   00000030   B0F90000           LDRSH    R0,[R0, #+0]
   \   00000034   8146               MOV      R9,R0
   \   00000036   07E0               B.N      ??shot_left_1
    465            else
    466              Str_Width = LEDPage[page_num].Str_Width;       
   \                     ??shot_left_0:
   \   00000038   4FF4CB70           MOV      R0,#+406
   \   0000003C   ....               LDR.N    R1,??DataTable129  ;; LEDPage
   \   0000003E   04FB0010           MLA      R0,R4,R0,R1
   \   00000042   B0F90000           LDRSH    R0,[R0, #+0]
   \   00000046   8146               MOV      R9,R0
    467            for(j=0,c=0;j < Str_Width;c++,j+=S_Bits){
   \                     ??shot_left_1:
   \   00000048   0020               MOVS     R0,#+0
   \   0000004A   0600               MOVS     R6,R0
   \   0000004C   0020               MOVS     R0,#+0
   \   0000004E   0700               MOVS     R7,R0
   \                     ??shot_left_2:
   \   00000050   0FFA89F9           SXTH     R9,R9            ;; SignExt  R9,R9,#+16,#+16
   \   00000054   4E45               CMP      R6,R9
   \   00000056   4BDA               BGE.N    ??shot_left_3
    468              if ( BinMix == 1 )    
   \   00000058   ....               LDR.N    R0,??DataTable127  ;; BinMix
   \   0000005A   0078               LDRB     R0,[R0, #+0]
   \   0000005C   0128               CMP      R0,#+1
   \   0000005E   08D1               BNE.N    ??shot_left_4
    469                S_Bits=LEDPage1[page_num].CharWidth[c];
   \   00000060   40F66810           MOVW     R0,#+2408
   \   00000064   ....               LDR.N    R1,??DataTable128  ;; LEDPage1
   \   00000066   04FB0010           MLA      R0,R4,R0,R1
   \   0000006A   3818               ADDS     R0,R7,R0
   \   0000006C   8078               LDRB     R0,[R0, #+2]
   \   0000006E   8046               MOV      R8,R0
   \   00000070   07E0               B.N      ??shot_left_5
    470              else
    471                S_Bits=LEDPage[page_num].CharWidth[c];
   \                     ??shot_left_4:
   \   00000072   4FF4CB70           MOV      R0,#+406
   \   00000076   ....               LDR.N    R1,??DataTable129  ;; LEDPage
   \   00000078   04FB0010           MLA      R0,R4,R0,R1
   \   0000007C   3818               ADDS     R0,R7,R0
   \   0000007E   8078               LDRB     R0,[R0, #+2]
   \   00000080   8046               MOV      R8,R0
    472              Get_ImgBitsPage(Backup.COM,value,j,S_Bits);
   \                     ??shot_left_5:
   \   00000082   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000086   4346               MOV      R3,R8
   \   00000088   3200               MOVS     R2,R6
   \   0000008A   00A9               ADD      R1,SP,#+0
   \   0000008C   ....               LDR.N    R0,??DataTable154  ;; Backup
   \   0000008E   ........           BL       Get_ImgBitsPage
    473              for(i=LED_bit_Length-1;i >= j;i-=2){
   \   00000092   4F20               MOVS     R0,#+79
   \   00000094   0500               MOVS     R5,R0
   \                     ??shot_left_6:
   \   00000096   B542               CMP      R5,R6
   \   00000098   1CDB               BLT.N    ??shot_left_7
    474                Put_ImgBitsPage(LED_buffer.COM,value,i,S_Bits);
   \   0000009A   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000009E   4346               MOV      R3,R8
   \   000000A0   2A00               MOVS     R2,R5
   \   000000A2   00A9               ADD      R1,SP,#+0
   \   000000A4   ....               LDR.N    R0,??DataTable163  ;; LED_buffer
   \   000000A6   ........           BL       Put_ImgBitsPage
    475                LED_change = 1 ;
   \   000000AA   ....               LDR.N    R0,??DataTable167  ;; LED_change
   \   000000AC   0121               MOVS     R1,#+1
   \   000000AE   0170               STRB     R1,[R0, #+0]
    476                while( LED_change == 1 );
   \                     ??shot_left_8:
   \   000000B0   ....               LDR.N    R0,??DataTable167  ;; LED_change
   \   000000B2   0078               LDRB     R0,[R0, #+0]
   \   000000B4   0128               CMP      R0,#+1
   \   000000B6   FBD0               BEQ.N    ??shot_left_8
    477                if (RecProcessing != 0 ) return ;           
   \   000000B8   ....               LDR.N    R0,??DataTable168  ;; RecProcessing
   \   000000BA   0078               LDRB     R0,[R0, #+0]
   \   000000BC   0028               CMP      R0,#+0
   \   000000BE   20D1               BNE.N    ??shot_left_9
    478                Put_ImgBitsPage(LED_buffer.COM,Empty,i,S_Bits);
   \   000000C0   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000C4   4346               MOV      R3,R8
   \   000000C6   2A00               MOVS     R2,R5
   \   000000C8   08A9               ADD      R1,SP,#+32
   \   000000CA   ....               LDR.N    R0,??DataTable163  ;; LED_buffer
   \   000000CC   ........           BL       Put_ImgBitsPage
    479              }
   \   000000D0   AD1E               SUBS     R5,R5,#+2
   \   000000D2   E0E7               B.N      ??shot_left_6
    480              Put_ImgBitsPage(LED_buffer.COM,value,j,S_Bits);    
   \                     ??shot_left_7:
   \   000000D4   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000D8   4346               MOV      R3,R8
   \   000000DA   3200               MOVS     R2,R6
   \   000000DC   00A9               ADD      R1,SP,#+0
   \   000000DE   ....               LDR.N    R0,??DataTable163  ;; LED_buffer
   \   000000E0   ........           BL       Put_ImgBitsPage
    481            }
   \   000000E4   7F1C               ADDS     R7,R7,#+1
   \   000000E6   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000EA   18EB0606           ADDS     R6,R8,R6
   \   000000EE   AFE7               B.N      ??shot_left_2
    482            
    483            LED_change = 1 ;
   \                     ??shot_left_3:
   \   000000F0   ....               LDR.N    R0,??DataTable167  ;; LED_change
   \   000000F2   0121               MOVS     R1,#+1
   \   000000F4   0170               STRB     R1,[R0, #+0]
    484            while( LED_change == 1 );
   \                     ??shot_left_10:
   \   000000F6   ....               LDR.N    R0,??DataTable167  ;; LED_change
   \   000000F8   0078               LDRB     R0,[R0, #+0]
   \   000000FA   0128               CMP      R0,#+1
   \   000000FC   FBD0               BEQ.N    ??shot_left_10
    485            if (RecProcessing != 0 ) return ; 
   \   000000FE   ....               LDR.N    R0,??DataTable168  ;; RecProcessing
   \   00000100   0078               LDRB     R0,[R0, #+0]
   \                     ??shot_left_9:
   \   00000102   11B0               ADD      SP,SP,#+68
   \   00000104   BDE8F083           POP      {R4-R9,PC}       ;; return
    486          }
    487          
    488          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    489          static void shiftBits_down(int VBits_Pos,unsigned char buf[16][LED_byte_Length],unsigned char ud[LED_byte_Length])
    490          {
   \                     shiftBits_down:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   1500               MOVS     R5,R2
    491            if (VBits_Pos > 0 ){
   \   00000008   012E               CMP      R6,#+1
   \   0000000A   11DB               BLT.N    ??shiftBits_down_0
    492              Dest_Adr=&buf[VBits_Pos][LED_byte_Length-1];
   \   0000000C   0A20               MOVS     R0,#+10
   \   0000000E   06FB0040           MLA      R0,R6,R0,R4
   \   00000012   0930               ADDS     R0,R0,#+9
   \   00000014   ....               LDR.N    R1,??DataTable157  ;; Dest_Adr
   \   00000016   0860               STR      R0,[R1, #+0]
    493              Sour_Adr=&buf[VBits_Pos-1][LED_byte_Length-1];
   \   00000018   0A20               MOVS     R0,#+10
   \   0000001A   06FB0040           MLA      R0,R6,R0,R4
   \   0000001E   401E               SUBS     R0,R0,#+1
   \   00000020   ....               LDR.N    R1,??DataTable160  ;; Sour_Adr
   \   00000022   0860               STR      R0,[R1, #+0]
    494              Data_Len=LED_byte_Length*VBits_Pos;
   \   00000024   0A20               MOVS     R0,#+10
   \   00000026   7043               MULS     R0,R6,R0
   \   00000028   ....               LDR.N    R1,??DataTable161  ;; Data_Len
   \   0000002A   0860               STR      R0,[R1, #+0]
    495              data_copyB();
   \   0000002C   ........           BL       data_copyB
    496            }   
    497            Dest_Adr=buf[0];
   \                     ??shiftBits_down_0:
   \   00000030   ....               LDR.N    R0,??DataTable157  ;; Dest_Adr
   \   00000032   0460               STR      R4,[R0, #+0]
    498            Sour_Adr=ud;
   \   00000034   ....               LDR.N    R0,??DataTable160  ;; Sour_Adr
   \   00000036   0560               STR      R5,[R0, #+0]
    499            Data_Len=LED_byte_Length;
   \   00000038   ....               LDR.N    R0,??DataTable161  ;; Data_Len
   \   0000003A   0A21               MOVS     R1,#+10
   \   0000003C   0160               STR      R1,[R0, #+0]
    500            data_copyF();
   \   0000003E   ........           BL       data_copyF
    501          }
   \   00000042   70BD               POP      {R4-R6,PC}       ;; return
    502          
    503          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    504          static void shiftBits_up(int VBits_Pos,unsigned char buf[16][LED_byte_Length],unsigned char ud[LED_byte_Length])
    505          {
   \                     shiftBits_up:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   1500               MOVS     R5,R2
    506            Dest_Adr=buf[0];
   \   00000008   ....               LDR.N    R0,??DataTable157  ;; Dest_Adr
   \   0000000A   0460               STR      R4,[R0, #+0]
    507            Sour_Adr=buf[1];
   \   0000000C   14F10A00           ADDS     R0,R4,#+10
   \   00000010   ....               LDR.N    R1,??DataTable160  ;; Sour_Adr
   \   00000012   0860               STR      R0,[R1, #+0]
    508            Data_Len=LED_byte_Length*(VBits_Pos-1);
   \   00000014   701E               SUBS     R0,R6,#+1
   \   00000016   0A21               MOVS     R1,#+10
   \   00000018   00FB01F0           MUL      R0,R0,R1
   \   0000001C   ....               LDR.N    R1,??DataTable161  ;; Data_Len
   \   0000001E   0860               STR      R0,[R1, #+0]
    509            data_copyF(); 
   \   00000020   ........           BL       data_copyF
    510            Dest_Adr=buf[VBits_Pos];
   \   00000024   0A20               MOVS     R0,#+10
   \   00000026   06FB0040           MLA      R0,R6,R0,R4
   \   0000002A   ....               LDR.N    R1,??DataTable157  ;; Dest_Adr
   \   0000002C   0860               STR      R0,[R1, #+0]
    511            Sour_Adr=ud;
   \   0000002E   ....               LDR.N    R0,??DataTable160  ;; Sour_Adr
   \   00000030   0560               STR      R5,[R0, #+0]
    512            Data_Len=LED_byte_Length;
   \   00000032   ....               LDR.N    R0,??DataTable161  ;; Data_Len
   \   00000034   0A21               MOVS     R1,#+10
   \   00000036   0160               STR      R1,[R0, #+0]
    513            data_copyF(); 
   \   00000038   ........           BL       data_copyF
    514          }
   \   0000003C   70BD               POP      {R4-R6,PC}       ;; return
    515          
    516          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    517          void Vrain_down(void) //下雨
    518          {
   \                     Vrain_down:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    519            int i,j;
    520            for(i=0;i<16;i++){
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0400               MOVS     R4,R0
   \                     ??Vrain_down_0:
   \   00000006   102C               CMP      R4,#+16
   \   00000008   3EDA               BGE.N    ??Vrain_down_1
    521              Dest_Adr=udf;
   \   0000000A   ....               LDR.N    R0,??DataTable157  ;; Dest_Adr
   \   0000000C   ....               LDR.N    R1,??DataTable162  ;; udf
   \   0000000E   0160               STR      R1,[R0, #+0]
    522              Sour_Adr=Backup.COM[15-i];
   \   00000010   6042               RSBS     R0,R4,#+0
   \   00000012   0A21               MOVS     R1,#+10
   \   00000014   ....               LDR.N    R2,??DataTable154  ;; Backup
   \   00000016   00FB0120           MLA      R0,R0,R1,R2
   \   0000001A   9630               ADDS     R0,R0,#+150
   \   0000001C   ....               LDR.N    R1,??DataTable160  ;; Sour_Adr
   \   0000001E   0860               STR      R0,[R1, #+0]
    523              Data_Len=LED_byte_Length;
   \   00000020   ....               LDR.N    R0,??DataTable161  ;; Data_Len
   \   00000022   0A21               MOVS     R1,#+10
   \   00000024   0160               STR      R1,[R0, #+0]
    524              data_copyF();  
   \   00000026   ........           BL       data_copyF
    525              Dest_Adr=udfG;
   \   0000002A   ....               LDR.N    R0,??DataTable157  ;; Dest_Adr
   \   0000002C   ....               LDR.N    R1,??DataTable164  ;; udfG
   \   0000002E   0160               STR      R1,[R0, #+0]
    526              Sour_Adr=BackupG.COM[15-i];
   \   00000030   6042               RSBS     R0,R4,#+0
   \   00000032   0A21               MOVS     R1,#+10
   \   00000034   ....               LDR.N    R2,??DataTable159  ;; BackupG
   \   00000036   00FB0120           MLA      R0,R0,R1,R2
   \   0000003A   9630               ADDS     R0,R0,#+150
   \   0000003C   ....               LDR.N    R1,??DataTable160  ;; Sour_Adr
   \   0000003E   0860               STR      R0,[R1, #+0]
    527              Data_Len=LED_byte_Length;
   \   00000040   ....               LDR.N    R0,??DataTable161  ;; Data_Len
   \   00000042   0A21               MOVS     R1,#+10
   \   00000044   0160               STR      R1,[R0, #+0]
    528              data_copyF();         
   \   00000046   ........           BL       data_copyF
    529              for(j=16;j>i;j--){
   \   0000004A   1020               MOVS     R0,#+16
   \   0000004C   0500               MOVS     R5,R0
   \                     ??Vrain_down_2:
   \   0000004E   AC42               CMP      R4,R5
   \   00000050   18DA               BGE.N    ??Vrain_down_3
    530                shiftBits_down(15-i,LED_buffer.COM,udf);
   \   00000052   ....               LDR.N    R2,??DataTable162  ;; udf
   \   00000054   ....               LDR.N    R1,??DataTable163  ;; LED_buffer
   \   00000056   D4F10F00           RSBS     R0,R4,#+15
   \   0000005A   ........           BL       shiftBits_down
    531                shiftBits_down(15-i,LED_bufferG.COM,udfG);
   \   0000005E   ....               LDR.N    R2,??DataTable164  ;; udfG
   \   00000060   ....               LDR.N    R1,??DataTable165  ;; LED_bufferG
   \   00000062   D4F10F00           RSBS     R0,R4,#+15
   \   00000066   ........           BL       shiftBits_down
    532                LED_change = 1 ;
   \   0000006A   ....               LDR.N    R0,??DataTable167  ;; LED_change
   \   0000006C   0121               MOVS     R1,#+1
   \   0000006E   0170               STRB     R1,[R0, #+0]
    533                while( LED_change == 1 );
   \                     ??Vrain_down_4:
   \   00000070   ....               LDR.N    R0,??DataTable167  ;; LED_change
   \   00000072   0078               LDRB     R0,[R0, #+0]
   \   00000074   0128               CMP      R0,#+1
   \   00000076   FBD0               BEQ.N    ??Vrain_down_4
    534                if (RecProcessing != 0 ) return ;          
   \   00000078   ....               LDR.N    R0,??DataTable168  ;; RecProcessing
   \   0000007A   0078               LDRB     R0,[R0, #+0]
   \   0000007C   0028               CMP      R0,#+0
   \   0000007E   03D1               BNE.N    ??Vrain_down_1
    535              }
   \   00000080   6D1E               SUBS     R5,R5,#+1
   \   00000082   E4E7               B.N      ??Vrain_down_2
    536            }
   \                     ??Vrain_down_3:
   \   00000084   641C               ADDS     R4,R4,#+1
   \   00000086   BEE7               B.N      ??Vrain_down_0
   \                     ??Vrain_down_1:
   \   00000088   31BD               POP      {R0,R4,R5,PC}    ;; return
    537          }
    538          
    539          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    540          void Vrain_down_Out(void) //蒸發
    541          {
   \                     Vrain_down_Out:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    542            int i,j;
    543            Sour_Adr=(unsigned char *)LED_buffer.COM;
   \   00000002   3A48               LDR.N    R0,??Vrain_down_Out_0  ;; Sour_Adr
   \   00000004   3A49               LDR.N    R1,??Vrain_down_Out_0+0x4  ;; LED_buffer
   \   00000006   0160               STR      R1,[R0, #+0]
    544            Dest_Adr=(unsigned char *)Backup.COM;
   \   00000008   3A48               LDR.N    R0,??Vrain_down_Out_0+0x8  ;; Dest_Adr
   \   0000000A   3B49               LDR.N    R1,??Vrain_down_Out_0+0xC  ;; Backup
   \   0000000C   0160               STR      R1,[R0, #+0]
    545            Data_Len=LED_byte_Length*16;
   \   0000000E   3B48               LDR.N    R0,??Vrain_down_Out_0+0x10  ;; Data_Len
   \   00000010   A021               MOVS     R1,#+160
   \   00000012   0160               STR      R1,[R0, #+0]
    546            data_copyF();  
   \   00000014   ........           BL       data_copyF
    547            
    548            Sour_Adr=(unsigned char *)LED_bufferG.COM;
   \   00000018   3448               LDR.N    R0,??Vrain_down_Out_0  ;; Sour_Adr
   \   0000001A   3949               LDR.N    R1,??Vrain_down_Out_0+0x14  ;; LED_bufferG
   \   0000001C   0160               STR      R1,[R0, #+0]
    549            Dest_Adr=(unsigned char *)BackupG.COM;
   \   0000001E   3548               LDR.N    R0,??Vrain_down_Out_0+0x8  ;; Dest_Adr
   \   00000020   3849               LDR.N    R1,??Vrain_down_Out_0+0x18  ;; BackupG
   \   00000022   0160               STR      R1,[R0, #+0]
    550            Data_Len=LED_byte_Length*16;
   \   00000024   3548               LDR.N    R0,??Vrain_down_Out_0+0x10  ;; Data_Len
   \   00000026   A021               MOVS     R1,#+160
   \   00000028   0160               STR      R1,[R0, #+0]
    551            data_copyF();  
   \   0000002A   ........           BL       data_copyF
    552              
    553            for( i = 0 ; i <= 16 ; i++ ){
   \   0000002E   0020               MOVS     R0,#+0
   \   00000030   0400               MOVS     R4,R0
   \                     ??Vrain_down_Out_1:
   \   00000032   112C               CMP      R4,#+17
   \   00000034   59DA               BGE.N    ??Vrain_down_Out_2
    554              Dest_Adr=udf;
   \   00000036   2F48               LDR.N    R0,??Vrain_down_Out_0+0x8  ;; Dest_Adr
   \   00000038   3349               LDR.N    R1,??Vrain_down_Out_0+0x1C  ;; udf
   \   0000003A   0160               STR      R1,[R0, #+0]
    555              Sour_Adr=Backup.COM[i];
   \   0000003C   0A20               MOVS     R0,#+10
   \   0000003E   2E49               LDR.N    R1,??Vrain_down_Out_0+0xC  ;; Backup
   \   00000040   04FB0010           MLA      R0,R4,R0,R1
   \   00000044   2949               LDR.N    R1,??Vrain_down_Out_0  ;; Sour_Adr
   \   00000046   0860               STR      R0,[R1, #+0]
    556              Data_Len=LED_byte_Length;
   \   00000048   2C48               LDR.N    R0,??Vrain_down_Out_0+0x10  ;; Data_Len
   \   0000004A   0A21               MOVS     R1,#+10
   \   0000004C   0160               STR      R1,[R0, #+0]
    557              data_copyF(); 
   \   0000004E   ........           BL       data_copyF
    558              
    559              Dest_Adr=udfG;
   \   00000052   2848               LDR.N    R0,??Vrain_down_Out_0+0x8  ;; Dest_Adr
   \   00000054   2D49               LDR.N    R1,??Vrain_down_Out_0+0x20  ;; udfG
   \   00000056   0160               STR      R1,[R0, #+0]
    560              Sour_Adr=BackupG.COM[i];
   \   00000058   0A20               MOVS     R0,#+10
   \   0000005A   2A49               LDR.N    R1,??Vrain_down_Out_0+0x18  ;; BackupG
   \   0000005C   04FB0010           MLA      R0,R4,R0,R1
   \   00000060   2249               LDR.N    R1,??Vrain_down_Out_0  ;; Sour_Adr
   \   00000062   0860               STR      R0,[R1, #+0]
    561              Data_Len=LED_byte_Length;
   \   00000064   2548               LDR.N    R0,??Vrain_down_Out_0+0x10  ;; Data_Len
   \   00000066   0A21               MOVS     R1,#+10
   \   00000068   0160               STR      R1,[R0, #+0]
    562              data_copyF(); 
   \   0000006A   ........           BL       data_copyF
    563                          
    564              for( j=0 ; j < i ; j++ ){
   \   0000006E   0020               MOVS     R0,#+0
   \   00000070   0500               MOVS     R5,R0
   \                     ??Vrain_down_Out_3:
   \   00000072   A542               CMP      R5,R4
   \   00000074   37DA               BGE.N    ??Vrain_down_Out_4
    565                if (i != 16){
   \   00000076   102C               CMP      R4,#+16
   \   00000078   0AD0               BEQ.N    ??Vrain_down_Out_5
    566                  shiftBits_up(i,LED_buffer.COM,udf);
   \   0000007A   234A               LDR.N    R2,??Vrain_down_Out_0+0x1C  ;; udf
   \   0000007C   1C49               LDR.N    R1,??Vrain_down_Out_0+0x4  ;; LED_buffer
   \   0000007E   2000               MOVS     R0,R4
   \   00000080   ........           BL       shiftBits_up
    567                  shiftBits_up(i,LED_bufferG.COM,udfG);
   \   00000084   214A               LDR.N    R2,??Vrain_down_Out_0+0x20  ;; udfG
   \   00000086   1E49               LDR.N    R1,??Vrain_down_Out_0+0x14  ;; LED_bufferG
   \   00000088   2000               MOVS     R0,R4
   \   0000008A   ........           BL       shiftBits_up
   \   0000008E   1DE0               B.N      ??Vrain_down_Out_6
    568                }else{
    569                  Dest_Adr=udf;
   \                     ??Vrain_down_Out_5:
   \   00000090   1848               LDR.N    R0,??Vrain_down_Out_0+0x8  ;; Dest_Adr
   \   00000092   1D49               LDR.N    R1,??Vrain_down_Out_0+0x1C  ;; udf
   \   00000094   0160               STR      R1,[R0, #+0]
    570                  Data_Len=LED_byte_Length;
   \   00000096   1948               LDR.N    R0,??Vrain_down_Out_0+0x10  ;; Data_Len
   \   00000098   0A21               MOVS     R1,#+10
   \   0000009A   0160               STR      R1,[R0, #+0]
    571                  Dest_data=0;
   \   0000009C   1C48               LDR.N    R0,??Vrain_down_Out_0+0x24  ;; Dest_data
   \   0000009E   0021               MOVS     R1,#+0
   \   000000A0   0160               STR      R1,[R0, #+0]
    572                  data_set(); 
   \   000000A2   ........           BL       data_set
    573                  
    574                  Dest_Adr=udfG;
   \   000000A6   1348               LDR.N    R0,??Vrain_down_Out_0+0x8  ;; Dest_Adr
   \   000000A8   1849               LDR.N    R1,??Vrain_down_Out_0+0x20  ;; udfG
   \   000000AA   0160               STR      R1,[R0, #+0]
    575                  Data_Len=LED_byte_Length;
   \   000000AC   1348               LDR.N    R0,??Vrain_down_Out_0+0x10  ;; Data_Len
   \   000000AE   0A21               MOVS     R1,#+10
   \   000000B0   0160               STR      R1,[R0, #+0]
    576                  Dest_data=0;
   \   000000B2   1748               LDR.N    R0,??Vrain_down_Out_0+0x24  ;; Dest_data
   \   000000B4   0021               MOVS     R1,#+0
   \   000000B6   0160               STR      R1,[R0, #+0]
    577                  data_set(); 
   \   000000B8   ........           BL       data_set
    578                          
    579                  shift_up(LED_buffer.COM,udf);
   \   000000BC   1249               LDR.N    R1,??Vrain_down_Out_0+0x1C  ;; udf
   \   000000BE   0C48               LDR.N    R0,??Vrain_down_Out_0+0x4  ;; LED_buffer
   \   000000C0   ........           BL       shift_up
    580                  shift_up(LED_bufferG.COM,udfG);
   \   000000C4   1149               LDR.N    R1,??Vrain_down_Out_0+0x20  ;; udfG
   \   000000C6   0E48               LDR.N    R0,??Vrain_down_Out_0+0x14  ;; LED_bufferG
   \   000000C8   ........           BL       shift_up
    581                }
    582                LED_change = 1 ;
   \                     ??Vrain_down_Out_6:
   \   000000CC   1148               LDR.N    R0,??Vrain_down_Out_0+0x28  ;; LED_change
   \   000000CE   0121               MOVS     R1,#+1
   \   000000D0   0170               STRB     R1,[R0, #+0]
    583                while( LED_change == 1 );
   \                     ??Vrain_down_Out_7:
   \   000000D2   1048               LDR.N    R0,??Vrain_down_Out_0+0x28  ;; LED_change
   \   000000D4   0078               LDRB     R0,[R0, #+0]
   \   000000D6   0128               CMP      R0,#+1
   \   000000D8   FBD0               BEQ.N    ??Vrain_down_Out_7
    584                if (RecProcessing != 0 ) return ;          
   \   000000DA   0F48               LDR.N    R0,??Vrain_down_Out_0+0x2C  ;; RecProcessing
   \   000000DC   0078               LDRB     R0,[R0, #+0]
   \   000000DE   0028               CMP      R0,#+0
   \   000000E0   03D1               BNE.N    ??Vrain_down_Out_2
    585              }
   \   000000E2   6D1C               ADDS     R5,R5,#+1
   \   000000E4   C5E7               B.N      ??Vrain_down_Out_3
    586            }
   \                     ??Vrain_down_Out_4:
   \   000000E6   641C               ADDS     R4,R4,#+1
   \   000000E8   A3E7               B.N      ??Vrain_down_Out_1
   \                     ??Vrain_down_Out_2:
   \   000000EA   31BD               POP      {R0,R4,R5,PC}    ;; return
   \                     ??Vrain_down_Out_0:
   \   000000EC   ........           DC32     Sour_Adr
   \   000000F0   ........           DC32     LED_buffer
   \   000000F4   ........           DC32     Dest_Adr
   \   000000F8   ........           DC32     Backup
   \   000000FC   ........           DC32     Data_Len
   \   00000100   ........           DC32     LED_bufferG
   \   00000104   ........           DC32     BackupG
   \   00000108   ........           DC32     udf
   \   0000010C   ........           DC32     udfG
   \   00000110   ........           DC32     Dest_data
   \   00000114   ........           DC32     LED_change
   \   00000118   ........           DC32     RecProcessing
    587          }
    588          
    589          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    590          void Snow(void)
    591          {
   \                     Snow:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
    592            int i,ii;
    593            unsigned char V_Lines,H_Bits,H_Cols,Byte_Bits,mask;
    594            for(i=0;i<256;i++){
   \   00000004   0025               MOVS     R5,#+0
   \   00000006   2800               MOVS     R0,R5
   \                     ??Snow_0:
   \   00000008   FF28               CMP      R0,#+255
   \   0000000A   00F38B80           BGT.W    ??Snow_1
    595              V_Lines=rndnum[i] >> 4;
   \   0000000E   464D               LDR.N    R5,??Snow_2      ;; rndnum
   \   00000010   455D               LDRB     R5,[R0, R5]
   \   00000012   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   2D09               LSRS     R5,R5,#+4
   \   00000016   2A00               MOVS     R2,R5
    596              H_Bits= rndnum[i] & 0x0F;
   \   00000018   434D               LDR.N    R5,??Snow_2      ;; rndnum
   \   0000001A   455D               LDRB     R5,[R0, R5]
   \   0000001C   15F00F05           ANDS     R5,R5,#0xF
   \   00000020   2B00               MOVS     R3,R5
    597              for(ii=H_Bits;ii < LED_bit_Length;ii+=16){
   \   00000022   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000024   1900               MOVS     R1,R3
   \                     ??Snow_3:
   \   00000026   5029               CMP      R1,#+80
   \   00000028   6FDA               BGE.N    ??Snow_4
    598                H_Cols = ii >> 3;
   \   0000002A   CD10               ASRS     R5,R1,#+3
   \   0000002C   AC46               MOV      R12,R5
    599                Byte_Bits=ii & 0x07;
   \   0000002E   0D00               MOVS     R5,R1
   \   00000030   15F00705           ANDS     R5,R5,#0x7
   \   00000034   AE46               MOV      LR,R5
    600                mask = 0x80 >> Byte_Bits;
   \   00000036   8025               MOVS     R5,#+128
   \   00000038   55FA0EF5           ASRS     R5,R5,LR
   \   0000003C   2C00               MOVS     R4,R5
    601                LED_buffer.COM[V_Lines][H_Cols] &= (~mask);
   \   0000003E   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000042   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000044   0A25               MOVS     R5,#+10
   \   00000046   394E               LDR.N    R6,??Snow_2+0x4  ;; LED_buffer
   \   00000048   02FB0565           MLA      R5,R2,R5,R6
   \   0000004C   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000050   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000052   0A26               MOVS     R6,#+10
   \   00000054   354F               LDR.N    R7,??Snow_2+0x4  ;; LED_buffer
   \   00000056   02FB0676           MLA      R6,R2,R6,R7
   \   0000005A   1CF80660           LDRB     R6,[R12, R6]
   \   0000005E   E743               MVNS     R7,R4
   \   00000060   3E40               ANDS     R6,R7,R6
   \   00000062   0CF80560           STRB     R6,[R12, R5]
    602                LED_buffer.COM[V_Lines][H_Cols] |= (Backup.COM[V_Lines][H_Cols] & mask);
   \   00000066   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   0000006A   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000006C   0A25               MOVS     R5,#+10
   \   0000006E   2F4E               LDR.N    R6,??Snow_2+0x4  ;; LED_buffer
   \   00000070   02FB0565           MLA      R5,R2,R5,R6
   \   00000074   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000078   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000007A   0A26               MOVS     R6,#+10
   \   0000007C   2B4F               LDR.N    R7,??Snow_2+0x4  ;; LED_buffer
   \   0000007E   02FB0676           MLA      R6,R2,R6,R7
   \   00000082   1CF80660           LDRB     R6,[R12, R6]
   \   00000086   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   0000008A   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000008C   0A27               MOVS     R7,#+10
   \   0000008E   DFF8A080           LDR.W    R8,??Snow_2+0x8  ;; Backup
   \   00000092   02FB0787           MLA      R7,R2,R7,R8
   \   00000096   1CF80770           LDRB     R7,[R12, R7]
   \   0000009A   2740               ANDS     R7,R4,R7
   \   0000009C   3E43               ORRS     R6,R7,R6
   \   0000009E   0CF80560           STRB     R6,[R12, R5]
    603                
    604                LED_bufferG.COM[V_Lines][H_Cols] &= (~mask);
   \   000000A2   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000000A6   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000A8   0A25               MOVS     R5,#+10
   \   000000AA   224E               LDR.N    R6,??Snow_2+0xC  ;; LED_bufferG
   \   000000AC   02FB0565           MLA      R5,R2,R5,R6
   \   000000B0   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000000B4   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000B6   0A26               MOVS     R6,#+10
   \   000000B8   1E4F               LDR.N    R7,??Snow_2+0xC  ;; LED_bufferG
   \   000000BA   02FB0676           MLA      R6,R2,R6,R7
   \   000000BE   1CF80660           LDRB     R6,[R12, R6]
   \   000000C2   E743               MVNS     R7,R4
   \   000000C4   3E40               ANDS     R6,R7,R6
   \   000000C6   0CF80560           STRB     R6,[R12, R5]
    605                LED_bufferG.COM[V_Lines][H_Cols] |= (BackupG.COM[V_Lines][H_Cols] & mask);      
   \   000000CA   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000000CE   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000D0   0A25               MOVS     R5,#+10
   \   000000D2   184E               LDR.N    R6,??Snow_2+0xC  ;; LED_bufferG
   \   000000D4   02FB0565           MLA      R5,R2,R5,R6
   \   000000D8   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000000DC   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000DE   0A26               MOVS     R6,#+10
   \   000000E0   144F               LDR.N    R7,??Snow_2+0xC  ;; LED_bufferG
   \   000000E2   02FB0676           MLA      R6,R2,R6,R7
   \   000000E6   1CF80660           LDRB     R6,[R12, R6]
   \   000000EA   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000000EE   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000F0   0A27               MOVS     R7,#+10
   \   000000F2   DFF84480           LDR.W    R8,??Snow_2+0x10  ;; BackupG
   \   000000F6   02FB0787           MLA      R7,R2,R7,R8
   \   000000FA   1CF80770           LDRB     R7,[R12, R7]
   \   000000FE   2740               ANDS     R7,R4,R7
   \   00000100   3E43               ORRS     R6,R7,R6
   \   00000102   0CF80560           STRB     R6,[R12, R5]
    606              }
   \   00000106   1031               ADDS     R1,R1,#+16
   \   00000108   8DE7               B.N      ??Snow_3
    607              
    608              LED_change = 1 ;
   \                     ??Snow_4:
   \   0000010A   0C4D               LDR.N    R5,??Snow_2+0x14  ;; LED_change
   \   0000010C   0126               MOVS     R6,#+1
   \   0000010E   2E70               STRB     R6,[R5, #+0]
    609              while( LED_change == 1 );
   \                     ??Snow_5:
   \   00000110   0A4D               LDR.N    R5,??Snow_2+0x14  ;; LED_change
   \   00000112   2D78               LDRB     R5,[R5, #+0]
   \   00000114   012D               CMP      R5,#+1
   \   00000116   FBD0               BEQ.N    ??Snow_5
    610              if (RecProcessing != 0 ) return ;     
   \   00000118   094D               LDR.N    R5,??Snow_2+0x18  ;; RecProcessing
   \   0000011A   2D78               LDRB     R5,[R5, #+0]
   \   0000011C   002D               CMP      R5,#+0
   \   0000011E   01D1               BNE.N    ??Snow_1
    611            }
   \   00000120   401C               ADDS     R0,R0,#+1
   \   00000122   71E7               B.N      ??Snow_0
   \                     ??Snow_1:
   \   00000124   BDE8F081           POP      {R4-R8,PC}       ;; return
   \                     ??Snow_2:
   \   00000128   ........           DC32     rndnum
   \   0000012C   ........           DC32     LED_buffer
   \   00000130   ........           DC32     Backup
   \   00000134   ........           DC32     LED_bufferG
   \   00000138   ........           DC32     BackupG
   \   0000013C   ........           DC32     LED_change
   \   00000140   ........           DC32     RecProcessing
    612          }
    613          
    614          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    615          void Snow_Out(void)  //腐蝕
    616          {
   \                     Snow_Out:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
    617            int i,ii;
    618            unsigned char V_Lines,H_Bits,H_Cols,Byte_Bits,mask;
    619            for(i=0;i<256;i++){
   \   00000002   0025               MOVS     R5,#+0
   \   00000004   2800               MOVS     R0,R5
   \                     ??Snow_Out_0:
   \   00000006   FF28               CMP      R0,#+255
   \   00000008   4EDC               BGT.N    ??Snow_Out_1
    620              V_Lines=rndnum[i] >> 4;
   \   0000000A   284D               LDR.N    R5,??Snow_Out_2  ;; rndnum
   \   0000000C   455D               LDRB     R5,[R0, R5]
   \   0000000E   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   2D09               LSRS     R5,R5,#+4
   \   00000012   2A00               MOVS     R2,R5
    621              H_Bits= rndnum[i] & 0x0F;
   \   00000014   254D               LDR.N    R5,??Snow_Out_2  ;; rndnum
   \   00000016   455D               LDRB     R5,[R0, R5]
   \   00000018   15F00F05           ANDS     R5,R5,#0xF
   \   0000001C   2B00               MOVS     R3,R5
    622              for(ii=H_Bits;ii < LED_bit_Length;ii+=16){
   \   0000001E   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000020   1900               MOVS     R1,R3
   \                     ??Snow_Out_3:
   \   00000022   5029               CMP      R1,#+80
   \   00000024   33DA               BGE.N    ??Snow_Out_4
    623                H_Cols = ii >> 3;
   \   00000026   CD10               ASRS     R5,R1,#+3
   \   00000028   AC46               MOV      R12,R5
    624                Byte_Bits=ii & 0x07;
   \   0000002A   0D00               MOVS     R5,R1
   \   0000002C   15F00705           ANDS     R5,R5,#0x7
   \   00000030   AE46               MOV      LR,R5
    625                mask = 0x80 >> Byte_Bits;
   \   00000032   8025               MOVS     R5,#+128
   \   00000034   55FA0EF5           ASRS     R5,R5,LR
   \   00000038   2C00               MOVS     R4,R5
    626                LED_buffer.COM[V_Lines][H_Cols] &= (~mask);
   \   0000003A   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   0000003E   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000040   0A25               MOVS     R5,#+10
   \   00000042   1B4E               LDR.N    R6,??Snow_Out_2+0x4  ;; LED_buffer
   \   00000044   02FB0565           MLA      R5,R2,R5,R6
   \   00000048   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   0000004C   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000004E   0A26               MOVS     R6,#+10
   \   00000050   174F               LDR.N    R7,??Snow_Out_2+0x4  ;; LED_buffer
   \   00000052   02FB0676           MLA      R6,R2,R6,R7
   \   00000056   1CF80660           LDRB     R6,[R12, R6]
   \   0000005A   E743               MVNS     R7,R4
   \   0000005C   3E40               ANDS     R6,R7,R6
   \   0000005E   0CF80560           STRB     R6,[R12, R5]
    627                LED_bufferG.COM[V_Lines][H_Cols] &= (~mask); 
   \   00000062   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000066   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000068   0A25               MOVS     R5,#+10
   \   0000006A   124E               LDR.N    R6,??Snow_Out_2+0x8  ;; LED_bufferG
   \   0000006C   02FB0565           MLA      R5,R2,R5,R6
   \   00000070   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000074   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000076   0A26               MOVS     R6,#+10
   \   00000078   0E4F               LDR.N    R7,??Snow_Out_2+0x8  ;; LED_bufferG
   \   0000007A   02FB0676           MLA      R6,R2,R6,R7
   \   0000007E   1CF80660           LDRB     R6,[R12, R6]
   \   00000082   E743               MVNS     R7,R4
   \   00000084   3E40               ANDS     R6,R7,R6
   \   00000086   0CF80560           STRB     R6,[R12, R5]
    628              }
   \   0000008A   1031               ADDS     R1,R1,#+16
   \   0000008C   C9E7               B.N      ??Snow_Out_3
    629               
    630              LED_change = 1 ;
   \                     ??Snow_Out_4:
   \   0000008E   0A4D               LDR.N    R5,??Snow_Out_2+0xC  ;; LED_change
   \   00000090   0126               MOVS     R6,#+1
   \   00000092   2E70               STRB     R6,[R5, #+0]
    631              while( LED_change == 1 ); 
   \                     ??Snow_Out_5:
   \   00000094   084D               LDR.N    R5,??Snow_Out_2+0xC  ;; LED_change
   \   00000096   2D78               LDRB     R5,[R5, #+0]
   \   00000098   012D               CMP      R5,#+1
   \   0000009A   FBD0               BEQ.N    ??Snow_Out_5
    632              if (RecProcessing != 0 ) return ;
   \   0000009C   074D               LDR.N    R5,??Snow_Out_2+0x10  ;; RecProcessing
   \   0000009E   2D78               LDRB     R5,[R5, #+0]
   \   000000A0   002D               CMP      R5,#+0
   \   000000A2   01D1               BNE.N    ??Snow_Out_1
    633            }
   \   000000A4   401C               ADDS     R0,R0,#+1
   \   000000A6   AEE7               B.N      ??Snow_Out_0
   \                     ??Snow_Out_1:
   \   000000A8   F1BD               POP      {R0,R4-R7,PC}    ;; return
   \   000000AA   00BF               Nop      
   \                     ??Snow_Out_2:
   \   000000AC   ........           DC32     rndnum
   \   000000B0   ........           DC32     LED_buffer
   \   000000B4   ........           DC32     LED_bufferG
   \   000000B8   ........           DC32     LED_change
   \   000000BC   ........           DC32     RecProcessing
    634          }
    635          
    636          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    637          void jmp_right(int page_num) //跳入
    638          {
   \                     jmp_right:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   88B0               SUB      SP,SP,#+32
   \   00000006   0500               MOVS     R5,R0
    639            int j,c;
    640            unsigned short value[16];
    641            int S_Bits;//一次傳送的水平位元數
    642            short Str_Width;  
    643            if ( BinMix == 1 )
   \   00000008   2948               LDR.N    R0,??jmp_right_0  ;; BinMix
   \   0000000A   0078               LDRB     R0,[R0, #+0]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   08D1               BNE.N    ??jmp_right_1
    644              Str_Width = LEDPage1[page_num].Str_Width;
   \   00000010   40F66810           MOVW     R0,#+2408
   \   00000014   2749               LDR.N    R1,??jmp_right_0+0x4  ;; LEDPage1
   \   00000016   05FB0010           MLA      R0,R5,R0,R1
   \   0000001A   B0F90000           LDRSH    R0,[R0, #+0]
   \   0000001E   0700               MOVS     R7,R0
   \   00000020   07E0               B.N      ??jmp_right_2
    645            else
    646              Str_Width = LEDPage[page_num].Str_Width;      
   \                     ??jmp_right_1:
   \   00000022   4FF4CB70           MOV      R0,#+406
   \   00000026   2449               LDR.N    R1,??jmp_right_0+0x8  ;; LEDPage
   \   00000028   05FB0010           MLA      R0,R5,R0,R1
   \   0000002C   B0F90000           LDRSH    R0,[R0, #+0]
   \   00000030   0700               MOVS     R7,R0
    647            for(j=0,c=0;j < Str_Width;c++,j+=S_Bits){
   \                     ??jmp_right_2:
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   0400               MOVS     R4,R0
   \   00000036   0020               MOVS     R0,#+0
   \   00000038   0600               MOVS     R6,R0
   \                     ??jmp_right_3:
   \   0000003A   3FB2               SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   0000003C   BC42               CMP      R4,R7
   \   0000003E   33DA               BGE.N    ??jmp_right_4
    648              if ( BinMix == 1 )    
   \   00000040   1B48               LDR.N    R0,??jmp_right_0  ;; BinMix
   \   00000042   0078               LDRB     R0,[R0, #+0]
   \   00000044   0128               CMP      R0,#+1
   \   00000046   08D1               BNE.N    ??jmp_right_5
    649                S_Bits=LEDPage1[page_num].CharWidth[c];
   \   00000048   40F66810           MOVW     R0,#+2408
   \   0000004C   1949               LDR.N    R1,??jmp_right_0+0x4  ;; LEDPage1
   \   0000004E   05FB0010           MLA      R0,R5,R0,R1
   \   00000052   3018               ADDS     R0,R6,R0
   \   00000054   8078               LDRB     R0,[R0, #+2]
   \   00000056   8046               MOV      R8,R0
   \   00000058   07E0               B.N      ??jmp_right_6
    650              else
    651                S_Bits=LEDPage[page_num].CharWidth[c];
   \                     ??jmp_right_5:
   \   0000005A   4FF4CB70           MOV      R0,#+406
   \   0000005E   1649               LDR.N    R1,??jmp_right_0+0x8  ;; LEDPage
   \   00000060   05FB0010           MLA      R0,R5,R0,R1
   \   00000064   3018               ADDS     R0,R6,R0
   \   00000066   8078               LDRB     R0,[R0, #+2]
   \   00000068   8046               MOV      R8,R0
    652              Get_ImgBitsPage(Backup.COM,value,j,S_Bits);
   \                     ??jmp_right_6:
   \   0000006A   4346               MOV      R3,R8
   \   0000006C   2200               MOVS     R2,R4
   \   0000006E   00A9               ADD      R1,SP,#+0
   \   00000070   1248               LDR.N    R0,??jmp_right_0+0xC  ;; Backup
   \   00000072   ........           BL       Get_ImgBitsPage
    653              Put_ImgBitsPage(LED_buffer.COM,value,j,S_Bits);
   \   00000076   4346               MOV      R3,R8
   \   00000078   2200               MOVS     R2,R4
   \   0000007A   00A9               ADD      R1,SP,#+0
   \   0000007C   1048               LDR.N    R0,??jmp_right_0+0x10  ;; LED_buffer
   \   0000007E   ........           BL       Put_ImgBitsPage
    654               
    655              LED_change = 1 ;
   \   00000082   1048               LDR.N    R0,??jmp_right_0+0x14  ;; LED_change
   \   00000084   0121               MOVS     R1,#+1
   \   00000086   0170               STRB     R1,[R0, #+0]
    656              while( LED_change == 1 );
   \                     ??jmp_right_7:
   \   00000088   0E48               LDR.N    R0,??jmp_right_0+0x14  ;; LED_change
   \   0000008A   0078               LDRB     R0,[R0, #+0]
   \   0000008C   0128               CMP      R0,#+1
   \   0000008E   FBD0               BEQ.N    ??jmp_right_7
    657              if (RecProcessing != 0 ) return ;        
   \   00000090   0D48               LDR.N    R0,??jmp_right_0+0x18  ;; RecProcessing
   \   00000092   0078               LDRB     R0,[R0, #+0]
   \   00000094   0028               CMP      R0,#+0
   \   00000096   07D1               BNE.N    ??jmp_right_4
    658              dly_ms(300);      
   \   00000098   4FF49670           MOV      R0,#+300
   \   0000009C   ........           BL       dly_ms
    659            }
   \   000000A0   761C               ADDS     R6,R6,#+1
   \   000000A2   18EB0404           ADDS     R4,R8,R4
   \   000000A6   C8E7               B.N      ??jmp_right_3
   \                     ??jmp_right_4:
   \   000000A8   08B0               ADD      SP,SP,#+32
   \   000000AA   BDE8F081           POP      {R4-R8,PC}       ;; return
   \   000000AE   00BF               Nop      
   \                     ??jmp_right_0:
   \   000000B0   ........           DC32     BinMix
   \   000000B4   ........           DC32     LEDPage1
   \   000000B8   ........           DC32     LEDPage
   \   000000BC   ........           DC32     Backup
   \   000000C0   ........           DC32     LED_buffer
   \   000000C4   ........           DC32     LED_change
   \   000000C8   ........           DC32     RecProcessing
    660          }
    661          
    662          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    663          void jmp_right_Out(int page_num) //跳出
    664          {
   \                     jmp_right_Out:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   89B0               SUB      SP,SP,#+36
   \   00000004   0500               MOVS     R5,R0
    665            int j,c;
    666            unsigned short value[16];
    667            int S_Bits;//一次傳送的水平位元數  
    668            memset(value,'\0',sizeof(value)); 
   \   00000006   2022               MOVS     R2,#+32
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   00A8               ADD      R0,SP,#+0
   \   0000000C   ........           BL       memset
    669            for(j=0,c=0;j < LEDPage[page_num].Str_Width;c++,j+=S_Bits){
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   0600               MOVS     R6,R0
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   0700               MOVS     R7,R0
   \                     ??jmp_right_Out_0:
   \   00000018   4FF4CB70           MOV      R0,#+406
   \   0000001C   1449               LDR.N    R1,??jmp_right_Out_1  ;; LEDPage
   \   0000001E   05FB0010           MLA      R0,R5,R0,R1
   \   00000022   B0F90000           LDRSH    R0,[R0, #+0]
   \   00000026   8642               CMP      R6,R0
   \   00000028   1FDA               BGE.N    ??jmp_right_Out_2
    670              S_Bits=LEDPage[page_num].CharWidth[c];
   \   0000002A   4FF4CB70           MOV      R0,#+406
   \   0000002E   1049               LDR.N    R1,??jmp_right_Out_1  ;; LEDPage
   \   00000030   05FB0010           MLA      R0,R5,R0,R1
   \   00000034   3818               ADDS     R0,R7,R0
   \   00000036   8078               LDRB     R0,[R0, #+2]
   \   00000038   0400               MOVS     R4,R0
    671              Put_ImgBitsPage(LED_buffer.COM,value,j,S_Bits);
   \   0000003A   2300               MOVS     R3,R4
   \   0000003C   3200               MOVS     R2,R6
   \   0000003E   00A9               ADD      R1,SP,#+0
   \   00000040   0C48               LDR.N    R0,??jmp_right_Out_1+0x4  ;; LED_buffer
   \   00000042   ........           BL       Put_ImgBitsPage
    672              
    673              LED_change = 1 ;
   \   00000046   0C48               LDR.N    R0,??jmp_right_Out_1+0x8  ;; LED_change
   \   00000048   0121               MOVS     R1,#+1
   \   0000004A   0170               STRB     R1,[R0, #+0]
    674              while( LED_change == 1 );
   \                     ??jmp_right_Out_3:
   \   0000004C   0A48               LDR.N    R0,??jmp_right_Out_1+0x8  ;; LED_change
   \   0000004E   0078               LDRB     R0,[R0, #+0]
   \   00000050   0128               CMP      R0,#+1
   \   00000052   FBD0               BEQ.N    ??jmp_right_Out_3
    675              if (RecProcessing != 0 ) return ;        
   \   00000054   0948               LDR.N    R0,??jmp_right_Out_1+0xC  ;; RecProcessing
   \   00000056   0078               LDRB     R0,[R0, #+0]
   \   00000058   0028               CMP      R0,#+0
   \   0000005A   06D1               BNE.N    ??jmp_right_Out_2
    676              dly_ms(300);      
   \   0000005C   4FF49670           MOV      R0,#+300
   \   00000060   ........           BL       dly_ms
    677            }
   \   00000064   7F1C               ADDS     R7,R7,#+1
   \   00000066   A619               ADDS     R6,R4,R6
   \   00000068   D6E7               B.N      ??jmp_right_Out_0
   \                     ??jmp_right_Out_2:
   \   0000006A   09B0               ADD      SP,SP,#+36
   \   0000006C   F0BD               POP      {R4-R7,PC}       ;; return
   \   0000006E   00BF               Nop      
   \                     ??jmp_right_Out_1:
   \   00000070   ........           DC32     LEDPage
   \   00000074   ........           DC32     LED_buffer
   \   00000078   ........           DC32     LED_change
   \   0000007C   ........           DC32     RecProcessing
    678          }
    679          
    680          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    681          void jmp_right_Out_str(void) //字串跳出
    682          {
   \                     jmp_right_Out_str:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   88B0               SUB      SP,SP,#+32
    683            int j,c;
    684            unsigned short value[16];
    685            int S_Bits=8;//一次傳送的水平位元數  
   \   00000004   0820               MOVS     R0,#+8
   \   00000006   0400               MOVS     R4,R0
    686            memset(value,'\0',sizeof(value)); 
   \   00000008   2022               MOVS     R2,#+32
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   00A8               ADD      R0,SP,#+0
   \   0000000E   ........           BL       memset
    687            for( j = 0 , c = 0 ; j < ( last_str_width * S_Bits ) ; c++ , j += S_Bits ){
   \   00000012   0020               MOVS     R0,#+0
   \   00000014   0500               MOVS     R5,R0
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   0600               MOVS     R6,R0
   \                     ??jmp_right_Out_str_0:
   \   0000001A   1048               LDR.N    R0,??jmp_right_Out_str_1  ;; last_str_width
   \   0000001C   0078               LDRB     R0,[R0, #+0]
   \   0000001E   00FB04F0           MUL      R0,R0,R4
   \   00000022   8542               CMP      R5,R0
   \   00000024   17DA               BGE.N    ??jmp_right_Out_str_2
    688              Put_ImgBitsPage(LED_buffer.COM,value,j,S_Bits);    
   \   00000026   2300               MOVS     R3,R4
   \   00000028   2A00               MOVS     R2,R5
   \   0000002A   00A9               ADD      R1,SP,#+0
   \   0000002C   0C48               LDR.N    R0,??jmp_right_Out_str_1+0x4  ;; LED_buffer
   \   0000002E   ........           BL       Put_ImgBitsPage
    689              LED_change = 1 ;
   \   00000032   0C48               LDR.N    R0,??jmp_right_Out_str_1+0x8  ;; LED_change
   \   00000034   0121               MOVS     R1,#+1
   \   00000036   0170               STRB     R1,[R0, #+0]
    690              while( LED_change == 1 );
   \                     ??jmp_right_Out_str_3:
   \   00000038   0A48               LDR.N    R0,??jmp_right_Out_str_1+0x8  ;; LED_change
   \   0000003A   0078               LDRB     R0,[R0, #+0]
   \   0000003C   0128               CMP      R0,#+1
   \   0000003E   FBD0               BEQ.N    ??jmp_right_Out_str_3
    691              if (RecProcessing != 0 ) return ;        
   \   00000040   0948               LDR.N    R0,??jmp_right_Out_str_1+0xC  ;; RecProcessing
   \   00000042   0078               LDRB     R0,[R0, #+0]
   \   00000044   0028               CMP      R0,#+0
   \   00000046   06D1               BNE.N    ??jmp_right_Out_str_2
    692              dly_ms(300);      
   \   00000048   4FF49670           MOV      R0,#+300
   \   0000004C   ........           BL       dly_ms
    693            }
   \   00000050   761C               ADDS     R6,R6,#+1
   \   00000052   6519               ADDS     R5,R4,R5
   \   00000054   E1E7               B.N      ??jmp_right_Out_str_0
   \                     ??jmp_right_Out_str_2:
   \   00000056   08B0               ADD      SP,SP,#+32
   \   00000058   70BD               POP      {R4-R6,PC}       ;; return
   \   0000005A   00BF               Nop      
   \                     ??jmp_right_Out_str_1:
   \   0000005C   ........           DC32     last_str_width
   \   00000060   ........           DC32     LED_buffer
   \   00000064   ........           DC32     LED_change
   \   00000068   ........           DC32     RecProcessing
    694          }
    695          
    696          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    697          void over_down(void) //覆蓋向下
    698          {
   \                     over_down:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    699            int i,j;
    700            for( i = 0 ; i < 16 ; i++ ){
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0400               MOVS     R4,R0
   \                     ??over_down_0:
   \   00000006   102C               CMP      R4,#+16
   \   00000008   29DA               BGE.N    ??over_down_1
    701              for( j = 0 ; j < LED_byte_Length ; j++ ){
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   0500               MOVS     R5,R0
   \                     ??over_down_2:
   \   0000000E   0A2D               CMP      R5,#+10
   \   00000010   15DA               BGE.N    ??over_down_3
    702                LED_buffer.COM[i][j]=Backup.COM[i][j];
   \   00000012   0A20               MOVS     R0,#+10
   \   00000014   1249               LDR.N    R1,??over_down_4  ;; LED_buffer
   \   00000016   04FB0010           MLA      R0,R4,R0,R1
   \   0000001A   0A21               MOVS     R1,#+10
   \   0000001C   114A               LDR.N    R2,??over_down_4+0x4  ;; Backup
   \   0000001E   04FB0121           MLA      R1,R4,R1,R2
   \   00000022   695C               LDRB     R1,[R5, R1]
   \   00000024   2954               STRB     R1,[R5, R0]
    703                LED_bufferG.COM[i][j]=BackupG.COM[i][j];
   \   00000026   0A20               MOVS     R0,#+10
   \   00000028   0F49               LDR.N    R1,??over_down_4+0x8  ;; LED_bufferG
   \   0000002A   04FB0010           MLA      R0,R4,R0,R1
   \   0000002E   0A21               MOVS     R1,#+10
   \   00000030   0E4A               LDR.N    R2,??over_down_4+0xC  ;; BackupG
   \   00000032   04FB0121           MLA      R1,R4,R1,R2
   \   00000036   695C               LDRB     R1,[R5, R1]
   \   00000038   2954               STRB     R1,[R5, R0]
    704              }
   \   0000003A   6D1C               ADDS     R5,R5,#+1
   \   0000003C   E7E7               B.N      ??over_down_2
    705              LED_change = 1 ;
   \                     ??over_down_3:
   \   0000003E   0C48               LDR.N    R0,??over_down_4+0x10  ;; LED_change
   \   00000040   0121               MOVS     R1,#+1
   \   00000042   0170               STRB     R1,[R0, #+0]
    706              while( LED_change == 1 );
   \                     ??over_down_5:
   \   00000044   0A48               LDR.N    R0,??over_down_4+0x10  ;; LED_change
   \   00000046   0078               LDRB     R0,[R0, #+0]
   \   00000048   0128               CMP      R0,#+1
   \   0000004A   FBD0               BEQ.N    ??over_down_5
    707              if (RecProcessing != 0 ) return ;        
   \   0000004C   0948               LDR.N    R0,??over_down_4+0x14  ;; RecProcessing
   \   0000004E   0078               LDRB     R0,[R0, #+0]
   \   00000050   0028               CMP      R0,#+0
   \   00000052   04D1               BNE.N    ??over_down_1
    708              dly_ms(50);           
   \   00000054   3220               MOVS     R0,#+50
   \   00000056   ........           BL       dly_ms
    709            }  
   \   0000005A   641C               ADDS     R4,R4,#+1
   \   0000005C   D3E7               B.N      ??over_down_0
   \                     ??over_down_1:
   \   0000005E   31BD               POP      {R0,R4,R5,PC}    ;; return
   \                     ??over_down_4:
   \   00000060   ........           DC32     LED_buffer
   \   00000064   ........           DC32     Backup
   \   00000068   ........           DC32     LED_bufferG
   \   0000006C   ........           DC32     BackupG
   \   00000070   ........           DC32     LED_change
   \   00000074   ........           DC32     RecProcessing
    710          }
    711          
    712          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    713          void over_down_Out(void) //覆蓋向下後功能
    714          {
   \                     over_down_Out:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    715            int i,j;
    716            for( i = 0 ; i < 16 ; i++ ){
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0400               MOVS     R4,R0
   \                     ??over_down_Out_0:
   \   00000006   102C               CMP      R4,#+16
   \   00000008   21DA               BGE.N    ??over_down_Out_1
    717              for( j = 0 ; j < LED_byte_Length ; j++ ){
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   0500               MOVS     R5,R0
   \                     ??over_down_Out_2:
   \   0000000E   0A2D               CMP      R5,#+10
   \   00000010   0DDA               BGE.N    ??over_down_Out_3
    718                LED_buffer.COM[i][j]='\0';
   \   00000012   0A20               MOVS     R0,#+10
   \   00000014   0E49               LDR.N    R1,??over_down_Out_4  ;; LED_buffer
   \   00000016   04FB0010           MLA      R0,R4,R0,R1
   \   0000001A   0021               MOVS     R1,#+0
   \   0000001C   2954               STRB     R1,[R5, R0]
    719                LED_bufferG.COM[i][j]='\0';
   \   0000001E   0A20               MOVS     R0,#+10
   \   00000020   0C49               LDR.N    R1,??over_down_Out_4+0x4  ;; LED_bufferG
   \   00000022   04FB0010           MLA      R0,R4,R0,R1
   \   00000026   0021               MOVS     R1,#+0
   \   00000028   2954               STRB     R1,[R5, R0]
    720              } 
   \   0000002A   6D1C               ADDS     R5,R5,#+1
   \   0000002C   EFE7               B.N      ??over_down_Out_2
    721              LED_change = 1 ;
   \                     ??over_down_Out_3:
   \   0000002E   0A48               LDR.N    R0,??over_down_Out_4+0x8  ;; LED_change
   \   00000030   0121               MOVS     R1,#+1
   \   00000032   0170               STRB     R1,[R0, #+0]
    722              while( LED_change == 1 );
   \                     ??over_down_Out_5:
   \   00000034   0848               LDR.N    R0,??over_down_Out_4+0x8  ;; LED_change
   \   00000036   0078               LDRB     R0,[R0, #+0]
   \   00000038   0128               CMP      R0,#+1
   \   0000003A   FBD0               BEQ.N    ??over_down_Out_5
    723              if (RecProcessing != 0 ) return ;         
   \   0000003C   0748               LDR.N    R0,??over_down_Out_4+0xC  ;; RecProcessing
   \   0000003E   0078               LDRB     R0,[R0, #+0]
   \   00000040   0028               CMP      R0,#+0
   \   00000042   04D1               BNE.N    ??over_down_Out_1
    724              dly_ms(50);           
   \   00000044   3220               MOVS     R0,#+50
   \   00000046   ........           BL       dly_ms
    725            }  
   \   0000004A   641C               ADDS     R4,R4,#+1
   \   0000004C   DBE7               B.N      ??over_down_Out_0
   \                     ??over_down_Out_1:
   \   0000004E   31BD               POP      {R0,R4,R5,PC}    ;; return
   \                     ??over_down_Out_4:
   \   00000050   ........           DC32     LED_buffer
   \   00000054   ........           DC32     LED_bufferG
   \   00000058   ........           DC32     LED_change
   \   0000005C   ........           DC32     RecProcessing
    726          }
    727          
    728          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    729          void over_right(void) //覆蓋向右
    730          {
   \                     over_right:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
    731            int i,j,k;
    732            unsigned char bitmask;
    733            for( j = 0 ; j < LED_byte_Length ; j++ )
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0500               MOVS     R5,R0
   \                     ??over_right_0:
   \   00000006   0A2D               CMP      R5,#+10
   \   00000008   5ADA               BGE.N    ??over_right_1
    734              for( k = 0,bitmask = 0x80 ; k < 8 ; k++,bitmask >>= 1 ){
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   0600               MOVS     R6,R0
   \   0000000E   8020               MOVS     R0,#+128
   \   00000010   0700               MOVS     R7,R0
   \                     ??over_right_2:
   \   00000012   082E               CMP      R6,#+8
   \   00000014   52DA               BGE.N    ??over_right_3
    735                for( i = 0 ; i < 16 ; i++ ){
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   0400               MOVS     R4,R0
   \                     ??over_right_4:
   \   0000001A   102C               CMP      R4,#+16
   \   0000001C   3BDA               BGE.N    ??over_right_5
    736                  LED_buffer.COM[i][j] &= (~bitmask);
   \   0000001E   0A20               MOVS     R0,#+10
   \   00000020   2849               LDR.N    R1,??over_right_6  ;; LED_buffer
   \   00000022   04FB0010           MLA      R0,R4,R0,R1
   \   00000026   285C               LDRB     R0,[R5, R0]
   \   00000028   F943               MVNS     R1,R7
   \   0000002A   0840               ANDS     R0,R1,R0
   \   0000002C   0A21               MOVS     R1,#+10
   \   0000002E   254A               LDR.N    R2,??over_right_6  ;; LED_buffer
   \   00000030   04FB0121           MLA      R1,R4,R1,R2
   \   00000034   6854               STRB     R0,[R5, R1]
    737                  LED_buffer.COM[i][j] |= (Backup.COM[i][j] & bitmask);
   \   00000036   0A20               MOVS     R0,#+10
   \   00000038   2249               LDR.N    R1,??over_right_6  ;; LED_buffer
   \   0000003A   04FB0010           MLA      R0,R4,R0,R1
   \   0000003E   285C               LDRB     R0,[R5, R0]
   \   00000040   0A21               MOVS     R1,#+10
   \   00000042   214A               LDR.N    R2,??over_right_6+0x4  ;; Backup
   \   00000044   04FB0121           MLA      R1,R4,R1,R2
   \   00000048   695C               LDRB     R1,[R5, R1]
   \   0000004A   3940               ANDS     R1,R7,R1
   \   0000004C   0843               ORRS     R0,R1,R0
   \   0000004E   0A21               MOVS     R1,#+10
   \   00000050   1C4A               LDR.N    R2,??over_right_6  ;; LED_buffer
   \   00000052   04FB0121           MLA      R1,R4,R1,R2
   \   00000056   6854               STRB     R0,[R5, R1]
    738                  LED_bufferG.COM[i][j] &= (~bitmask);
   \   00000058   0A20               MOVS     R0,#+10
   \   0000005A   1C49               LDR.N    R1,??over_right_6+0x8  ;; LED_bufferG
   \   0000005C   04FB0010           MLA      R0,R4,R0,R1
   \   00000060   285C               LDRB     R0,[R5, R0]
   \   00000062   F943               MVNS     R1,R7
   \   00000064   0840               ANDS     R0,R1,R0
   \   00000066   0A21               MOVS     R1,#+10
   \   00000068   184A               LDR.N    R2,??over_right_6+0x8  ;; LED_bufferG
   \   0000006A   04FB0121           MLA      R1,R4,R1,R2
   \   0000006E   6854               STRB     R0,[R5, R1]
    739                  LED_bufferG.COM[i][j] |= (BackupG.COM[i][j] & bitmask);        
   \   00000070   0A20               MOVS     R0,#+10
   \   00000072   1649               LDR.N    R1,??over_right_6+0x8  ;; LED_bufferG
   \   00000074   04FB0010           MLA      R0,R4,R0,R1
   \   00000078   285C               LDRB     R0,[R5, R0]
   \   0000007A   0A21               MOVS     R1,#+10
   \   0000007C   144A               LDR.N    R2,??over_right_6+0xC  ;; BackupG
   \   0000007E   04FB0121           MLA      R1,R4,R1,R2
   \   00000082   695C               LDRB     R1,[R5, R1]
   \   00000084   3940               ANDS     R1,R7,R1
   \   00000086   0843               ORRS     R0,R1,R0
   \   00000088   0A21               MOVS     R1,#+10
   \   0000008A   104A               LDR.N    R2,??over_right_6+0x8  ;; LED_bufferG
   \   0000008C   04FB0121           MLA      R1,R4,R1,R2
   \   00000090   6854               STRB     R0,[R5, R1]
    740                }      
   \   00000092   641C               ADDS     R4,R4,#+1
   \   00000094   C1E7               B.N      ??over_right_4
    741                LED_change = 1 ;
   \                     ??over_right_5:
   \   00000096   0F48               LDR.N    R0,??over_right_6+0x10  ;; LED_change
   \   00000098   0121               MOVS     R1,#+1
   \   0000009A   0170               STRB     R1,[R0, #+0]
    742                while( LED_change == 1 )
   \                     ??over_right_7:
   \   0000009C   0D48               LDR.N    R0,??over_right_6+0x10  ;; LED_change
   \   0000009E   0078               LDRB     R0,[R0, #+0]
   \   000000A0   0128               CMP      R0,#+1
   \   000000A2   04D1               BNE.N    ??over_right_8
    743                  if (RecProcessing==1 ) return ;          
   \   000000A4   0C48               LDR.N    R0,??over_right_6+0x14  ;; RecProcessing
   \   000000A6   0078               LDRB     R0,[R0, #+0]
   \   000000A8   0128               CMP      R0,#+1
   \   000000AA   F7D1               BNE.N    ??over_right_7
   \   000000AC   08E0               B.N      ??over_right_1
    744                dly_ms(30);          
   \                     ??over_right_8:
   \   000000AE   1E20               MOVS     R0,#+30
   \   000000B0   ........           BL       dly_ms
    745              }
   \   000000B4   761C               ADDS     R6,R6,#+1
   \   000000B6   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000B8   7F08               LSRS     R7,R7,#+1
   \   000000BA   AAE7               B.N      ??over_right_2
   \                     ??over_right_3:
   \   000000BC   6D1C               ADDS     R5,R5,#+1
   \   000000BE   A2E7               B.N      ??over_right_0
   \                     ??over_right_1:
   \   000000C0   F1BD               POP      {R0,R4-R7,PC}    ;; return
   \   000000C2   00BF               Nop      
   \                     ??over_right_6:
   \   000000C4   ........           DC32     LED_buffer
   \   000000C8   ........           DC32     Backup
   \   000000CC   ........           DC32     LED_bufferG
   \   000000D0   ........           DC32     BackupG
   \   000000D4   ........           DC32     LED_change
   \   000000D8   ........           DC32     RecProcessing
    746          }
    747          
    748          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    749          void over_right_Out(void) //覆蓋向右後功能
    750          {
   \                     over_right_Out:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
    751            int i,j,k;
    752            unsigned char bitmask;
    753            for( j = 0 ; j < LED_byte_Length ; j++ )
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0500               MOVS     R5,R0
   \                     ??over_right_Out_0:
   \   00000006   0A2D               CMP      R5,#+10
   \   00000008   37DA               BGE.N    ??over_right_Out_1
    754              for( k = 0,bitmask = 0x80 ; k < 8 ; k++,bitmask >>= 1 ){
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   0600               MOVS     R6,R0
   \   0000000E   8020               MOVS     R0,#+128
   \   00000010   0700               MOVS     R7,R0
   \                     ??over_right_Out_2:
   \   00000012   082E               CMP      R6,#+8
   \   00000014   2FDA               BGE.N    ??over_right_Out_3
    755                for( i = 0 ; i < 16 ; i++ ){
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   0400               MOVS     R4,R0
   \                     ??over_right_Out_4:
   \   0000001A   102C               CMP      R4,#+16
   \   0000001C   19DA               BGE.N    ??over_right_Out_5
    756                  LED_buffer.COM[i][j] &=  (~bitmask);
   \   0000001E   0A20               MOVS     R0,#+10
   \   00000020   1649               LDR.N    R1,??over_right_Out_6  ;; LED_buffer
   \   00000022   04FB0010           MLA      R0,R4,R0,R1
   \   00000026   285C               LDRB     R0,[R5, R0]
   \   00000028   F943               MVNS     R1,R7
   \   0000002A   0840               ANDS     R0,R1,R0
   \   0000002C   0A21               MOVS     R1,#+10
   \   0000002E   134A               LDR.N    R2,??over_right_Out_6  ;; LED_buffer
   \   00000030   04FB0121           MLA      R1,R4,R1,R2
   \   00000034   6854               STRB     R0,[R5, R1]
    757                  LED_bufferG.COM[i][j] &=  (~bitmask);        
   \   00000036   0A20               MOVS     R0,#+10
   \   00000038   1149               LDR.N    R1,??over_right_Out_6+0x4  ;; LED_bufferG
   \   0000003A   04FB0010           MLA      R0,R4,R0,R1
   \   0000003E   285C               LDRB     R0,[R5, R0]
   \   00000040   F943               MVNS     R1,R7
   \   00000042   0840               ANDS     R0,R1,R0
   \   00000044   0A21               MOVS     R1,#+10
   \   00000046   0E4A               LDR.N    R2,??over_right_Out_6+0x4  ;; LED_bufferG
   \   00000048   04FB0121           MLA      R1,R4,R1,R2
   \   0000004C   6854               STRB     R0,[R5, R1]
    758                } 
   \   0000004E   641C               ADDS     R4,R4,#+1
   \   00000050   E3E7               B.N      ??over_right_Out_4
    759                LED_change = 1 ;
   \                     ??over_right_Out_5:
   \   00000052   0C48               LDR.N    R0,??over_right_Out_6+0x8  ;; LED_change
   \   00000054   0121               MOVS     R1,#+1
   \   00000056   0170               STRB     R1,[R0, #+0]
    760                while( LED_change == 1 );
   \                     ??over_right_Out_7:
   \   00000058   0A48               LDR.N    R0,??over_right_Out_6+0x8  ;; LED_change
   \   0000005A   0078               LDRB     R0,[R0, #+0]
   \   0000005C   0128               CMP      R0,#+1
   \   0000005E   FBD0               BEQ.N    ??over_right_Out_7
    761                if (RecProcessing != 0 ) return;        
   \   00000060   0948               LDR.N    R0,??over_right_Out_6+0xC  ;; RecProcessing
   \   00000062   0078               LDRB     R0,[R0, #+0]
   \   00000064   0028               CMP      R0,#+0
   \   00000066   08D1               BNE.N    ??over_right_Out_1
    762                dly_ms(30);          
   \   00000068   1E20               MOVS     R0,#+30
   \   0000006A   ........           BL       dly_ms
    763              }
   \   0000006E   761C               ADDS     R6,R6,#+1
   \   00000070   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000072   7F08               LSRS     R7,R7,#+1
   \   00000074   CDE7               B.N      ??over_right_Out_2
   \                     ??over_right_Out_3:
   \   00000076   6D1C               ADDS     R5,R5,#+1
   \   00000078   C5E7               B.N      ??over_right_Out_0
   \                     ??over_right_Out_1:
   \   0000007A   F1BD               POP      {R0,R4-R7,PC}    ;; return
   \                     ??over_right_Out_6:
   \   0000007C   ........           DC32     LED_buffer
   \   00000080   ........           DC32     LED_bufferG
   \   00000084   ........           DC32     LED_change
   \   00000088   ........           DC32     RecProcessing
    764          }
    765          
    766          //#pragma optimize=none
    767          static void inverse_buf(unsigned char buf[16][LED_byte_Length])
                             ^
Warning[Pe177]: function "inverse_buf" was declared but never referenced
    768          {
    769            int i,j;
    770            for(i=0;i<16;i++)
    771              for(j=0;j<LED_byte_Length;j++){
    772                buf[i][j]=~buf[i][j];
    773              }  
    774          }
    775          
    776          #pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    777          void flash_Out(void)
    778          {
   \                     flash_Out:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
    779            int i,j,k,l;
    780            unsigned char bitmask;
    781            memcpy(Backup.COM,LED_buffer.COM,sizeof(Backup.COM));
   \   00000004   A022               MOVS     R2,#+160
   \   00000006   6849               LDR.N    R1,??flash_Out_0  ;; LED_buffer
   \   00000008   6848               LDR.N    R0,??flash_Out_0+0x4  ;; Backup
   \   0000000A   ........           BL       memcpy
    782            memcpy(BackupG.COM,LED_bufferG.COM,sizeof(BackupG.COM));
   \   0000000E   A022               MOVS     R2,#+160
   \   00000010   6749               LDR.N    R1,??flash_Out_0+0x8  ;; LED_bufferG
   \   00000012   6848               LDR.N    R0,??flash_Out_0+0xC  ;; BackupG
   \   00000014   ........           BL       memcpy
    783            unsigned char color;
    784            if ( PTopIndex != -1 )
   \   00000018   6748               LDR.N    R0,??flash_Out_0+0x10  ;; PTopIndex
   \   0000001A   0068               LDR      R0,[R0, #+0]
   \   0000001C   5FF0FF31           MOVS     R1,#-1
   \   00000020   8842               CMP      R0,R1
   \   00000022   03D0               BEQ.N    ??flash_Out_1
    785              color = pcolor_flag;
   \   00000024   6548               LDR.N    R0,??flash_Out_0+0x14  ;; pcolor_flag
   \   00000026   0078               LDRB     R0,[R0, #+0]
   \   00000028   8046               MOV      R8,R0
   \   0000002A   02E0               B.N      ??flash_Out_2
    786            else
    787              color = color_flag;  
   \                     ??flash_Out_1:
   \   0000002C   6448               LDR.N    R0,??flash_Out_0+0x18  ;; color_flag
   \   0000002E   0078               LDRB     R0,[R0, #+0]
   \   00000030   8046               MOV      R8,R0
    788            for(i=0;i<6;i++){
   \                     ??flash_Out_2:
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   8146               MOV      R9,R0
   \                     ??flash_Out_3:
   \   00000036   B9F1060F           CMP      R9,#+6
   \   0000003A   80F2B380           BGE.W    ??flash_Out_4
    789              if (i==5)
   \   0000003E   B9F1050F           CMP      R9,#+5
   \   00000042   16D1               BNE.N    ??flash_Out_5
    790              //memset(LED_buffer.COM,'\0',sizeof(LED_buffer.COM));
    791              {
    792                 Dest_Adr=(unsigned char *)LED_buffer.COM;
   \   00000044   5F48               LDR.N    R0,??flash_Out_0+0x1C  ;; Dest_Adr
   \   00000046   5849               LDR.N    R1,??flash_Out_0  ;; LED_buffer
   \   00000048   0160               STR      R1,[R0, #+0]
    793                 Data_Len=sizeof(LED_buffer.COM);
   \   0000004A   5F48               LDR.N    R0,??flash_Out_0+0x20  ;; Data_Len
   \   0000004C   A021               MOVS     R1,#+160
   \   0000004E   0160               STR      R1,[R0, #+0]
    794                 Dest_data=0;
   \   00000050   5E48               LDR.N    R0,??flash_Out_0+0x24  ;; Dest_data
   \   00000052   0021               MOVS     R1,#+0
   \   00000054   0160               STR      R1,[R0, #+0]
    795                 data_set();
   \   00000056   ........           BL       data_set
    796                 Dest_Adr=(unsigned char *)LED_bufferG.COM;
   \   0000005A   5A48               LDR.N    R0,??flash_Out_0+0x1C  ;; Dest_Adr
   \   0000005C   5449               LDR.N    R1,??flash_Out_0+0x8  ;; LED_bufferG
   \   0000005E   0160               STR      R1,[R0, #+0]
    797                 Data_Len=sizeof(LED_bufferG.COM);
   \   00000060   5948               LDR.N    R0,??flash_Out_0+0x20  ;; Data_Len
   \   00000062   A021               MOVS     R1,#+160
   \   00000064   0160               STR      R1,[R0, #+0]
    798                 Dest_data=0;
   \   00000066   5948               LDR.N    R0,??flash_Out_0+0x24  ;; Dest_data
   \   00000068   0021               MOVS     R1,#+0
   \   0000006A   0160               STR      R1,[R0, #+0]
    799                 data_set();       
   \   0000006C   ........           BL       data_set
   \   00000070   86E0               B.N      ??flash_Out_6
    800              }
    801              else{
    802                if ( i % 2 != 0 ){
   \                     ??flash_Out_5:
   \   00000072   0220               MOVS     R0,#+2
   \   00000074   99FBF0F1           SDIV     R1,R9,R0
   \   00000078   01FB1091           MLS      R1,R1,R0,R9
   \   0000007C   0029               CMP      R1,#+0
   \   0000007E   0AD0               BEQ.N    ??flash_Out_7
    803              	   memcpy(LED_buffer.COM,Backup.COM,sizeof(Backup.COM));
   \   00000080   A022               MOVS     R2,#+160
   \   00000082   4A49               LDR.N    R1,??flash_Out_0+0x4  ;; Backup
   \   00000084   4848               LDR.N    R0,??flash_Out_0  ;; LED_buffer
   \   00000086   ........           BL       memcpy
    804                   memcpy(LED_bufferG.COM,BackupG.COM,sizeof(BackupG.COM));
   \   0000008A   A022               MOVS     R2,#+160
   \   0000008C   4949               LDR.N    R1,??flash_Out_0+0xC  ;; BackupG
   \   0000008E   4848               LDR.N    R0,??flash_Out_0+0x8  ;; LED_bufferG
   \   00000090   ........           BL       memcpy
   \   00000094   74E0               B.N      ??flash_Out_6
    805                }else{
    806                  for(j=0;j<16;j++){
   \                     ??flash_Out_7:
   \   00000096   0020               MOVS     R0,#+0
   \   00000098   0400               MOVS     R4,R0
   \                     ??flash_Out_8:
   \   0000009A   102C               CMP      R4,#+16
   \   0000009C   70DA               BGE.N    ??flash_Out_6
    807                    for(k=0;k<LED_byte_Length;k++){
   \   0000009E   0020               MOVS     R0,#+0
   \   000000A0   0500               MOVS     R5,R0
   \                     ??flash_Out_9:
   \   000000A2   0A2D               CMP      R5,#+10
   \   000000A4   6ADA               BGE.N    ??flash_Out_10
    808                      for( l = 0,bitmask = 0x80 ; l < 8 ; l++,bitmask >>= 1 ){
   \   000000A6   0020               MOVS     R0,#+0
   \   000000A8   0600               MOVS     R6,R0
   \   000000AA   8020               MOVS     R0,#+128
   \   000000AC   0700               MOVS     R7,R0
   \                     ??flash_Out_11:
   \   000000AE   082E               CMP      R6,#+8
   \   000000B0   62DA               BGE.N    ??flash_Out_12
    809                        if (  ( LED_buffer.COM[j][k] & bitmask ) || ( LED_bufferG.COM[j][k] & bitmask) ){
   \   000000B2   0A20               MOVS     R0,#+10
   \   000000B4   3C49               LDR.N    R1,??flash_Out_0  ;; LED_buffer
   \   000000B6   04FB0010           MLA      R0,R4,R0,R1
   \   000000BA   285C               LDRB     R0,[R5, R0]
   \   000000BC   3842               TST      R0,R7
   \   000000BE   06D1               BNE.N    ??flash_Out_13
   \   000000C0   0A20               MOVS     R0,#+10
   \   000000C2   3B49               LDR.N    R1,??flash_Out_0+0x8  ;; LED_bufferG
   \   000000C4   04FB0010           MLA      R0,R4,R0,R1
   \   000000C8   285C               LDRB     R0,[R5, R0]
   \   000000CA   3842               TST      R0,R7
   \   000000CC   18D0               BEQ.N    ??flash_Out_14
    810                           LED_buffer.COM[j][k] &=  (~bitmask);
   \                     ??flash_Out_13:
   \   000000CE   0A20               MOVS     R0,#+10
   \   000000D0   3549               LDR.N    R1,??flash_Out_0  ;; LED_buffer
   \   000000D2   04FB0010           MLA      R0,R4,R0,R1
   \   000000D6   285C               LDRB     R0,[R5, R0]
   \   000000D8   F943               MVNS     R1,R7
   \   000000DA   0840               ANDS     R0,R1,R0
   \   000000DC   0A21               MOVS     R1,#+10
   \   000000DE   324A               LDR.N    R2,??flash_Out_0  ;; LED_buffer
   \   000000E0   04FB0121           MLA      R1,R4,R1,R2
   \   000000E4   6854               STRB     R0,[R5, R1]
    811                           LED_bufferG.COM[j][k] &=  (~bitmask);
   \   000000E6   0A20               MOVS     R0,#+10
   \   000000E8   3149               LDR.N    R1,??flash_Out_0+0x8  ;; LED_bufferG
   \   000000EA   04FB0010           MLA      R0,R4,R0,R1
   \   000000EE   285C               LDRB     R0,[R5, R0]
   \   000000F0   F943               MVNS     R1,R7
   \   000000F2   0840               ANDS     R0,R1,R0
   \   000000F4   0A21               MOVS     R1,#+10
   \   000000F6   2E4A               LDR.N    R2,??flash_Out_0+0x8  ;; LED_bufferG
   \   000000F8   04FB0121           MLA      R1,R4,R1,R2
   \   000000FC   6854               STRB     R0,[R5, R1]
   \   000000FE   37E0               B.N      ??flash_Out_15
    812                        }else{
    813                          if ( color == 3 ){
   \                     ??flash_Out_14:
   \   00000100   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000104   B8F1030F           CMP      R8,#+3
   \   00000108   16D1               BNE.N    ??flash_Out_16
    814                            LED_buffer.COM[j][k] ^=  bitmask;
   \   0000010A   0A20               MOVS     R0,#+10
   \   0000010C   2649               LDR.N    R1,??flash_Out_0  ;; LED_buffer
   \   0000010E   04FB0010           MLA      R0,R4,R0,R1
   \   00000112   285C               LDRB     R0,[R5, R0]
   \   00000114   7840               EORS     R0,R7,R0
   \   00000116   0A21               MOVS     R1,#+10
   \   00000118   234A               LDR.N    R2,??flash_Out_0  ;; LED_buffer
   \   0000011A   04FB0121           MLA      R1,R4,R1,R2
   \   0000011E   6854               STRB     R0,[R5, R1]
    815                            LED_bufferG.COM[j][k] ^=  bitmask;
   \   00000120   0A20               MOVS     R0,#+10
   \   00000122   2349               LDR.N    R1,??flash_Out_0+0x8  ;; LED_bufferG
   \   00000124   04FB0010           MLA      R0,R4,R0,R1
   \   00000128   285C               LDRB     R0,[R5, R0]
   \   0000012A   7840               EORS     R0,R7,R0
   \   0000012C   0A21               MOVS     R1,#+10
   \   0000012E   204A               LDR.N    R2,??flash_Out_0+0x8  ;; LED_bufferG
   \   00000130   04FB0121           MLA      R1,R4,R1,R2
   \   00000134   6854               STRB     R0,[R5, R1]
   \   00000136   1BE0               B.N      ??flash_Out_15
    816                          }else if ( color == 2 )
   \                     ??flash_Out_16:
   \   00000138   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000013C   B8F1020F           CMP      R8,#+2
   \   00000140   0BD1               BNE.N    ??flash_Out_17
    817                            LED_bufferG.COM[j][k] ^=  bitmask;
   \   00000142   0A20               MOVS     R0,#+10
   \   00000144   1A49               LDR.N    R1,??flash_Out_0+0x8  ;; LED_bufferG
   \   00000146   04FB0010           MLA      R0,R4,R0,R1
   \   0000014A   285C               LDRB     R0,[R5, R0]
   \   0000014C   7840               EORS     R0,R7,R0
   \   0000014E   0A21               MOVS     R1,#+10
   \   00000150   174A               LDR.N    R2,??flash_Out_0+0x8  ;; LED_bufferG
   \   00000152   04FB0121           MLA      R1,R4,R1,R2
   \   00000156   6854               STRB     R0,[R5, R1]
   \   00000158   0AE0               B.N      ??flash_Out_15
    818                          else
    819                            LED_buffer.COM[j][k] ^=  bitmask;
   \                     ??flash_Out_17:
   \   0000015A   0A20               MOVS     R0,#+10
   \   0000015C   1249               LDR.N    R1,??flash_Out_0  ;; LED_buffer
   \   0000015E   04FB0010           MLA      R0,R4,R0,R1
   \   00000162   285C               LDRB     R0,[R5, R0]
   \   00000164   7840               EORS     R0,R7,R0
   \   00000166   0A21               MOVS     R1,#+10
   \   00000168   0F4A               LDR.N    R2,??flash_Out_0  ;; LED_buffer
   \   0000016A   04FB0121           MLA      R1,R4,R1,R2
   \   0000016E   6854               STRB     R0,[R5, R1]
    820                        }  
    821                      }  
   \                     ??flash_Out_15:
   \   00000170   761C               ADDS     R6,R6,#+1
   \   00000172   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000174   7F08               LSRS     R7,R7,#+1
   \   00000176   9AE7               B.N      ??flash_Out_11
    822                    }
   \                     ??flash_Out_12:
   \   00000178   6D1C               ADDS     R5,R5,#+1
   \   0000017A   92E7               B.N      ??flash_Out_9
    823                  }
   \                     ??flash_Out_10:
   \   0000017C   641C               ADDS     R4,R4,#+1
   \   0000017E   8CE7               B.N      ??flash_Out_8
    824                  //inverse_buf(LED_buffer.COM);
    825                  //inverse_buf(LED_bufferG.COM);
    826                }        
    827              }
    828              LED_change = 1 ;
   \                     ??flash_Out_6:
   \   00000180   1348               LDR.N    R0,??flash_Out_0+0x28  ;; LED_change
   \   00000182   0121               MOVS     R1,#+1
   \   00000184   0170               STRB     R1,[R0, #+0]
    829              while( LED_change == 1 ); 
   \                     ??flash_Out_18:
   \   00000186   1248               LDR.N    R0,??flash_Out_0+0x28  ;; LED_change
   \   00000188   0078               LDRB     R0,[R0, #+0]
   \   0000018A   0128               CMP      R0,#+1
   \   0000018C   FBD0               BEQ.N    ??flash_Out_18
    830              if (RecProcessing != 0 ) return ;         
   \   0000018E   1148               LDR.N    R0,??flash_Out_0+0x2C  ;; RecProcessing
   \   00000190   0078               LDRB     R0,[R0, #+0]
   \   00000192   0028               CMP      R0,#+0
   \   00000194   06D1               BNE.N    ??flash_Out_4
    831              dly_ms(500);              
   \   00000196   4FF4FA70           MOV      R0,#+500
   \   0000019A   ........           BL       dly_ms
    832            }
   \   0000019E   19F10109           ADDS     R9,R9,#+1
   \   000001A2   48E7               B.N      ??flash_Out_3
   \                     ??flash_Out_4:
   \   000001A4   BDE8F183           POP      {R0,R4-R9,PC}    ;; return
   \                     ??flash_Out_0:
   \   000001A8   ........           DC32     LED_buffer
   \   000001AC   ........           DC32     Backup
   \   000001B0   ........           DC32     LED_bufferG
   \   000001B4   ........           DC32     BackupG
   \   000001B8   ........           DC32     PTopIndex
   \   000001BC   ........           DC32     pcolor_flag
   \   000001C0   ........           DC32     color_flag
   \   000001C4   ........           DC32     Dest_Adr
   \   000001C8   ........           DC32     Data_Len
   \   000001CC   ........           DC32     Dest_data
   \   000001D0   ........           DC32     LED_change
   \   000001D4   ........           DC32     RecProcessing
    833          }
    834          
    835          #pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    836          void flash_NormalOut(void)
    837          {
   \                     flash_NormalOut:
   \   00000000   10B5               PUSH     {R4,LR}
    838            int i;
    839            Sour_Adr=(unsigned char *)LED_buffer.COM;
   \   00000002   2A48               LDR.N    R0,??flash_NormalOut_0  ;; Sour_Adr
   \   00000004   2A49               LDR.N    R1,??flash_NormalOut_0+0x4  ;; LED_buffer
   \   00000006   0160               STR      R1,[R0, #+0]
    840            Dest_Adr=(unsigned char *)Backup.COM;
   \   00000008   2A48               LDR.N    R0,??flash_NormalOut_0+0x8  ;; Dest_Adr
   \   0000000A   2B49               LDR.N    R1,??flash_NormalOut_0+0xC  ;; Backup
   \   0000000C   0160               STR      R1,[R0, #+0]
    841            Data_Len=LED_byte_Length*16;
   \   0000000E   2B48               LDR.N    R0,??flash_NormalOut_0+0x10  ;; Data_Len
   \   00000010   A021               MOVS     R1,#+160
   \   00000012   0160               STR      R1,[R0, #+0]
    842            data_copyF();
   \   00000014   ........           BL       data_copyF
    843            for(i=0;i<=6;i++){
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   0400               MOVS     R4,R0
   \                     ??flash_NormalOut_1:
   \   0000001C   072C               CMP      R4,#+7
   \   0000001E   44DA               BGE.N    ??flash_NormalOut_2
    844              if ((i%2)==0)
   \   00000020   0220               MOVS     R0,#+2
   \   00000022   94FBF0F1           SDIV     R1,R4,R0
   \   00000026   01FB1041           MLS      R1,R1,R0,R4
   \   0000002A   0029               CMP      R1,#+0
   \   0000002C   16D1               BNE.N    ??flash_NormalOut_3
    845              //memset(LED_buffer.COM,'\0',sizeof(LED_buffer.COM));
    846              {
    847                 Dest_Adr=(unsigned char *)LED_buffer.COM;
   \   0000002E   2148               LDR.N    R0,??flash_NormalOut_0+0x8  ;; Dest_Adr
   \   00000030   1F49               LDR.N    R1,??flash_NormalOut_0+0x4  ;; LED_buffer
   \   00000032   0160               STR      R1,[R0, #+0]
    848                 Data_Len=sizeof(LED_buffer.COM);
   \   00000034   2148               LDR.N    R0,??flash_NormalOut_0+0x10  ;; Data_Len
   \   00000036   A021               MOVS     R1,#+160
   \   00000038   0160               STR      R1,[R0, #+0]
    849                 Dest_data=0;
   \   0000003A   2148               LDR.N    R0,??flash_NormalOut_0+0x14  ;; Dest_data
   \   0000003C   0021               MOVS     R1,#+0
   \   0000003E   0160               STR      R1,[R0, #+0]
    850                 data_set();
   \   00000040   ........           BL       data_set
    851                 
    852                 Dest_Adr=(unsigned char *)LED_bufferG.COM;
   \   00000044   1B48               LDR.N    R0,??flash_NormalOut_0+0x8  ;; Dest_Adr
   \   00000046   1F49               LDR.N    R1,??flash_NormalOut_0+0x18  ;; LED_bufferG
   \   00000048   0160               STR      R1,[R0, #+0]
    853                 Data_Len=sizeof(LED_bufferG.COM);
   \   0000004A   1C48               LDR.N    R0,??flash_NormalOut_0+0x10  ;; Data_Len
   \   0000004C   A021               MOVS     R1,#+160
   \   0000004E   0160               STR      R1,[R0, #+0]
    854                 Dest_data=0;
   \   00000050   1B48               LDR.N    R0,??flash_NormalOut_0+0x14  ;; Dest_data
   \   00000052   0021               MOVS     R1,#+0
   \   00000054   0160               STR      R1,[R0, #+0]
    855                 data_set();       
   \   00000056   ........           BL       data_set
   \   0000005A   15E0               B.N      ??flash_NormalOut_4
    856              }
    857              else{
    858                Dest_Adr=(unsigned char *)LED_buffer.COM;
   \                     ??flash_NormalOut_3:
   \   0000005C   1548               LDR.N    R0,??flash_NormalOut_0+0x8  ;; Dest_Adr
   \   0000005E   1449               LDR.N    R1,??flash_NormalOut_0+0x4  ;; LED_buffer
   \   00000060   0160               STR      R1,[R0, #+0]
    859                Sour_Adr=(unsigned char *)Backup.COM;
   \   00000062   1248               LDR.N    R0,??flash_NormalOut_0  ;; Sour_Adr
   \   00000064   1449               LDR.N    R1,??flash_NormalOut_0+0xC  ;; Backup
   \   00000066   0160               STR      R1,[R0, #+0]
    860                Data_Len=LED_byte_Length*16;
   \   00000068   1448               LDR.N    R0,??flash_NormalOut_0+0x10  ;; Data_Len
   \   0000006A   A021               MOVS     R1,#+160
   \   0000006C   0160               STR      R1,[R0, #+0]
    861                data_copyF();
   \   0000006E   ........           BL       data_copyF
    862                
    863                Dest_Adr=(unsigned char *)LED_bufferG.COM;
   \   00000072   1048               LDR.N    R0,??flash_NormalOut_0+0x8  ;; Dest_Adr
   \   00000074   1349               LDR.N    R1,??flash_NormalOut_0+0x18  ;; LED_bufferG
   \   00000076   0160               STR      R1,[R0, #+0]
    864                Sour_Adr=(unsigned char *)BackupG.COM;
   \   00000078   0C48               LDR.N    R0,??flash_NormalOut_0  ;; Sour_Adr
   \   0000007A   1349               LDR.N    R1,??flash_NormalOut_0+0x1C  ;; BackupG
   \   0000007C   0160               STR      R1,[R0, #+0]
    865                Data_Len=LED_byte_Length*16;
   \   0000007E   0F48               LDR.N    R0,??flash_NormalOut_0+0x10  ;; Data_Len
   \   00000080   A021               MOVS     R1,#+160
   \   00000082   0160               STR      R1,[R0, #+0]
    866                data_copyF();      
   \   00000084   ........           BL       data_copyF
    867              }       
    868              
    869              LED_change = 1 ;
   \                     ??flash_NormalOut_4:
   \   00000088   1048               LDR.N    R0,??flash_NormalOut_0+0x20  ;; LED_change
   \   0000008A   0121               MOVS     R1,#+1
   \   0000008C   0170               STRB     R1,[R0, #+0]
    870              while( LED_change == 1 ); 
   \                     ??flash_NormalOut_5:
   \   0000008E   0F48               LDR.N    R0,??flash_NormalOut_0+0x20  ;; LED_change
   \   00000090   0078               LDRB     R0,[R0, #+0]
   \   00000092   0128               CMP      R0,#+1
   \   00000094   FBD0               BEQ.N    ??flash_NormalOut_5
    871              if (RecProcessing != 0 ) return ;         
   \   00000096   0E48               LDR.N    R0,??flash_NormalOut_0+0x24  ;; RecProcessing
   \   00000098   0078               LDRB     R0,[R0, #+0]
   \   0000009A   0028               CMP      R0,#+0
   \   0000009C   05D1               BNE.N    ??flash_NormalOut_2
    872              dly_ms(500);              
   \   0000009E   4FF4FA70           MOV      R0,#+500
   \   000000A2   ........           BL       dly_ms
    873            }
   \   000000A6   641C               ADDS     R4,R4,#+1
   \   000000A8   B8E7               B.N      ??flash_NormalOut_1
   \                     ??flash_NormalOut_2:
   \   000000AA   10BD               POP      {R4,PC}          ;; return
   \                     ??flash_NormalOut_0:
   \   000000AC   ........           DC32     Sour_Adr
   \   000000B0   ........           DC32     LED_buffer
   \   000000B4   ........           DC32     Dest_Adr
   \   000000B8   ........           DC32     Backup
   \   000000BC   ........           DC32     Data_Len
   \   000000C0   ........           DC32     Dest_data
   \   000000C4   ........           DC32     LED_bufferG
   \   000000C8   ........           DC32     BackupG
   \   000000CC   ........           DC32     LED_change
   \   000000D0   ........           DC32     RecProcessing
    874          }
    875          
    876          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    877          void appear(void)
    878          {
   \                     appear:
   \   00000000   80B5               PUSH     {R7,LR}
    879              Dest_Adr=(unsigned char *)LED_buffer.COM;
   \   00000002   1348               LDR.N    R0,??appear_0    ;; Dest_Adr
   \   00000004   1349               LDR.N    R1,??appear_0+0x4  ;; LED_buffer
   \   00000006   0160               STR      R1,[R0, #+0]
    880              Sour_Adr=(unsigned char *)Backup.COM;
   \   00000008   1348               LDR.N    R0,??appear_0+0x8  ;; Sour_Adr
   \   0000000A   1449               LDR.N    R1,??appear_0+0xC  ;; Backup
   \   0000000C   0160               STR      R1,[R0, #+0]
    881              Data_Len=LED_byte_Length*16;
   \   0000000E   1448               LDR.N    R0,??appear_0+0x10  ;; Data_Len
   \   00000010   A021               MOVS     R1,#+160
   \   00000012   0160               STR      R1,[R0, #+0]
    882              data_copyF();
   \   00000014   ........           BL       data_copyF
    883              Dest_Adr=(unsigned char *)LED_bufferG.COM;
   \   00000018   0D48               LDR.N    R0,??appear_0    ;; Dest_Adr
   \   0000001A   1249               LDR.N    R1,??appear_0+0x14  ;; LED_bufferG
   \   0000001C   0160               STR      R1,[R0, #+0]
    884              Sour_Adr=(unsigned char *)BackupG.COM;
   \   0000001E   0E48               LDR.N    R0,??appear_0+0x8  ;; Sour_Adr
   \   00000020   1149               LDR.N    R1,??appear_0+0x18  ;; BackupG
   \   00000022   0160               STR      R1,[R0, #+0]
    885              Data_Len=LED_byte_Length*16;
   \   00000024   0E48               LDR.N    R0,??appear_0+0x10  ;; Data_Len
   \   00000026   A021               MOVS     R1,#+160
   \   00000028   0160               STR      R1,[R0, #+0]
    886              data_copyF();
   \   0000002A   ........           BL       data_copyF
    887              LED_change = 1 ;
   \   0000002E   0F48               LDR.N    R0,??appear_0+0x1C  ;; LED_change
   \   00000030   0121               MOVS     R1,#+1
   \   00000032   0170               STRB     R1,[R0, #+0]
    888              while( LED_change == 1 ); 
   \                     ??appear_1:
   \   00000034   0D48               LDR.N    R0,??appear_0+0x1C  ;; LED_change
   \   00000036   0078               LDRB     R0,[R0, #+0]
   \   00000038   0128               CMP      R0,#+1
   \   0000003A   FBD0               BEQ.N    ??appear_1
    889              if (RecProcessing != 0 ) return ;         
   \   0000003C   0C48               LDR.N    R0,??appear_0+0x20  ;; RecProcessing
   \   0000003E   0078               LDRB     R0,[R0, #+0]
   \   00000040   0028               CMP      R0,#+0
   \   00000042   03D1               BNE.N    ??appear_2
    890              dly_ms(500);   
   \   00000044   4FF4FA70           MOV      R0,#+500
   \   00000048   ........           BL       dly_ms
    891          }
   \                     ??appear_2:
   \   0000004C   01BD               POP      {R0,PC}          ;; return
   \   0000004E   00BF               Nop      
   \                     ??appear_0:
   \   00000050   ........           DC32     Dest_Adr
   \   00000054   ........           DC32     LED_buffer
   \   00000058   ........           DC32     Sour_Adr
   \   0000005C   ........           DC32     Backup
   \   00000060   ........           DC32     Data_Len
   \   00000064   ........           DC32     LED_bufferG
   \   00000068   ........           DC32     BackupG
   \   0000006C   ........           DC32     LED_change
   \   00000070   ........           DC32     RecProcessing
    892          
    893          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    894          void appearRight(void)
    895          {
   \                     appearRight:
   \   00000000   10B5               PUSH     {R4,LR}
    896              int v;
    897              Dest_Adr=(unsigned char *)LED_buffer.COM;
   \   00000002   1748               LDR.N    R0,??appearRight_0  ;; Dest_Adr
   \   00000004   1749               LDR.N    R1,??appearRight_0+0x4  ;; LED_buffer
   \   00000006   0160               STR      R1,[R0, #+0]
    898              Sour_Adr=(unsigned char *)Backup.COM;
   \   00000008   1748               LDR.N    R0,??appearRight_0+0x8  ;; Sour_Adr
   \   0000000A   1849               LDR.N    R1,??appearRight_0+0xC  ;; Backup
   \   0000000C   0160               STR      R1,[R0, #+0]
    899              Data_Len=LED_byte_Length*16;
   \   0000000E   1848               LDR.N    R0,??appearRight_0+0x10  ;; Data_Len
   \   00000010   A021               MOVS     R1,#+160
   \   00000012   0160               STR      R1,[R0, #+0]
    900              data_copyF();
   \   00000014   ........           BL       data_copyF
    901              Dest_Adr=(unsigned char *)LED_bufferG.COM;
   \   00000018   1148               LDR.N    R0,??appearRight_0  ;; Dest_Adr
   \   0000001A   1649               LDR.N    R1,??appearRight_0+0x14  ;; LED_bufferG
   \   0000001C   0160               STR      R1,[R0, #+0]
    902              Sour_Adr=(unsigned char *)BackupG.COM;
   \   0000001E   1248               LDR.N    R0,??appearRight_0+0x8  ;; Sour_Adr
   \   00000020   1549               LDR.N    R1,??appearRight_0+0x18  ;; BackupG
   \   00000022   0160               STR      R1,[R0, #+0]
    903              Data_Len=LED_byte_Length*16;
   \   00000024   1248               LDR.N    R0,??appearRight_0+0x10  ;; Data_Len
   \   00000026   A021               MOVS     R1,#+160
   \   00000028   0160               STR      R1,[R0, #+0]
    904              data_copyF();
   \   0000002A   ........           BL       data_copyF
    905              for( v = 0 ; v < 4 ; v++ )
   \   0000002E   0020               MOVS     R0,#+0
   \   00000030   0400               MOVS     R4,R0
   \                     ??appearRight_1:
   \   00000032   042C               CMP      R4,#+4
   \   00000034   03DA               BGE.N    ??appearRight_2
    906                Shift_data_right();  // do data shift right with assembler      
   \   00000036   ........           BL       Shift_data_right
   \   0000003A   641C               ADDS     R4,R4,#+1
   \   0000003C   F9E7               B.N      ??appearRight_1
    907              LED_change = 1 ;
   \                     ??appearRight_2:
   \   0000003E   0F48               LDR.N    R0,??appearRight_0+0x1C  ;; LED_change
   \   00000040   0121               MOVS     R1,#+1
   \   00000042   0170               STRB     R1,[R0, #+0]
    908              while( LED_change == 1 ); 
   \                     ??appearRight_3:
   \   00000044   0D48               LDR.N    R0,??appearRight_0+0x1C  ;; LED_change
   \   00000046   0078               LDRB     R0,[R0, #+0]
   \   00000048   0128               CMP      R0,#+1
   \   0000004A   FBD0               BEQ.N    ??appearRight_3
    909              if (RecProcessing != 0 ) return ;         
   \   0000004C   0C48               LDR.N    R0,??appearRight_0+0x20  ;; RecProcessing
   \   0000004E   0078               LDRB     R0,[R0, #+0]
   \   00000050   0028               CMP      R0,#+0
   \   00000052   03D1               BNE.N    ??appearRight_4
    910              dly_ms(500);   
   \   00000054   4FF4FA70           MOV      R0,#+500
   \   00000058   ........           BL       dly_ms
    911          }
   \                     ??appearRight_4:
   \   0000005C   10BD               POP      {R4,PC}          ;; return
   \   0000005E   00BF               Nop      
   \                     ??appearRight_0:
   \   00000060   ........           DC32     Dest_Adr
   \   00000064   ........           DC32     LED_buffer
   \   00000068   ........           DC32     Sour_Adr
   \   0000006C   ........           DC32     Backup
   \   00000070   ........           DC32     Data_Len
   \   00000074   ........           DC32     LED_bufferG
   \   00000078   ........           DC32     BackupG
   \   0000007C   ........           DC32     LED_change
   \   00000080   ........           DC32     RecProcessing
    912          
    913          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    914          void disappear(void)
    915          {
   \                     disappear:
   \   00000000   80B5               PUSH     {R7,LR}
    916              //memset(LED_buffer.COM,'\0',sizeof(LED_buffer.COM));
    917              Dest_Adr=(unsigned char *)LED_buffer.COM;
   \   00000002   1048               LDR.N    R0,??disappear_0  ;; Dest_Adr
   \   00000004   1049               LDR.N    R1,??disappear_0+0x4  ;; LED_buffer
   \   00000006   0160               STR      R1,[R0, #+0]
    918              Data_Len=sizeof(LED_buffer.COM);
   \   00000008   1048               LDR.N    R0,??disappear_0+0x8  ;; Data_Len
   \   0000000A   A021               MOVS     R1,#+160
   \   0000000C   0160               STR      R1,[R0, #+0]
    919              Dest_data=0;
   \   0000000E   1048               LDR.N    R0,??disappear_0+0xC  ;; Dest_data
   \   00000010   0021               MOVS     R1,#+0
   \   00000012   0160               STR      R1,[R0, #+0]
    920              data_set();
   \   00000014   ........           BL       data_set
    921              Dest_Adr=(unsigned char *)LED_bufferG.COM;
   \   00000018   0A48               LDR.N    R0,??disappear_0  ;; Dest_Adr
   \   0000001A   0E49               LDR.N    R1,??disappear_0+0x10  ;; LED_bufferG
   \   0000001C   0160               STR      R1,[R0, #+0]
    922              Data_Len=sizeof(LED_bufferG.COM);
   \   0000001E   0B48               LDR.N    R0,??disappear_0+0x8  ;; Data_Len
   \   00000020   A021               MOVS     R1,#+160
   \   00000022   0160               STR      R1,[R0, #+0]
    923              Dest_data=0;
   \   00000024   0A48               LDR.N    R0,??disappear_0+0xC  ;; Dest_data
   \   00000026   0021               MOVS     R1,#+0
   \   00000028   0160               STR      R1,[R0, #+0]
    924              data_set();    
   \   0000002A   ........           BL       data_set
    925              LED_change = 1 ;
   \   0000002E   0A48               LDR.N    R0,??disappear_0+0x14  ;; LED_change
   \   00000030   0121               MOVS     R1,#+1
   \   00000032   0170               STRB     R1,[R0, #+0]
    926              while( LED_change == 1 ); 
   \                     ??disappear_1:
   \   00000034   0848               LDR.N    R0,??disappear_0+0x14  ;; LED_change
   \   00000036   0078               LDRB     R0,[R0, #+0]
   \   00000038   0128               CMP      R0,#+1
   \   0000003A   FBD0               BEQ.N    ??disappear_1
    927              if (RecProcessing != 0 ) return ;         
   \   0000003C   0748               LDR.N    R0,??disappear_0+0x18  ;; RecProcessing
   \   0000003E   0078               LDRB     R0,[R0, #+0]
   \   00000040   01BD               POP      {R0,PC}          ;; return
   \   00000042   00BF               Nop      
   \                     ??disappear_0:
   \   00000044   ........           DC32     Dest_Adr
   \   00000048   ........           DC32     LED_buffer
   \   0000004C   ........           DC32     Data_Len
   \   00000050   ........           DC32     Dest_data
   \   00000054   ........           DC32     LED_bufferG
   \   00000058   ........           DC32     LED_change
   \   0000005C   ........           DC32     RecProcessing
    928              //dly_ms(500);   
    929          }
    930          /*
    931          void scroll_left_str(int page_num)
    932          {
    933            char *RevPT;
    934            int d_length,i;
    935          //  RevPT = LEDPage1[page_num].data; //型轉
    936            RevPT =(char * )LEDPage1[page_num].data;
    937          //  d_length = strlen(LEDPage1[page_num].data);//型轉
    938            d_length =strlen((char *)LEDPage1[page_num].data);
    939            for(i=0;;i++){
    940              if ( d_length > LED_byte_Length ){
    941          //      LED_ascii2buffer(RevPT,LED_byte_Length);//型轉
    942                LED_ascii2buffer((unsigned char *)RevPT,LED_byte_Length);
    943                scroll_left(); 
    944                d_length -= LED_byte_Length;
    945                RevPT += LED_byte_Length;
    946              }else{
    947          //      LED_ascii2buffer(RevPT,d_length);//型轉
    948                LED_ascii2buffer((unsigned char *)RevPT,d_length);
    949                if ( i == 0 ){
    950                  scroll_left();
    951                  last_str_width = d_length; 
    952                }else{
    953                  scroll_leftX((d_length)*8);
    954                  last_str_width = LED_byte_Length;
    955                }
    956                break;
    957              }
    958            }
    959          }
    960          */
    961          //************************************************************************************************************************************
    962          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    963          void Shift_data_left(void)
    964          {
   \                     Shift_data_left:
   \   00000000   80B5               PUSH     {R7,LR}
    965           // int i,j;
    966            memset(cfA,'\0',16);
   \   00000002   1022               MOVS     R2,#+16
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0C48               LDR.N    R0,??Shift_data_left_0  ;; cfA
   \   00000008   ........           BL       memset
    967            shift_left(0,Backup.COM);
   \   0000000C   0B49               LDR.N    R1,??Shift_data_left_0+0x4  ;; Backup
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   ........           BL       shift_left
    968            shift_left(0,LED_buffer.COM);
   \   00000014   0A49               LDR.N    R1,??Shift_data_left_0+0x8  ;; LED_buffer
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   ........           BL       shift_left
    969            memset(cfAG,'\0',16);
   \   0000001C   1022               MOVS     R2,#+16
   \   0000001E   0021               MOVS     R1,#+0
   \   00000020   0848               LDR.N    R0,??Shift_data_left_0+0xC  ;; cfAG
   \   00000022   ........           BL       memset
    970            shift_leftG(0,BackupG.COM);
   \   00000026   0849               LDR.N    R1,??Shift_data_left_0+0x10  ;; BackupG
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   ........           BL       shift_leftG
    971            shift_leftG(0,LED_bufferG.COM);  
   \   0000002E   0749               LDR.N    R1,??Shift_data_left_0+0x14  ;; LED_bufferG
   \   00000030   0020               MOVS     R0,#+0
   \   00000032   ........           BL       shift_leftG
    972          }
   \   00000036   01BD               POP      {R0,PC}          ;; return
   \                     ??Shift_data_left_0:
   \   00000038   ........           DC32     cfA
   \   0000003C   ........           DC32     Backup
   \   00000040   ........           DC32     LED_buffer
   \   00000044   ........           DC32     cfAG
   \   00000048   ........           DC32     BackupG
   \   0000004C   ........           DC32     LED_bufferG
    973          
    974          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    975          void Shift_data_leftX(void)
    976          {
   \                     Shift_data_leftX:
   \   00000000   80B5               PUSH     {R7,LR}
    977            memset(cfA,'\0',16);
   \   00000002   1022               MOVS     R2,#+16
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0448               LDR.N    R0,??Shift_data_leftX_0  ;; cfA
   \   00000008   ........           BL       memset
    978            //shift_left(0,Backup.COM);
    979            shift_left(0,LED_buffer.COM);
   \   0000000C   0349               LDR.N    R1,??Shift_data_leftX_0+0x4  ;; LED_buffer
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   ........           BL       shift_left
    980          }
   \   00000014   01BD               POP      {R0,PC}          ;; return
   \   00000016   00BF               Nop      
   \                     ??Shift_data_leftX_0:
   \   00000018   ........           DC32     cfA
   \   0000001C   ........           DC32     LED_buffer
    981          
    982          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
    983          void Shift_data_leftXG(void)
    984          {
   \                     Shift_data_leftXG:
   \   00000000   80B5               PUSH     {R7,LR}
    985            memset(cfAG,'\0',16);
   \   00000002   1022               MOVS     R2,#+16
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0448               LDR.N    R0,??Shift_data_leftXG_0  ;; cfAG
   \   00000008   ........           BL       memset
    986            //shift_left(0,Backup.COM);
    987            shift_leftG(0,LED_bufferG.COM);
   \   0000000C   0349               LDR.N    R1,??Shift_data_leftXG_0+0x4  ;; LED_bufferG
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   ........           BL       shift_leftG
    988          }
   \   00000014   01BD               POP      {R0,PC}          ;; return
   \   00000016   00BF               Nop      
   \                     ??Shift_data_leftXG_0:
   \   00000018   ........           DC32     cfAG
   \   0000001C   ........           DC32     LED_bufferG
    989          
    990          
    991          
    992          
    993          
    994          
    995          
    996          
    997          
    998          
    999          #ifdef _HardWare
   1000          #else //BC6
   1001          void data_copyF(void)
   1002          {
   1003            unsigned char *pszBuffer;
   1004            pszBuffer = new char[Data_Len+1];
   1005            memcpy(pszBuffer,Sour_Adr,Data_Len);
   1006            memcpy(Dest_Adr,pszBuffer,Data_Len);
   1007            delete [] pszBuffer;
   1008          }
   1009          #endif
   1010          
   1011          
   1012          
   1013          
   1014          
   1015          
   1016          
   1017          
   1018          
   1019          
   1020          
   1021          
   1022          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
   1023          void data_copyB(void)
   1024          {
   1025            int i;
   1026            for(i=0;i< Data_Len ;i++)
   \                     data_copyB:
   \   00000000   0021               MOVS     R1,#+0
   \   00000002   0800               MOVS     R0,R1
   \                     ??data_copyB_0:
   \   00000004   0849               LDR.N    R1,??data_copyB_1  ;; Data_Len
   \   00000006   0968               LDR      R1,[R1, #+0]
   \   00000008   8842               CMP      R0,R1
   \   0000000A   0CD2               BCS.N    ??data_copyB_2
   1027               *(Dest_Adr-i)=*(Sour_Adr-i);
   \   0000000C   4142               RSBS     R1,R0,#+0
   \   0000000E   074A               LDR.N    R2,??data_copyB_1+0x4  ;; Dest_Adr
   \   00000010   1268               LDR      R2,[R2, #+0]
   \   00000012   4342               RSBS     R3,R0,#+0
   \   00000014   DFF818C0           LDR.W    R12,??data_copyB_1+0x8  ;; Sour_Adr
   \   00000018   DCF800C0           LDR      R12,[R12, #+0]
   \   0000001C   13F80C30           LDRB     R3,[R3, R12]
   \   00000020   8B54               STRB     R3,[R1, R2]
   \   00000022   401C               ADDS     R0,R0,#+1
   \   00000024   EEE7               B.N      ??data_copyB_0
   1028          }
   \                     ??data_copyB_2:
   \   00000026   7047               BX       LR               ;; return
   \                     ??data_copyB_1:
   \   00000028   ........           DC32     Data_Len
   \   0000002C   ........           DC32     Dest_Adr
   \   00000030   ........           DC32     Sour_Adr
   1029          
   1030          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
   1031          void data_set()
   1032          {
   \                     data_set:
   \   00000000   80B5               PUSH     {R7,LR}
   1033            memset(Dest_Adr,Dest_data,Data_Len);
   \   00000002   0448               LDR.N    R0,??data_set_0  ;; Data_Len
   \   00000004   0268               LDR      R2,[R0, #+0]
   \   00000006   0448               LDR.N    R0,??data_set_0+0x4  ;; Dest_data
   \   00000008   0168               LDR      R1,[R0, #+0]
   \   0000000A   0448               LDR.N    R0,??data_set_0+0x8  ;; Dest_Adr
   \   0000000C   0068               LDR      R0,[R0, #+0]
   \   0000000E   ........           BL       memset
   1034          }
   \   00000012   01BD               POP      {R0,PC}          ;; return
   \                     ??data_set_0:
   \   00000014   ........           DC32     Data_Len
   \   00000018   ........           DC32     Dest_data
   \   0000001C   ........           DC32     Dest_Adr
   1035          
   1036          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
   1037          void Shift_data_right(void)
   1038          {
   \                     Shift_data_right:
   \   00000000   80B5               PUSH     {R7,LR}
   1039              memset(cfA,'\0',16);   
   \   00000002   1022               MOVS     R2,#+16
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0748               LDR.N    R0,??Shift_data_right_0  ;; cfA
   \   00000008   ........           BL       memset
   1040              //shift_right(Backup.COM);
   1041              shift_right(LED_buffer.COM);
   \   0000000C   0648               LDR.N    R0,??Shift_data_right_0+0x4  ;; LED_buffer
   \   0000000E   ........           BL       shift_right
   1042              memset(cfA,'\0',16);
   \   00000012   1022               MOVS     R2,#+16
   \   00000014   0021               MOVS     R1,#+0
   \   00000016   0348               LDR.N    R0,??Shift_data_right_0  ;; cfA
   \   00000018   ........           BL       memset
   1043              //shift_right(BackupG.COM);
   1044              shift_right(LED_bufferG.COM);
   \   0000001C   0348               LDR.N    R0,??Shift_data_right_0+0x8  ;; LED_bufferG
   \   0000001E   ........           BL       shift_right
   1045          }
   \   00000022   01BD               POP      {R0,PC}          ;; return
   \                     ??Shift_data_right_0:
   \   00000024   ........           DC32     cfA
   \   00000028   ........           DC32     LED_buffer
   \   0000002C   ........           DC32     LED_bufferG
   1046          
   1047          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
   1048          void rcr(unsigned char *ch)
   1049          {
   1050            unsigned char temp;
   1051            temp=cf << 7;
   \                     rcr:
   \   00000000   074A               LDR.N    R2,??rcr_0       ;; cf
   \   00000002   1278               LDRB     R2,[R2, #+0]
   \   00000004   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   D201               LSLS     R2,R2,#+7
   \   00000008   1100               MOVS     R1,R2
   1052            cf = ( (*ch & 0x01) !=0 );
   \   0000000A   0278               LDRB     R2,[R0, #+0]
   \   0000000C   12F00102           ANDS     R2,R2,#0x1
   \   00000010   034B               LDR.N    R3,??rcr_0       ;; cf
   \   00000012   1A70               STRB     R2,[R3, #+0]
   1053            *ch= (*ch >> 1) | temp ;
   \   00000014   0278               LDRB     R2,[R0, #+0]
   \   00000016   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000018   51EA5202           ORRS     R2,R1,R2, LSR #+1
   \   0000001C   0270               STRB     R2,[R0, #+0]
   1054          }
   \   0000001E   7047               BX       LR               ;; return
   \                     ??rcr_0:
   \   00000020   ........           DC32     cf
   1055          
   1056          //#pragma optimize=none

   \                                 In section .text, align 4, keep-with-next
   1057          void shift_right(unsigned char buf[16][LED_byte_Length])
   1058          {
   \                     shift_right:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   90B0               SUB      SP,SP,#+64
   \   00000004   0400               MOVS     R4,R0
   1059            int i,j;
   1060            int tmpcf[16];
   1061            for(i=0;i<16;i++){
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   0500               MOVS     R5,R0
   \                     ??shift_right_0:
   \   0000000A   102D               CMP      R5,#+16
   \   0000000C   24DA               BGE.N    ??shift_right_1
   1062              tmpcf[i] = ( (buf[i][LED_byte_Length-1] & 0x01) != 0 );
   \   0000000E   0A20               MOVS     R0,#+10
   \   00000010   05FB0040           MLA      R0,R5,R0,R4
   \   00000014   407A               LDRB     R0,[R0, #+9]
   \   00000016   10F00100           ANDS     R0,R0,#0x1
   \   0000001A   00A9               ADD      R1,SP,#+0
   \   0000001C   41F82500           STR      R0,[R1, R5, LSL #+2]
   1063              cf=cfA[i];
   \   00000020   0E48               LDR.N    R0,??shift_right_2  ;; cfA
   \   00000022   285C               LDRB     R0,[R5, R0]
   \   00000024   0E49               LDR.N    R1,??shift_right_2+0x4  ;; cf
   \   00000026   0870               STRB     R0,[R1, #+0]
   1064              rcr(&buf[i][0]);
   \   00000028   0A20               MOVS     R0,#+10
   \   0000002A   05FB0040           MLA      R0,R5,R0,R4
   \   0000002E   ........           BL       rcr
   1065              cfA[i]=tmpcf[i];
   \   00000032   00A8               ADD      R0,SP,#+0
   \   00000034   50F82500           LDR      R0,[R0, R5, LSL #+2]
   \   00000038   0849               LDR.N    R1,??shift_right_2  ;; cfA
   \   0000003A   6854               STRB     R0,[R5, R1]
   1066              for(j=1;j<LED_byte_Length;j++)
   \   0000003C   0120               MOVS     R0,#+1
   \   0000003E   0600               MOVS     R6,R0
   \                     ??shift_right_3:
   \   00000040   0A2E               CMP      R6,#+10
   \   00000042   07DA               BGE.N    ??shift_right_4
   1067                rcr(&buf[i][j]);
   \   00000044   0A20               MOVS     R0,#+10
   \   00000046   05FB0040           MLA      R0,R5,R0,R4
   \   0000004A   3018               ADDS     R0,R6,R0
   \   0000004C   ........           BL       rcr
   \   00000050   761C               ADDS     R6,R6,#+1
   \   00000052   F5E7               B.N      ??shift_right_3
   1068            }
   \                     ??shift_right_4:
   \   00000054   6D1C               ADDS     R5,R5,#+1
   \   00000056   D8E7               B.N      ??shift_right_0
   1069          }
   \                     ??shift_right_1:
   \   00000058   10B0               ADD      SP,SP,#+64
   \   0000005A   70BD               POP      {R4-R6,PC}       ;; return
   \                     ??shift_right_2:
   \   0000005C   ........           DC32     cfA
   \   00000060   ........           DC32     cf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109:
   \   00000000   ........           DC32     animate_img

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114:
   \   00000000   ........           DC32     color_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable123:
   \   00000000   ........           DC32     Dest_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127:
   \   00000000   ........           DC32     BinMix

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable128:
   \   00000000   ........           DC32     LEDPage1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129:
   \   00000000   ........           DC32     LEDPage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable154:
   \   00000000   ........           DC32     Backup

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable157:
   \   00000000   ........           DC32     Dest_Adr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable159:
   \   00000000   ........           DC32     BackupG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable160:
   \   00000000   ........           DC32     Sour_Adr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable161:
   \   00000000   ........           DC32     Data_Len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable162:
   \   00000000   ........           DC32     udf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable163:
   \   00000000   ........           DC32     LED_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable164:
   \   00000000   ........           DC32     udfG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable165:
   \   00000000   ........           DC32     LED_bufferG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable167:
   \   00000000   ........           DC32     LED_change

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable168:
   \   00000000   ........           DC32     RecProcessing

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     Get_ImgBits            0
     Get_ImgBitsPage        0
     Put_ImgBits            0
     Put_ImgBitsPage        8
     Shift_data_left        0
     Shift_data_leftX       0
     Shift_data_leftXG      0
     Shift_data_right       0
     Snow                   0
     Snow_Out               0
     Vrain_down             0
     Vrain_down_Out         0
     abs                    0
     animate                8
     animate_Out            8
     appear                 0
     appearRight            0
     data_copyB             0
     data_set               0
     disappear              0
     flash_NormalOut        0
     flash_Out              0
     jmp_right              0
     jmp_right_Out          0
     jmp_right_Out_str      0
     memcpy                 0
     memset                 0
     over_down              0
     over_down_Out          0
     over_right             0
     over_right_Out         0
     rcr                    0
     scroll_down            0
     scroll_down_Out        0
     scroll_left            0
     scroll_leftB           0
     scroll_leftX           0
     scroll_left_Out        0
     scroll_right           0
     scroll_right_Out       0
     scroll_up              0
     scroll_up_Out          0
     shiftBits_down         0
     shiftBits_up           0
     shift_down             0
     shift_right            0
     shift_up               0
     shot_left              0


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     memcpy              22
     memset              22
     abs                  8
     scroll_leftB        48
     scroll_left         10
     scroll_leftX       312
     scroll_left_Out     60
     scroll_right        48
     scroll_right_Out    60
     shift_up            64
     shift_down          64
     Get_ImgBits        106
     Put_ImgBits        254
     scroll_up          150
     scroll_up_Out      104
     scroll_down        152
     scroll_down_Out    104
     animate            342
     animate_Out        244
     Get_ImgBitsPage    140
     Put_ImgBitsPage     62
     shot_left          264
     shiftBits_down      68
     shiftBits_up        62
     Vrain_down         138
     Vrain_down_Out     284
     Snow               324
     Snow_Out           192
     jmp_right          204
     jmp_right_Out      128
     jmp_right_Out_str  108
     over_down          120
     over_down_Out       96
     over_right         220
     over_right_Out     140
     flash_Out          472
     flash_NormalOut    212
     appear             116
     appearRight        132
     disappear           96
     Shift_data_left     80
     Shift_data_leftX    32
     Shift_data_leftXG   32
     data_copyB          52
     data_set            32
     Shift_data_right    48
     rcr                 36
     shift_right        100
     ??DataTable109       4
     ??DataTable114       4
     ??DataTable123       4
     ??DataTable127       4
     ??DataTable128       4
     ??DataTable129       4
     ??DataTable154       4
     ??DataTable157       4
     ??DataTable159       4
     ??DataTable160       4
     ??DataTable161       4
     ??DataTable162       4
     ??DataTable163       4
     ??DataTable164       4
     ??DataTable165       4
     ??DataTable167       4
     ??DataTable168       4

 
 6 232 bytes in section .text
 
 6 180 bytes of CODE memory (+ 52 bytes shared)

Errors: none
Warnings: 1
