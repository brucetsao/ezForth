###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.20.0.50892/W32 for ARM     07/Oct/2009  13:03:54 #
# Copyright 1999-2008 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\library\src\stm32f #
#                    10x_crc.c                                                #
#    Command line =  F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\library\src\stm32f #
#                    10x_crc.c -D VECT_TAB_FLASH -lC                          #
#                    F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\STM3210E-EVAL\List #
#                    \ -o F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\STM3210E-EVAL #
#                    \Obj\ --debug --endian=little --cpu=Cortex-M3 -e         #
#                    --char_is_signed --require_prototypes --fpu=None         #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.0\ARM\INC\DLib_Config_Full.h" -I             #
#                    F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\ -I                #
#                    F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\library\inc\ -I    #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.0\ARM\INC\" -Ohz                                       #
#    List file    =  F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\STM3210E-EVAL\List #
#                    \stm32f10x_crc.lst                                       #
#    Object file  =  F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\STM3210E-EVAL\Obj\ #
#                    stm32f10x_crc.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

F:\CoLtd\Forth\MCU\STM32F10x\ST_Forth\library\src\stm32f10x_crc.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : stm32f10x_crc.c
      3          * Author             : MCD Application Team
      4          * Version            : V2.0.3
      5          * Date               : 09/22/2008
      6          * Description        : This file provides all the CRC firmware functions.
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          
     16          /* Includes ------------------------------------------------------------------*/
     17          #include "stm32f10x_crc.h"
     18          
     19          /* Private typedef -----------------------------------------------------------*/
     20          /* Private define ------------------------------------------------------------*/
     21          
     22          /* CR register bit mask */
     23          #define CR_RESET_Set    ((u32)0x00000001)
     24          
     25          /* Private macro -------------------------------------------------------------*/
     26          /* Private variables ---------------------------------------------------------*/
     27          /* Private function prototypes -----------------------------------------------*/
     28          /* Private functions ---------------------------------------------------------*/
     29          
     30          /*******************************************************************************
     31          * Function Name  : CRC_ResetDR
     32          * Description    : Resets the CRC Data register (DR).
     33          * Input          : None
     34          * Output         : None
     35          * Return         : None
     36          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     37          void CRC_ResetDR(void)
     38          {
     39            /* Reset CRC generator */
     40            CRC->CR = CR_RESET_Set;
   \                     CRC_ResetDR:
   \   00000000   0148               LDR.N    R0,??CRC_ResetDR_0  ;; 0x40023008
   \   00000002   0121               MOVS     R1,#+1
   \   00000004   0160               STR      R1,[R0, #+0]
     41          }
   \   00000006   7047               BX       LR               ;; return
   \                     ??CRC_ResetDR_0:
   \   00000008   08300240           DC32     0x40023008
     42          
     43          /*******************************************************************************
     44          * Function Name  : CRC_CalcCRC
     45          * Description    : Computes the 32-bit CRC of a given data word(32-bit).
     46          * Input          : - Data: data word(32-bit) to compute its CRC
     47          * Output         : None
     48          * Return         : 32-bit CRC
     49          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     50          u32 CRC_CalcCRC(u32 Data)
     51          {
     52            CRC->DR = Data;
   \                     CRC_CalcCRC:
   \   00000000   ....               LDR.N    R1,??DataTable2  ;; 0x40023000
   \   00000002   0860               STR      R0,[R1, #+0]
     53            
     54            return (CRC->DR);
   \   00000004   0868               LDR      R0,[R1, #+0]
   \   00000006   7047               BX       LR               ;; return
     55          }
     56          
     57          /*******************************************************************************
     58          * Function Name  : CRC_CalcBlockCRC
     59          * Description    : Computes the 32-bit CRC of a given buffer of data word(32-bit).
     60          * Input          : - pBuffer: pointer to the buffer containing the data to be 
     61          *                    computed
     62          *                  - BufferLength: length of the buffer to be computed					
     63          * Output         : None
     64          * Return         : 32-bit CRC
     65          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     66          u32 CRC_CalcBlockCRC(u32 pBuffer[], u32 BufferLength)
     67          {
     68            u32 index = 0;
     69            
     70            for(index = 0; index < BufferLength; index++)
   \                     CRC_CalcBlockCRC:
   \   00000000   0022               MOVS     R2,#+0
   \   00000002   ....               LDR.N    R3,??DataTable2  ;; 0x40023000
   \   00000004   04E0               B.N      ??CRC_CalcBlockCRC_0
     71            {
     72              CRC->DR = pBuffer[index];
   \                     ??CRC_CalcBlockCRC_1:
   \   00000006   50F822C0           LDR      R12,[R0, R2, LSL #+2]
   \   0000000A   C3F800C0           STR      R12,[R3, #+0]
     73            }
   \   0000000E   521C               ADDS     R2,R2,#+1
   \                     ??CRC_CalcBlockCRC_0:
   \   00000010   8A42               CMP      R2,R1
   \   00000012   F8D3               BCC.N    ??CRC_CalcBlockCRC_1
     74          
     75            return (CRC->DR);
   \   00000014   1868               LDR      R0,[R3, #+0]
   \   00000016   7047               BX       LR               ;; return
     76          }
     77          
     78          /*******************************************************************************
     79          * Function Name  : CRC_GetCRC
     80          * Description    : Returns the current CRC value.
     81          * Input          : None
     82          * Output         : None
     83          * Return         : 32-bit CRC
     84          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     85          u32 CRC_GetCRC(void)
     86          {
     87            return (CRC->DR);
   \                     CRC_GetCRC:
   \   00000000   ....               LDR.N    R0,??DataTable2  ;; 0x40023000
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
     88          }
     89          
     90          /*******************************************************************************
     91          * Function Name  : CRC_SetIDRegister
     92          * Description    : Stores a 8-bit data in the Independent Data(ID) register.
     93          * Input          : - IDValue: 8-bit value to be stored in the ID register 					
     94          * Output         : None
     95          * Return         : None
     96          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     97          void CRC_SetIDRegister(u8 IDValue)
     98          {
     99            CRC->IDR = IDValue;
   \                     CRC_SetIDRegister:
   \   00000000   ....               LDR.N    R1,??DataTable4  ;; 0x40023004
   \   00000002   0870               STRB     R0,[R1, #+0]
    100          }
   \   00000004   7047               BX       LR               ;; return
    101          
    102          /*******************************************************************************
    103          * Function Name  : CRC_GetIDRegister
    104          * Description    : Returns the 8-bit data stored in the Independent Data(ID) register
    105          * Input          : None
    106          * Output         : None
    107          * Return         : 8-bit value of the ID register 
    108          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    109          u8 CRC_GetIDRegister(void)
    110          {
    111            return (CRC->IDR);
   \                     CRC_GetIDRegister:
   \   00000000   ....               LDR.N    R0,??DataTable4  ;; 0x40023004
   \   00000002   0078               LDRB     R0,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
    112          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   00300240           DC32     0x40023000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   04300240           DC32     0x40023004
    113          
    114          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     CRC_CalcBlockCRC       0
     CRC_CalcCRC            0
     CRC_GetCRC             0
     CRC_GetIDRegister      0
     CRC_ResetDR            0
     CRC_SetIDRegister      0


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     CRC_ResetDR         12
     CRC_CalcCRC          8
     CRC_CalcBlockCRC    24
     CRC_GetCRC           6
     CRC_SetIDRegister    6
     CRC_GetIDRegister    6
     ??DataTable2         4
     ??DataTable4         4

 
 70 bytes in section .text
 
 70 bytes of CODE memory

Errors: none
Warnings: none
